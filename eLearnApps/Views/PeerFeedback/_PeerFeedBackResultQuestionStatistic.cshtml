@using eLearnApps.ViewModel.PeerFeedback 
@model eLearnApps.ViewModel.PeerFeedback.PeerFeedBackResultDetailQuestionStatisticViewModel
<style>
    .badge {
        font-size: 100%;
    }
</style>
<div class="row">
    <div class="col-12">
        <div class="row">
            <div class="col-5">
                <div class="row">
                    <canvas id="chart-@Model.ChartId"></canvas>
                </div>
                @if (Model.RatingQuestion.Count > 0)
                {
                    <div class="row w-100 mt-3">
                        @if (Model.GroupBy == Convert.ToInt32(PeerFeedBackResultGroupBy.AssignedGroup))
                        {
                            <div class="w-100">Total number of ratings received: @Model.CountUserComplete out @Model.TotalUserInGroup group members</div>
                            if (Model.SelfValue != null)
                            {
                                <div class="w-100 mt-3">
                                    My Self Evaluations:<span class="badge me-1 rounded-pill ml-1" style="background-color: @Model.SelfValue.ColorCode !important;color:white;">@Model.SelfValue.Text</span>
                                </div>
                            }
                        }
                        <div class="w-100 mt-3">
                            <button type="button" class="btn btn-lg btn-block k-primary k-button" data-toggle="modal" data-target="#staticBackdrop-@Model.ResourceId">
                                 View Recommended Resources
                            </button>
                            @await Component.InvokeAsync("SelfDirectedLearningResources", new
                                {
                                    resourceId = Model.ResourceId,
                                    questionTitle = Model.QuestionTitle
                                })
                        </div>
                    </div>
                }
            </div>
            <div class="col-7">
                <div class="row w-100">
                    @if (Model.RatingQuestion.Count > 0)
                    {
                        <h5>Overview of descriptors from peers</h5>
                        foreach (var item in Model.RatingQuestion)
                        {
                            if (item.RatingOptions.Count > 0)
                            {
                                <hr class="col-12 w-100" /><br />
                                <div class="col-12 mb-3" style="color: #99979c;"><strong>Descriptor(s) related to @item.Name</strong></div>
                                foreach (var option in item.RatingOptions)
                                {
                                    <div class="col-4">
                                        <div class="progress-group">
                                            <div class="progress-group-header">
                                                <div class="text-muted" style="margin-left: auto !important;">
                                                    <div data-toggle="tooltip" data-placement="top" title="Response rate (@option.Progress.ToString("N2")%) (respondents/ total participants)"><strong>@option.ResponseCount</strong> (@option.Progress.ToString("N2")%)</div>
                                                </div>
                                            </div>
                                            <div class="progress-group-bars">
                                                <div class="progress progress-xs mb-0" style="height:13px;">
                                                    <div class="progress-bar bg-success" style="background-color: @option.ColorCode !important; width: @option.Progress.ToString("N2")%" role="progressbar" aria-valuenow="56" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-12 text-left"><span class="text-muted">@option.OptionName</span></div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                    else
                    {
                        <h5>There is no evaluation record(s) from peers.</h5>
                    }

                </div>
            </div>
        </div>
    </div>
</div>
<script>
    const chartData = @Html.Raw(Model.ChartData);
    var options = {
        plugins: {
            datalabels: {
                formatter: (value, ctx) => {
                    if (value === 0) return '';
                    let datasets = ctx.chart.data.datasets;
                    if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                        let sum = datasets[0].data.reduce((a, b) => a + b, 0);
                        let percentage = Math.round(((value / sum) * 100) * 100) / 100 + "%";
                        return `${value} (${percentage})`;
                    } else {
                        return percentage;
                    }
                },
                color: "white"
            }
        }
    };
    $(document).ready(function () {
        const ctx = document.getElementById('chart-@Model.ChartId');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: chartData.Labels,
                datasets: [{
                    data: chartData.Data,
                    backgroundColor: chartData.BackgroundColor
                }]
            },
            plugins: [ChartDataLabels],
            options: options
        });
        $('[data-toggle="tooltip"]').tooltip();
    });

    $(".btn-show-resource").click(function () {
        const courseId = $('.detail.collapse.show').data('course');
        const url = '@Url.Action("AuditUserAction", "PeerFeedback")';
        const param = {
            ResourceId: 0,
            CourseId: courseId,
            Question: "@Model.QuestionTitle",
        };
        createPostRequest(url, param);
    });

</script>