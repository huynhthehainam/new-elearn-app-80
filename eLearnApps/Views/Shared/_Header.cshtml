<style>
    #dvTermCourse {
        font-weight: 500;
    }
</style>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "_headerform" }))
{
    @Html.AntiForgeryToken()
    <div id="section-not-print" class="navbar navbar-expand-lg navbar-dark bg-header d-flex flex-wrap justify-content-between sticky-top navbar pt-0 pb-0 mb-6">
        <div class="order-xl-1">
            <div class="d-flex">
                <div class="flex-fill">
                    <button class="navbar-toggle-always sidebar-toggler  d-lg-none mr-auto " type="button" data-toggle="sidebar-show">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <button class="navbar-toggle-always sidebar-toggler d-md-down-none mr-auto " type="button" data-toggle="sidebar-lg-show">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                </div>
                <div class="flex-fill nav navbar-nav">
                    <span class="nav-link">
                        <span class="" id="lblFormTitle">
                            @if (ViewBag.PageIcon == null)
                            {
                                <i class="nav-icon icon-calendar"></i>
                                <span>&nbsp; @ViewBag.Title</span>
                            }
                            else
                            {
                                <img src="@ViewBag.PageIcon" width="35" height="35">
                                <span class=" d-md-down-none">@ViewBag.Title</span>
                            }
                        </span>
                    </span>
                </div>
            </div>
        </div>
        <div class="order-xl-3 ml-auto">
            <div class="d-flex">
                <div class="flex-fill">

                    <a class="nav-link mt-2" id="lnkUserGuideNoLink" title="User Guide" style="display: none;">
                        <i class="fa fa-question-circle fa-2x" style="color: lightgray;"></i>
                    </a>

                    <a class="nav-link mt-2" title="User Guide" id="lnkUserGuide" style="color: white; display: none;" download target="_blank">
                        <i class="fa fa-question-circle fa-2x"></i>
                    </a>
                </div>
                <div class=" flex-fill">
                    <a class="nav-link" href="https://www.smu.edu.sg/">
                        <img src="@Url.Content("~/Content/images/logo.png")" width="100" height="39" alt="SMU Logo" />
                    </a>
                </div>
            </div>
        </div>
        <div class=" order-xl-2 flex-grow-1">
            <div class="d-md-flex flex-md-row justify-content-center">
                <div class="col-11">
                    <div class="d-flex">
                        <div class="p-2 flex-fixed-width-item ">
                            <label for="term" class="pt-2 font-weight-bold">TERM/COURSE</label>
                        </div>
                        <div class="p-2 flex-grow-1" id="dvTermCourse">
                            <input id="termCourse" placeholder="Select term/course..." style="width: 100%;" class="form-control" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    const urlDropdown = '@Url.Action("PopulateDropdown", "Menu", new {CourseID = ViewBag.CourseId})';
    const urlBySemester = '@Url.Action("GetBySemesterId", "Menu", new {CourseID = ViewBag.CourseId})';
    var selectedCourseId = parseInt(@ViewBag.CourseId);
    window.courseId = selectedCourseId;
    var selectedTermId = parseInt(@ViewBag.TermId);
    const GetBySemesterAsync = async (id) => {
        let result = await createPostRequest(urlBySemester, { semesterId: id });
        return result;
    }
    const prepareDropdown = async () => {
        let datasource = new kendo.data.HierarchicalDataSource({
            transport: {
                read: function (options) {
                    createPostRequest(urlDropdown, { semesterId: selectedTermId }).then(function (datasource) {
                        options.success(datasource);
                    });
                }
            },
            schema: {
                model: {
                    id: "id",
                    hasChildren: true,
                    children: {
                        transport: {
                            read: function (options) {
                                createPostRequest(urlBySemester, { semesterId: options.data.id }).then(function (datasource) {
                                    options.success(datasource);
                                });
                            }
                        },
                        schema: {
                            model: {
                                id: "id",
                                hasChildren: false
                            }
                        }
                    }
                }
            }
        });
        $("#termCourse").kendoDropDownTree({
            placeholder: "Select ...",
            filter: "contains",
            autoWidth: true,
            dataTextField: "text",
            dataValueField: "id",
            clearButton: false,
            value: selectedCourseId,
            dataSource: datasource,
            loadOnDemand: true,
            select: function (e) {
                let item = e.sender.dataItem(e.node);
                if (item.hasChildren) {
                    e.preventDefault();
                    let cbo = $("#termCourse").data("kendoDropDownTree");
                    let treeview = cbo.treeview;
                    treeview.collapse(".k-item");
                    treeview.expand(treeview.findByUid(item.uid));
                    treeview.expandTo(item.Id);
                }
            },
            change: function (e) {
                selectedCourseId = e.sender.value();
                window.courseId = selectedCourseId;
                updateClaim();
            }
        }).data("kendoDropDownTree");
    }
    $(document).ready(function() {
        window.kendo.init("#buttonContainer");
        GetUserGuide();
        prepareDropdown();
    });

    var controllerName = "@ViewContext.RouteData.Values["controller"]?.ToString()";

    let urlGetGuideLink = `@Url.Action("GetUserGuideLink", "Common")?CourseId=@(ViewBag.CourseId)&toolId=${controllerName}`;
    const GetUserGuide = async () => {
        const response = await ExecuteWithOutHeader(urlGetGuideLink, HttpMethod.GET);
        if (response !== null && response !== undefined && response.length > 0) {
            $('#lnkUserGuide').attr('href', response);
            $('#lnkUserGuide').show();
        } else {
            $('#lnkUserGuideNoLink').show();
        }
    };
    $('#sidebar_toggle').click(function() {
        setTimeout(function() { $(window).trigger('resize'); }, 300);
    });

    const updateClaim = () => {
        const url = `@Url.Action("UpdateClaims", "Account")?courseId=${selectedCourseId}&hash=${window.location.hash.replace("#", "")}&referrer=${window.location}`;
        createPostRequest(url).then(function (response) {
            if (response.redirectUrl) {
                window.location = response.redirectUrl;
            }
        });
    };
</script>
<style>
    .flex-fixed-width-item {
        flex: 0 0 70px;
    }

    .navbar-toggle-always {
        background-color: transparent;
        background-image: none;
        border: 1px solid transparent;
        border-radius: 4px;
        float: right;
        margin-bottom: 8px;
        margin-left: 0;
        margin-right: 15px;
        margin-right: 0;
        margin-top: 8px;
        padding: 9px 10px;
        position: relative;
    }

        .navbar-toggle-always:focus {
            outline: 0;
        }
</style>