<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="descriptor_response_by_coursecode" xml:space="preserve">
    <value>DROP TABLE IF EXISTS #WhitelistedCourseCodeAcademicGroup
SELECT Courses.Id AS CourseId,
		Courses.Code AS CourseCode,
		PS_SIS_LMS_CLASS_V.ACAD_GROUP AS AcadGroup,
		STUFF((SELECT '; ' + Users.DisplayName
		FROM UserEnrollments
		INNER JOIN Users
			ON Users.Id = UserEnrollments.UserId
		WHERE UserEnrollments.CourseId = Courses.Id
			AND UserEnrollments.RoleId = 106
		ORDER BY Users.DisplayName
		FOR XML PATH('')), 1, 1, '') AS Instructor
INTO #WhitelistedCourseCodeAcademicGroup
FROM Courses
LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_CLASS_V 
	ON PS_SIS_LMS_CLASS_V.STRM = TL_CourseOfferings.STRM 
	AND PS_SIS_LMS_CLASS_V.CLASS_NBR = TL_CourseOfferings.CLASS_NBR
WHERE Courses.Id IN @SelectedCourses
	--(6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
	--(329392, 329581, 328765, 329737, 329477, 328931, 329832, 329733, 329394, 328768, 328940, 329583, 329674, 329923, 328944, 329244, 328806, 328713, 328636, 329076, 328726, 329542, 329167, 328822, 328894, 329355, 328988, 329078, 329252, 329975, 328985, 329084, 329452, 328650, 329262, 329174, 329640, 328825, 329897, 329710, 329799, 328734, 329265, 328828, 329086, 329173, 329898, 328994, 329644, 329643, 329554, 328740, 329901, 329998, 344128, 344189, 344194, 344232, 344351, 344413, 344430, 344486, 344518, 344525, 344545, 344547, 344570, 344587, 344588, 344614, 344654, 344658, 344688, 344693, 344694, 344708, 344735, 344760, 344780, 344788, 344832, 344836, 344842, 344861, 344908, 344910, 344938, 344940, 344977, 345009, 345060, 345127, 345129, 345152, 345156, 345177, 345180, 345216, 345238, 345254, 345255, 345260, 345270, 345308, 345345, 345368, 345376, 345392)
-- orgunitids of 2023-24 Term 2 IS213 
--(375508, 375511, 376136, 376239, 376326, 376328, 376330, 376515, 376516, 376657,
-- orgunitids of 2023-24 Term 2 COR1307sss
--376194, 376190,
-- orgunitids of 2023-24 Term 2 IS214 
--376415, 375343, 375594, 376414, 375513, 376589, 375431, 375337, 376137, 375754,
-- orgunitids of 2023-24 Term 2 CS460 --&gt;
--375581)
--SELECT * FROM #WhitelistedCourseCodeAcademicGroup

DECLARE @Total_Targets DECIMAL(5, 2)

DECLARE @CursorParam_CourseCode VARCHAR(24)
DECLARE @CursorParam_AcademicGroup NVARCHAR(5) 
DECLARE @CursorParam_Instructor NVARCHAR(200) 

DROP TABLE IF EXISTS #TotalTargetsPerCourse
CREATE TABLE #TotalTargetsPerCourse
(
	AcademicGroup NVARCHAR(5),
	CourseCode VARCHAR(24),	
	Instructor NVARCHAR(200),
	Total_Targets DECIMAL(5, 2)
)

DECLARE CURSOR_FILTERS CURSOR FOR

	SELECT CourseCode, 
			AcadGroup, 
			Instructor
	FROM #WhitelistedCourseCodeAcademicGroup

OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseCode, @CursorParam_AcademicGroup, @CursorParam_Instructor
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @Total_Targets = 0.0

	--SELECT @CursorParam_CourseCode

	SELECT @Total_Targets = COUNT(TargetUserId)
	FROM (
			SELECT	DISTINCT
					Courses.Id CourseId,
					Courses.Code, 
					TargetUser.Id AS TargetUserId,
					TargetUser.DisplayName TargetUserDisplayName, 

					--CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
					--CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
					--CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",

					CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
						THEN 0
						ELSE 1
					END HasEvaluation			
			
					--, EvaluatorUser.DisplayName EvaluatorUser
					--, PeerFeedBackPairingSessions.PeerFeedBackSessionId

			FROM PeerFeedBackPairingSessions

			--LEFT JOIN PeerFeedbackEvaluators
			--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
			LEFT JOIN PeerFeedbackTargets
				ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId

			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 1) Question1
				ON 
				--Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question1.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
				--AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
				ON Question1.PeerFeedbackRatingId = Q1Rating.Id
			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 2) Question2
				ON 
				--Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question2.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
				--AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
				ON Question2.PeerFeedbackRatingId = Q2Rating.Id
			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 3) Question3
				ON 
				--Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question3.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
				--AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
				ON Question3.PeerFeedbackRatingId = Q3Rating.Id

			LEFT JOIN CategoryGroups
				ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
			LEFT JOIN CourseCategories
				ON CourseCategories.Id = CategoryGroups.CourseCategoryId
			LEFT JOIN Courses
				ON CourseCategories.CourseId = Courses.Id

			--LEFT JOIN Users EvaluatorUser
			--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
			LEFT JOIN Users TargetUser
				ON PeerFeedbackTargets.UserId = TargetUser.Id

			LEFT JOIN PeerFeedbackSessions
				ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback
				ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		
			LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
				ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
	--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
	--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID

			WHERE  Courses.Code = @CursorParam_CourseCode
	--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
				AND PeerFeedbackSessions.IsDeleted = 0
				AND PeerFeedback.IsDeleted = 0
				--AND Question1.EvaluatorUserId != TargetUser.Id
	) Targets
	WHERE Targets.HasEvaluation = 1
	GROUP BY Code
	--SELECT @Total_Targets AS Total_Targets
	--SELECT @CursorParam_AcademicGroup, @CursorParam_CourseCode, @Total_Targets AS Total_Targets

	INSERT INTO #TotalTargetsPerCourse
	SELECT @CursorParam_AcademicGroup As AcademicGroup 
		, @CursorParam_CourseCode AS CourseCode
		, @CursorParam_Instructor AS Instructor
		, @Total_Targets AS Total_Targets

	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseCode, @CursorParam_AcademicGroup, @CursorParam_Instructor
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS

--SELECT * FROM #TotalTargetsPerCourse

DROP TABLE IF EXISTS #Temp_Responses
SELECT ROW_NUMBER() OVER (ORDER BY Responses.PeerFeedBackId) AS PeerFeedBackResponsesId,
		Responses.PeerFeedBackId,
		Responses.PeerFeedBackSessionId,
		Responses.PeerFeedBackQuestionId,
		Responses.TargetUserId,
		Responses.EvaluatorUserId,
		Responses.LastUpdateTime,
		Responses.IsDeleted,
		Responses.PeerFeedBackOptionId,
		Responses.PeerFeedBackRatingId,
		Responses.PeerFeedBackGroupId,
		CoursesId,
		CoursesCode
INTO #Temp_Responses
FROM (
		-- GENERATED MEET EXPECTATIONS BASED ON EXCEED EXPECTATIONS 
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedbackQuestionRatingMap.QuestionId AS PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				GETDATE() AS LastUpdateTime,
				0 AS IsDeleted,
				PeerFeedbackQuestionRatingMap.RatingOptionId AS PeerFeedBackOptionId,
				PeerFeedbackQuestionRatingMap.RatingQuestionId AS PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				CoursesId,
				CoursesCode
		FROM (SELECT DISTINCT
						PeerFeedBackResponses.TargetUserId,
						PeerFeedBackResponses.PeerFeedBackId,
						PeerFeedBackResponses.EvaluatorUserId,
						PeerFeedBackResponses.PeerFeedBackGroupId,
						PeerFeedBackResponses.PeerFeedBackRatingId,
						PeerFeedBackResponses.PeerFeedBackSessionId,
						PeerFeedBackResponses.PeerFeedBackQuestionId,
						Courses.Id AS CoursesId,
						Courses.Code AS CoursesCode
				FROM PeerFeedBackResponses
				LEFT JOIN PeerFeedbackSessions 
					ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
				LEFT JOIN PeerFeedback 
					ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
				LEFT JOIN CategoryGroups 
					ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
				LEFT JOIN CourseCategories 
					ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
				LEFT JOIN Courses 
					ON CourseCategories.CourseId = Courses.Id --from course id find course code
				WHERE PeerFeedback.IsDeleted = 0 
					AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
					AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
					AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
					--AND Courses.Id = 7318
					--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
					--AND PeerFeedbackSessions.Id = 21
					--AND TargetUserId = 2374
					--AND EvaluatorUserId = 1684
					--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
				--ORDER BY EvaluatorUserId
		) PeerFeedBackResponses
		LEFT JOIN PeerFeedbackQuestionRatingMap
			ON PeerFeedbackQuestionRatingMap.QuestionId = PeerFeedBackResponses.PeerFeedBackQuestionId
			AND PeerFeedbackQuestionRatingMap.RatingQuestionId = 2
		-- 159

		UNION

		-- PeerFeedBackResponses
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedBackResponses.PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				PeerFeedBackResponses.LastUpdateTime,
				PeerFeedBackResponses.IsDeleted AS IsDeleted,
				PeerFeedBackResponses.PeerFeedBackOptionId,
				PeerFeedBackResponses.PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				Courses.Id AS CoursesId,
				Courses.Code AS CoursesCode
 		FROM PeerFeedBackResponses
		LEFT JOIN PeerFeedbackSessions 
			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback 
			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		LEFT JOIN CategoryGroups 
			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		LEFT JOIN CourseCategories 
			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		LEFT JOIN Courses 
			ON CourseCategories.CourseId = Courses.Id --from course id find course code
		WHERE PeerFeedback.IsDeleted = 0 
			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
			AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
			--AND Courses.Id = 7318 
			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
			--AND PeerFeedbackSessions.Id = 21
			--AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
			--AND TargetUserId = 2374
			--AND EvaluatorUserId = 1684
			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--ORDER BY EvaluatorUserId

		-- 203
) Responses
--1259
--select * from #Temp_Responses

DROP TABLE IF EXISTS #Temp_DescriptorResponse
SELECT	--ACAD_GROUP, 
		CoursesCode,
		--PeerFeedbackQuestionTitle, PeerFeedbackRatingQuestionName, PeerFeedbackRatingOptionName, 
		ISNULL([6], 0) AS RC_Meet_Responsive, 
		ISNULL([7], 0) AS RC_Meet_Attended, 
		ISNULL([8], 0) AS RC_Meet_Completed, 
		ISNULL([9], 0) AS RC_Meet_Prepared, 
		ISNULL([10], 0) AS RC_Meet_Contributed, 
		ISNULL([11], 0) AS RC_Exceed_Initiated, 
		ISNULL([12], 0) AS RC_Exceed_Demonstrated, 
		ISNULL([13], 0) AS RC_Exceed_Steered, 
		ISNULL([14], 0) AS RC_Exceed_Regularly,
		ISNULL([1], 0) AS RC_Below_Unresponsive, 
		ISNULL([2], 0) AS RC_Below_Missed, 
		ISNULL([3], 0) AS RC_Below_DidNotComplete,
		ISNULL([4], 0) AS RC_Below_DidNotPrepare,
		ISNULL([5], 0) AS RC_Below_DidNotContribute, 
		ISNULL([20], 0) AS CE_Meet_Showed, 
		ISNULL([21], 0) AS CE_Meet_Demonstrated,
		ISNULL([22], 0) AS CE_Meet_Receptive,
		ISNULL([23], 0) AS CE_Meet_Respectful, 
		ISNULL([24], 0) AS CE_Meet_Shared, 
		ISNULL([25], 0) AS CE_Exceed_Demonstrated,
		ISNULL([26], 0) AS CE_Exceed_Initiative,
		ISNULL([27], 0) AS CE_Exceed_Encouraged, 
		ISNULL([28], 0) AS CE_Exceed_Facilitated,
		ISNULL([15], 0) AS CE_Below_Uncooperative, 
		ISNULL([16], 0) AS CE_Below_NotReceptive, 
		ISNULL([17], 0) AS CE_Below_Lack, 
		ISNULL([18], 0) AS CE_Below_Disrespect,
		ISNULL([19], 0) AS CE_Below_Withheld, 
		ISNULL([33], 0) AS CD_Meet_GoodQuality,
		ISNULL([34], 0) AS CD_Meet_Fair,
		ISNULL([35], 0) AS CD_Meet_Effective, 
		ISNULL([36], 0) AS CD_Meet_Significantly, 
		ISNULL([41], 0) AS CD_Exceed_HighQuality,
		ISNULL([42], 0) AS CD_Exceed_MoreThanFair, 
		ISNULL([43], 0) AS CD_Exceed_Contributed, 
		ISNULL([44], 0) AS CD_Exceed_VerySignificant, 
		ISNULL([29], 0) AS CD_Below_PoorQuality, 
		ISNULL([30], 0) AS CD_Below_LessThanFair, 
		ISNULL([31], 0) AS CD_Below_VeryMinimally, 
		ISNULL([32], 0) AS CD_Below_DidNotPull
INTO #Temp_DescriptorResponse
FROM (
		SELECT CoursesCode,
				PeerFeedBackOptionId,
				COUNT(TargetUserId) AS TargetUserDistinctCount
		FROM (
			SELECT	Courses.Code CoursesCode,
					PeerFeedBackResponses.PeerFeedBackOptionId,
					COUNT(PeerFeedBackResponses.PeerFeedBackResponsesId) DescriptorResponseCount,
					PeerFeedBackResponses.TargetUserId
			FROM #Temp_Responses PeerFeedBackResponses
			LEFT JOIN PeerFeedbackSessions 
				ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback 
				ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
			LEFT JOIN CategoryGroups 
				ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
			LEFT JOIN CourseCategories 
				ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
			LEFT JOIN Courses 
				ON CourseCategories.CourseId = Courses.Id --from course id find course code
			WHERE PeerFeedback.IsDeleted = 0 
				AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
				AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
				--AND Courses.Id = 7318 
				--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
				--AND PeerFeedbackSessions.Id = 21
			GROUP BY Courses.Code,
					PeerFeedBackResponses.PeerFeedBackQuestionId,
					--PeerFeedBackResponses.PeerFeedBackRatingId,
					PeerFeedBackResponses.PeerFeedBackOptionId,
					PeerFeedBackResponses.TargetUserId
		) AS DesriptorCount
		GROUP BY CoursesCode,
				PeerFeedBackOptionId
) basedata
PIVOT
(
	SUM(TargetUserDistinctCount)
	FOR PeerFeedBackOptionId IN (	[6], [7], [8], [9], [10], [11], [12], [13], [14], [1], [2], [3], [4], [5], [20], [21], [22], [23], [24], [25], [26], [27], [28], [15], [16], [17], [18], [19], [33], [34], [35], [36], [41], [42], [43], [44], [29], [30], [31], [32])
) pivotdata


SELECT WhitelistedCourseCodeAcademicGroup.AcadGroup,
		WhitelistedCourseCodeAcademicGroup.CourseCode,
		TotalTargetsPerCourse.Instructor,
		TotalTargetsPerCourse.Total_Targets,
		ISNULL(DescriptorResponse.RC_Meet_Responsive, 0) AS RC_Meet_Responsive, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Responsive / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Responsive_Percentage,
		ISNULL(DescriptorResponse.RC_Meet_Attended, 0) AS RC_Meet_Attended,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Attended / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Attended_Percentage, 
		ISNULL(DescriptorResponse.RC_Meet_Completed, 0) AS RC_Meet_Completed,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Completed / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Completed_Percentage, 
		ISNULL(DescriptorResponse.RC_Meet_Prepared, 0) AS RC_Meet_Prepared, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Prepared / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Prepared_Percentage, 
		ISNULL(DescriptorResponse.RC_Meet_Contributed, 0) AS RC_Meet_Contributed, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Contributed / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Contributed_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Initiated, 0) AS RC_Exceed_Initiated, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Initiated / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Initiated_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Demonstrated, 0) AS RC_Exceed_Demonstrated, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Demonstrated / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Demonstrated_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Steered, 0) AS RC_Exceed_Steered,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Steered / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Steered_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Regularly, 0) AS RC_Exceed_Regularly,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Regularly / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Regularly_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_Unresponsive, 0) AS RC_Below_Unresponsive,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_Unresponsive / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_Unresponsive_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_Missed, 0) AS RC_Below_Missed,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_Missed / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_Missed_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_DidNotComplete, 0) AS RC_Below_DidNotComplete,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotComplete / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotComplete_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_DidNotPrepare, 0) AS RC_Below_DidNotPrepare,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotPrepare / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotPrepare_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_DidNotContribute, 0) AS RC_Below_DidNotContribute,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotContribute / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotContribute_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Showed, 0) AS CE_Meet_Showed,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Showed / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Showed_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Demonstrated, 0) AS CE_Meet_Demonstrated,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Demonstrated / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Demonstrated_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Receptive, 0) AS CE_Meet_Receptive,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Receptive / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Receptive_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Respectful, 0) AS CE_Meet_Respectful,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Respectful / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Respectful_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Shared, 0) AS CE_Meet_Shared,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Shared / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Shared_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Demonstrated, 0) AS CE_Exceed_Demonstrated,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Demonstrated / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Demonstrated_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Initiative, 0) AS CE_Exceed_Initiative,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Initiative / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Initiative_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Encouraged, 0) AS CE_Exceed_Encouraged,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Encouraged / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Encouraged_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Facilitated, 0) AS CE_Exceed_Facilitated,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Facilitated / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Facilitated_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Uncooperative, 0) AS CE_Below_Uncooperative,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Uncooperative / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Uncooperative_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_NotReceptive, 0) AS CE_Below_NotReceptive,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_NotReceptive / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_NotReceptive_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Lack, 0) AS CE_Below_Lack,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Lack / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Lack_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Disrespect, 0) AS CE_Below_Disrespect,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Disrespect / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Disrespect_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Withheld, 0) AS CE_Below_Withheld,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Withheld / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Withheld_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_GoodQuality, 0) AS CD_Meet_GoodQuality,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_GoodQuality / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_GoodQuality_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_Fair, 0) AS CD_Meet_Fair,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Fair / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Fair_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_Effective, 0) AS CD_Meet_Effective,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Effective / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Effective_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_Significantly, 0) AS CD_Meet_Significantly,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Significantly / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Significantly_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_HighQuality, 0) AS CD_Exceed_HighQuality,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_HighQuality / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_HighQuality_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_MoreThanFair, 0) AS CD_Exceed_MoreThanFair,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_MoreThanFair / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_MoreThanFair_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_Contributed, 0) AS CD_Exceed_Contributed,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_Contributed / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_Contributed_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_VerySignificant, 0) AS CD_Exceed_VerySignificant,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_VerySignificant / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_VerySignificant_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_PoorQuality, 0) AS CD_Below_PoorQuality,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_PoorQuality / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_PoorQuality_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_LessThanFair, 0) AS CD_Below_LessThanFair,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_LessThanFair / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_LessThanFair_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_VeryMinimally, 0) AS CD_Below_VeryMinimally,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_VeryMinimally / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_VeryMinimally_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_DidNotPull, 0) AS CD_Below_DidNotPull,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_DidNotPull / TotalTargetsPerCourse.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_DidNotPull_Percentage
FROM #WhitelistedCourseCodeAcademicGroup WhitelistedCourseCodeAcademicGroup
LEFT JOIN #TotalTargetsPerCourse TotalTargetsPerCourse
	ON TotalTargetsPerCourse.CourseCode = WhitelistedCourseCodeAcademicGroup.CourseCode
LEFT JOIN #Temp_DescriptorResponse DescriptorResponse
ON DescriptorResponse.CoursesCode = TotalTargetsPerCourse.CourseCode

DROP TABLE IF EXISTS #WhitelistedCourseCodeAcademicGroup
DROP TABLE IF EXISTS #TotalTargetsPerCourse
DROP TABLE IF EXISTS #Temp_Responses
DROP TABLE IF EXISTS #Temp_DescriptorResponse</value>
  </data>
  <data name="descriptor_response_by_studentschool_intakeyear" xml:space="preserve">
    <value>--DROP TABLE #WhitelistedCourses
--DROP TABLE #Temp_Users
--DROP TABLE #QueryFilters
--DROP TABLE #TotalTargetsPerSchoolCodeAcademicYear
--DROP TABLE #Temp_Responses
--DROP TABLE #Temp_DescriptorResponse

--DROP TABLE IF EXISTS #WhitelistedCourses
--DROP TABLE IF EXISTS #Temp_Users
--DROP TABLE IF EXISTS #QueryFilters
--DROP TABLE IF EXISTS #TotalTargetsPerSchoolCodeAcademicYear
--DROP TABLE IF EXISTS #Temp_Responses
--DROP TABLE IF EXISTS #Temp_DescriptorResponse

IF OBJECT_ID('tempdb.dbo.#WhitelistedCourses', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourses; 
--DROP TABLE IF EXISTS #WhitelistedCourses
CREATE TABLE #WhitelistedCourses
(
	CourseId VARCHAR(24)
)

INSERT INTO #WhitelistedCourses
SELECT Courses.Id
FROM Courses
WHERE Courses.Id IN @SelectedCourses
	--(360280, 360850, 360163, 360572, 360675, 360080, 360097, 360950, 360546, 360752, 360684, 360323, 360569, 361162, 360532, 359908, 361211, 360324, 360673, 360956, 359817, 360123, 360836, 360856, 360158, 360753, 364480, 359803, 360444, 360381, 361022, 360667, 360235, 360959, 360510, 359806, 359875, 360714, 364661, 359892, 360923, 360528, 361017, 359984, 360078, 360860, 360244, 359809, 360058, 359958, 360356, 360688, 358258, 360694, 360459, 361137, 359873, 360666, 360769, 359913, 360311, 359813, 359807, 359976, 360686, 361221, 360623, 361018, 360508, 364442, 364677, 364682)

--SELECT * FROM #WhitelistedCourses

IF OBJECT_ID('tempdb.dbo.#Temp_Users', 'U') IS NOT NULL
	DROP TABLE #Temp_Users; 
--DROP TABLE IF EXISTS #Temp_Users
CREATE TABLE #Temp_Users
(
	Id INT,
	SchoolCode NVARCHAR(50),
	AcademicYear INT
)

INSERT INTO #Temp_Users
SELECT Id,
		REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') SchoolCode,
		--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear
		DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), GETDATE()) + IIF(MONTH(GETDATE()) &lt; 8, 0, 1) + IIF(MONTH(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) &lt; 8, 1, 0) AS AcademicYear
FROM Users
--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
--LEFT JOIN STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW
--	ON Users.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID
INNER JOIN (SELECT EMPLID, MAX(TERM_BEGIN_DT) TERM_BEGIN_DT 
			FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW 
			--FROM LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
			WHERE ACAD_PROG &lt; 200 OR ACAD_PROG IN (515, 508) 
			GROUP BY EMPLID) A 
	ON Users.OrgDefinedId = A.EMPLID
WHERE YEAR(SYSDATETIME()) - YEAR(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) + 1 &lt; 10
ORDER BY SchoolCode

--DROP TABLE IF EXISTS #Temp_Courses
--CREATE TABLE #Temp_Courses
--(
--	CategoryGroupId INT,
--	CourseCategoryId INT,
--	CourseId INT
--)
--INSERT INTO #Temp_Courses
--SELECT CategoryGroups.Id,
--		CourseCategories.Id,
--		Courses.Id
--FROM CategoryGroups
--LEFT JOIN CourseCategories
--	ON CourseCategories.Id = CategoryGroups.CourseCategoryId
--LEFT JOIN Courses
--	ON CourseCategories.CourseId = Courses.Id
--WHERE Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)

IF OBJECT_ID('tempdb.dbo.#QueryFilters', 'U') IS NOT NULL
	DROP TABLE #QueryFilters; 
--DROP TABLE IF EXISTS #QueryFilters
CREATE TABLE #QueryFilters
(
	SchoolCode NVARCHAR(50),
	AcademicYear INT
)

;WITH
Programs AS (
	SELECT DISTINCT SchoolCode
	FROM (
		SELECT	--DISTINCT
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode]
				SchoolCode
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN #Temp_Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		WHERE 
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0

		UNION

		SELECT	--DISTINCT
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode]
				SchoolCode
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		LEFT JOIN #Temp_Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		WHERE
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0

		UNION

		SELECT NULL
	) SchoolCodes
),
AcademicYears AS (
	SELECT Years
	FROM (VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9)) v(Years)
)

INSERT INTO #QueryFilters
SELECT SchoolCode,
		AcademicYears.Years
FROM Programs 
CROSS JOIN AcademicYears
--SELECT * FROM #QueryFilters

DECLARE @Total_Targets DECIMAL(8, 2)

DECLARE @CursorParam_SchoolCode NVARCHAR(50)
DECLARE @CursorParam_AcademicYear INT

IF OBJECT_ID('tempdb.dbo.#TotalTargetsPerSchoolCodeAcademicYear', 'U') IS NOT NULL
	DROP TABLE #TotalTargetsPerSchoolCodeAcademicYear; 
CREATE TABLE #TotalTargetsPerSchoolCodeAcademicYear
(
	SchoolCode NVARCHAR(50),
	AcademicYear INT,
	Total_Targets DECIMAL(8, 2)
)

DECLARE CURSOR_FILTERS CURSOR FOR

	SELECT SchoolCode, AcademicYear FROM #QueryFilters

OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_SchoolCode, @CursorParam_AcademicYear
WHILE @@FETCH_STATUS = 0
BEGIN

	
	SELECT @Total_Targets = COUNT(TargetUserId)
	FROM (
		SELECT	DISTINCT
				Courses.CourseId CourseId,
				--Courses.Code, 
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode],
				--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear,
				TargetUser.Id TargetUserId, 
				--TargetUser.DisplayName TargetUserDisplayName, 

				--CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
				--CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
				--CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",

				CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
					THEN 0
					ELSE 1
				END HasEvaluation,
			
				--, EvaluatorUser.DisplayName EvaluatorUser
				--, PeerFeedBackPairingSessions.PeerFeedBackSessionId
				SchoolCode,
				AcademicYear

		FROM PeerFeedBackPairingSessions

		--LEFT JOIN PeerFeedbackEvaluators
		--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId

		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON 
			--Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question1.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
			--AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON 
			--Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question2.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
			--AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON 
			--Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question3.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
			--AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id

		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		--	ON CourseCategories.CourseId = Courses.Id
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		--LEFT JOIN Users TargetUser
		--	ON PeerFeedbackTargets.UserId = TargetUser.Id
		LEFT JOIN #Temp_Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id

		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID

		--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
		--	ON TargetUser.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID

		WHERE 
			--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)
--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
			AND AcademicYear = @CursorParam_AcademicYear
	) Targets
	WHERE Targets.HasEvaluation = 1		
	--GROUP BY Code
	--SELECT @Total_Targets AS Total_Targets

	INSERT INTO #TotalTargetsPerSchoolCodeAcademicYear
	SELECT @CursorParam_SchoolCode As SchoolCode 
		, @CursorParam_AcademicYear AS AcademicYear
		, @Total_Targets AS Total_Targets

	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_SchoolCode, @CursorParam_AcademicYear
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS

--SELECT * FROM #TotalTargetsPerSchoolCodeAcademicYear

IF OBJECT_ID('tempdb.dbo.#Temp_Responses', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses; 
SELECT ROW_NUMBER() OVER (ORDER BY Responses.PeerFeedBackId) AS PeerFeedBackResponsesId,
		Responses.PeerFeedBackId,
		Responses.PeerFeedBackSessionId,
		Responses.PeerFeedBackQuestionId,
		Responses.TargetUserId,
		Responses.EvaluatorUserId,
		Responses.LastUpdateTime,
		Responses.IsDeleted,
		Responses.PeerFeedBackOptionId,
		Responses.PeerFeedBackRatingId,
		Responses.PeerFeedBackGroupId,
		CoursesId--,
		--CoursesCode
INTO #Temp_Responses
FROM (
		-- GENERATED MEET EXPECTATIONS BASED ON EXCEED EXPECTATIONS 
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedbackQuestionRatingMap.QuestionId AS PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				GETDATE() AS LastUpdateTime,
				0 AS IsDeleted,
				PeerFeedbackQuestionRatingMap.RatingOptionId AS PeerFeedBackOptionId,
				PeerFeedbackQuestionRatingMap.RatingQuestionId AS PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				CoursesId--,
				--CoursesCode
		FROM (SELECT DISTINCT
						PeerFeedBackResponses.TargetUserId,
						PeerFeedBackResponses.PeerFeedBackId,
						PeerFeedBackResponses.EvaluatorUserId,
						PeerFeedBackResponses.PeerFeedBackGroupId,
						PeerFeedBackResponses.PeerFeedBackRatingId,
						PeerFeedBackResponses.PeerFeedBackSessionId,
						PeerFeedBackResponses.PeerFeedBackQuestionId,
						Courses.CourseId AS CoursesId--,
						--Courses.Code AS CoursesCode
				FROM PeerFeedBackResponses
				LEFT JOIN PeerFeedbackSessions 
					ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
				LEFT JOIN PeerFeedback 
					ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
				LEFT JOIN CategoryGroups 
					ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
				LEFT JOIN CourseCategories 
					ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
				--LEFT JOIN Courses 
				--	ON CourseCategories.CourseId = Courses.Id --from course id find course code
				INNER JOIN #WhitelistedCourses Courses
					ON CourseCategories.CourseId = Courses.CourseId
				WHERE PeerFeedback.IsDeleted = 0 
					AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
					AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
					--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
					--AND Courses.Id = 7318
					--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
					--AND PeerFeedbackSessions.Id = 21
					--AND TargetUserId = 2374
					--AND EvaluatorUserId = 1684
					--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
				--ORDER BY EvaluatorUserId
		) PeerFeedBackResponses
		LEFT JOIN PeerFeedbackQuestionRatingMap
			ON PeerFeedbackQuestionRatingMap.QuestionId = PeerFeedBackResponses.PeerFeedBackQuestionId
			AND PeerFeedbackQuestionRatingMap.RatingQuestionId = 2
		-- 159

		UNION

		-- PeerFeedBackResponses
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedBackResponses.PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				PeerFeedBackResponses.LastUpdateTime,
				PeerFeedBackResponses.IsDeleted AS IsDeleted,
				PeerFeedBackResponses.PeerFeedBackOptionId,
				PeerFeedBackResponses.PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				Courses.CourseId AS CoursesId--,
				--Courses.Code AS CoursesCode
 		FROM PeerFeedBackResponses
		LEFT JOIN PeerFeedbackSessions 
			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback 
			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		LEFT JOIN CategoryGroups 
			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		LEFT JOIN CourseCategories 
			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		--LEFT JOIN Courses 
		--	ON CourseCategories.CourseId = Courses.Id --from course id find course code
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		WHERE PeerFeedback.IsDeleted = 0 
			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
			--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
			--AND Courses.Id = 7318 
			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
			--AND PeerFeedbackSessions.Id = 21
			--AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
			--AND TargetUserId = 2374
			--AND EvaluatorUserId = 1684
			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--ORDER BY EvaluatorUserId

		-- 203
) Responses
--1259
--select * from #Temp_Responses

IF OBJECT_ID('tempdb.dbo.#Temp_DescriptorResponse', 'U') IS NOT NULL
	DROP TABLE #Temp_DescriptorResponse; 
SELECT	--ACAD_GROUP, 
		SchoolCode,
		AcademicYear,
		--CourseId, --CoursesCode,
		--PeerFeedbackQuestionTitle, PeerFeedbackRatingQuestionName, PeerFeedbackRatingOptionName, 
		ISNULL([6], 0) AS RC_Meet_Responsive, 
		ISNULL([7], 0) AS RC_Meet_Attended, 
		ISNULL([8], 0) AS RC_Meet_Completed, 
		ISNULL([9], 0) AS RC_Meet_Prepared, 
		ISNULL([10], 0) AS RC_Meet_Contributed, 
		ISNULL([11], 0) AS RC_Exceed_Initiated, 
		ISNULL([12], 0) AS RC_Exceed_Demonstrated, 
		ISNULL([13], 0) AS RC_Exceed_Steered, 
		ISNULL([14], 0) AS RC_Exceed_Regularly,
		ISNULL([1], 0) AS RC_Below_Unresponsive, 
		ISNULL([2], 0) AS RC_Below_Missed, 
		ISNULL([3], 0) AS RC_Below_DidNotComplete,
		ISNULL([4], 0) AS RC_Below_DidNotPrepare,
		ISNULL([5], 0) AS RC_Below_DidNotContribute, 
		ISNULL([20], 0) AS CE_Meet_Showed, 
		ISNULL([21], 0) AS CE_Meet_Demonstrated,
		ISNULL([22], 0) AS CE_Meet_Receptive,
		ISNULL([23], 0) AS CE_Meet_Respectful, 
		ISNULL([24], 0) AS CE_Meet_Shared, 
		ISNULL([25], 0) AS CE_Exceed_Demonstrated,
		ISNULL([26], 0) AS CE_Exceed_Initiative,
		ISNULL([27], 0) AS CE_Exceed_Encouraged, 
		ISNULL([28], 0) AS CE_Exceed_Facilitated,
		ISNULL([15], 0) AS CE_Below_Uncooperative, 
		ISNULL([16], 0) AS CE_Below_NotReceptive, 
		ISNULL([17], 0) AS CE_Below_Lack, 
		ISNULL([18], 0) AS CE_Below_Disrespect,
		ISNULL([19], 0) AS CE_Below_Withheld, 
		ISNULL([33], 0) AS CD_Meet_GoodQuality,
		ISNULL([34], 0) AS CD_Meet_Fair,
		ISNULL([35], 0) AS CD_Meet_Effective, 
		ISNULL([36], 0) AS CD_Meet_Significantly, 
		ISNULL([41], 0) AS CD_Exceed_HighQuality,
		ISNULL([42], 0) AS CD_Exceed_MoreThanFair, 
		ISNULL([43], 0) AS CD_Exceed_Contributed, 
		ISNULL([44], 0) AS CD_Exceed_VerySignificant, 
		ISNULL([29], 0) AS CD_Below_PoorQuality, 
		ISNULL([30], 0) AS CD_Below_LessThanFair, 
		ISNULL([31], 0) AS CD_Below_VeryMinimally, 
		ISNULL([32], 0) AS CD_Below_DidNotPull
INTO #Temp_DescriptorResponse
FROM (
		SELECT SchoolCode,
				AcademicYear,
				--CourseId, --CoursesCode,
				PeerFeedBackOptionId,
				COUNT(TargetUserId) AS TargetUserDistinctCount
		FROM (
			SELECT	Courses.CourseId, --Courses.Code CoursesCode,
					PeerFeedBackResponses.PeerFeedBackOptionId,
					COUNT(PeerFeedBackResponses.PeerFeedBackResponsesId) DescriptorResponseCount,
					PeerFeedBackResponses.TargetUserId
			FROM #Temp_Responses PeerFeedBackResponses
			LEFT JOIN PeerFeedbackSessions 
				ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback 
				ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
			LEFT JOIN CategoryGroups 
				ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
			LEFT JOIN CourseCategories 
				ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
			--LEFT JOIN Courses 
			--	ON CourseCategories.CourseId = Courses.Id --from course id find course code
			INNER JOIN #WhitelistedCourses Courses
				ON CourseCategories.CourseId = Courses.CourseId
			WHERE PeerFeedback.IsDeleted = 0 
				AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
				--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)
				--AND Courses.Id = 7318 
				--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
				--AND PeerFeedbackSessions.Id = 21
			GROUP BY Courses.CourseId,
					--Courses.Code,
					PeerFeedBackResponses.PeerFeedBackQuestionId,
					--PeerFeedBackResponses.PeerFeedBackRatingId,
					PeerFeedBackResponses.PeerFeedBackOptionId,
					PeerFeedBackResponses.TargetUserId
		) AS DesriptorCount		
		LEFT JOIN #Temp_Users TargetUser
			ON DesriptorCount.TargetUserId = TargetUser.Id
		GROUP BY SchoolCode, 
				AcademicYear, 
				--CourseId, --CoursesCode,
				PeerFeedBackOptionId
) basedata
PIVOT
(
	SUM(TargetUserDistinctCount)
	FOR PeerFeedBackOptionId IN (	[6], [7], [8], [9], [10], [11], [12], [13], [14], [1], [2], [3], [4], [5], [20], [21], [22], [23], [24], [25], [26], [27], [28], [15], [16], [17], [18], [19], [33], [34], [35], [36], [41], [42], [43], [44], [29], [30], [31], [32])
) pivotdata

SELECT QueryFilters.SchoolCode,
		QueryFilters.AcademicYear,
		TotalTargetsPerSchoolCodeAcademicYear.Total_Targets,
		ISNULL(DescriptorResponse.RC_Meet_Responsive, 0) AS RC_Meet_Responsive, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Responsive / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Responsive_Percentage,
		ISNULL(DescriptorResponse.RC_Meet_Attended, 0) AS RC_Meet_Attended,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Attended / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Attended_Percentage, 
		ISNULL(DescriptorResponse.RC_Meet_Completed, 0) AS RC_Meet_Completed,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Completed / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Completed_Percentage, 
		ISNULL(DescriptorResponse.RC_Meet_Prepared, 0) AS RC_Meet_Prepared, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Prepared / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Prepared_Percentage, 
		ISNULL(DescriptorResponse.RC_Meet_Contributed, 0) AS RC_Meet_Contributed, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Contributed / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Contributed_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Initiated, 0) AS RC_Exceed_Initiated, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Initiated / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Initiated_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Demonstrated, 0) AS RC_Exceed_Demonstrated, 
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Demonstrated / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Demonstrated_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Steered, 0) AS RC_Exceed_Steered,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Steered / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Steered_Percentage, 
		ISNULL(DescriptorResponse.RC_Exceed_Regularly, 0) AS RC_Exceed_Regularly,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Regularly / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Regularly_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_Unresponsive, 0) AS RC_Below_Unresponsive,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_Unresponsive / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_Unresponsive_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_Missed, 0) AS RC_Below_Missed,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_Missed / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_Missed_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_DidNotComplete, 0) AS RC_Below_DidNotComplete,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotComplete / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotComplete_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_DidNotPrepare, 0) AS RC_Below_DidNotPrepare,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotPrepare / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotPrepare_Percentage, 
		ISNULL(DescriptorResponse.RC_Below_DidNotContribute, 0) AS RC_Below_DidNotContribute,
		CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotContribute / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotContribute_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Showed, 0) AS CE_Meet_Showed,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Showed / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Showed_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Demonstrated, 0) AS CE_Meet_Demonstrated,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Demonstrated / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Demonstrated_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Receptive, 0) AS CE_Meet_Receptive,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Receptive / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Receptive_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Respectful, 0) AS CE_Meet_Respectful,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Respectful / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Respectful_Percentage, 
		ISNULL(DescriptorResponse.CE_Meet_Shared, 0) AS CE_Meet_Shared,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Shared / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Shared_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Demonstrated, 0) AS CE_Exceed_Demonstrated,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Demonstrated / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Demonstrated_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Initiative, 0) AS CE_Exceed_Initiative,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Initiative / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Initiative_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Encouraged, 0) AS CE_Exceed_Encouraged,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Encouraged / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Encouraged_Percentage, 
		ISNULL(DescriptorResponse.CE_Exceed_Facilitated, 0) AS CE_Exceed_Facilitated,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Facilitated / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Facilitated_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Uncooperative, 0) AS CE_Below_Uncooperative,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Uncooperative / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Uncooperative_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_NotReceptive, 0) AS CE_Below_NotReceptive,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_NotReceptive / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_NotReceptive_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Lack, 0) AS CE_Below_Lack,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Lack / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Lack_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Disrespect, 0) AS CE_Below_Disrespect,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Disrespect / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Disrespect_Percentage, 
		ISNULL(DescriptorResponse.CE_Below_Withheld, 0) AS CE_Below_Withheld,
		CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Withheld / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Withheld_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_GoodQuality, 0) AS CD_Meet_GoodQuality,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_GoodQuality / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_GoodQuality_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_Fair, 0) AS CD_Meet_Fair,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Fair / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Fair_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_Effective, 0) AS CD_Meet_Effective,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Effective / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Effective_Percentage, 
		ISNULL(DescriptorResponse.CD_Meet_Significantly, 0) AS CD_Meet_Significantly,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Significantly / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Significantly_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_HighQuality, 0) AS CD_Exceed_HighQuality,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_HighQuality / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_HighQuality_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_MoreThanFair, 0) AS CD_Exceed_MoreThanFair,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_MoreThanFair / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_MoreThanFair_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_Contributed, 0) AS CD_Exceed_Contributed,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_Contributed / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_Contributed_Percentage, 
		ISNULL(DescriptorResponse.CD_Exceed_VerySignificant, 0) AS CD_Exceed_VerySignificant,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_VerySignificant / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_VerySignificant_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_PoorQuality, 0) AS CD_Below_PoorQuality,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_PoorQuality / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_PoorQuality_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_LessThanFair, 0) AS CD_Below_LessThanFair,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_LessThanFair / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_LessThanFair_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_VeryMinimally, 0) AS CD_Below_VeryMinimally,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_VeryMinimally / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_VeryMinimally_Percentage, 
		ISNULL(DescriptorResponse.CD_Below_DidNotPull, 0) AS CD_Below_DidNotPull,
		CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_DidNotPull / TotalTargetsPerSchoolCodeAcademicYear.Total_Targets) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_DidNotPull_Percentage
FROM #QueryFilters QueryFilters
LEFT JOIN #TotalTargetsPerSchoolCodeAcademicYear TotalTargetsPerSchoolCodeAcademicYear
	ON TotalTargetsPerSchoolCodeAcademicYear.SchoolCode = QueryFilters.SchoolCode
	AND TotalTargetsPerSchoolCodeAcademicYear.AcademicYear = QueryFilters.AcademicYear
LEFT JOIN #Temp_DescriptorResponse DescriptorResponse
	ON DescriptorResponse.SchoolCode = QueryFilters.SchoolCode
	AND DescriptorResponse.AcademicYear = QueryFilters.AcademicYear
WHERE TotalTargetsPerSchoolCodeAcademicYear.Total_Targets &gt; 0

--DROP TABLE #WhitelistedCourses
--DROP TABLE #Temp_Users
--DROP TABLE #QueryFilters
--DROP TABLE #TotalTargetsPerSchoolCodeAcademicYear
--DROP TABLE #Temp_Responses
--DROP TABLE #Temp_DescriptorResponse

IF OBJECT_ID('tempdb.dbo.#WhitelistedCourses', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourses; 
IF OBJECT_ID('tempdb.dbo.#Temp_Users', 'U') IS NOT NULL
	DROP TABLE #Temp_Users; 
IF OBJECT_ID('tempdb.dbo.#QueryFilters', 'U') IS NOT NULL
	DROP TABLE #QueryFilters; 
IF OBJECT_ID('tempdb.dbo.#TotalTargetsPerSchoolCodeAcademicYear', 'U') IS NOT NULL
	DROP TABLE #TotalTargetsPerSchoolCodeAcademicYear; 
IF OBJECT_ID('tempdb.dbo.#Temp_Responses', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses; 
IF OBJECT_ID('tempdb.dbo.#Temp_DescriptorResponse', 'U') IS NOT NULL
	DROP TABLE #Temp_DescriptorResponse;</value>
  </data>
  <data name="group_readiness" xml:space="preserve">
    <value>IF OBJECT_ID('tempdb.dbo.#Temp_GroupReadiness_Base', 'U') IS NOT NULL
	DROP TABLE #Temp_GroupReadiness_Base
SELECT	Org_Units.OrgUnitId OrgUnitId,
		Org_Units.Code CourseCode, 
		Org_Units.Name CourseName, 
		
		STUFF((SELECT '] [' + Users.FirstName + ' - ' + Users.ExternalEmail
				FROM User_Enrollments
				INNER JOIN Users
					ON Users.UserId = User_Enrollments.UserId
				WHERE User_Enrollments.OrgUnitId = Org_Units.OrgUnitId
					AND User_Enrollments.RoleId = 106
				ORDER BY Users.FirstName
			FOR XML PATH('')), 1, 1, '') + ']' AS Instructor,

		Student.UserId AS StudentUserId,
		Student.FirstName StudentFirstName, 
		Student.ExternalEmail StudentEmail, 
		User_Enrollments.RoleName UserRole, 
		Group_Enrollment.Name GroupName
INTO #Temp_GroupReadiness_Base
FROM Org_Units
LEFT JOIN User_Enrollments 
	ON User_Enrollments.OrgUnitId = Org_Units.OrgUnitId
LEFT JOIN Users Student 
	ON Student.UserId = User_Enrollments.UserId
--LEFT JOIN User_Enrollments Instructor_Enrollment 
--	ON Instructor_Enrollment.OrgUnitId = Org_Units.OrgUnitId
--LEFT JOIN Users Instructor 
--	ON Instructor.UserId = Instructor_Enrollment.UserId
LEFT JOIN (SELECT Org_Unit_Parents.ParentOrgUnitId, 
					Org_Unit_Parents.OrgUnitId, 
					Org_Units.Name, 
					User_Enrollments.UserId
			FROM Org_Units, Org_Unit_Parents, User_Enrollments
			WHERE Type = 'Group' 
				AND Org_Units.OrgUnitId = Org_Unit_Parents.OrgUnitId 
				AND User_Enrollments.OrgUnitId = Org_Unit_Parents.OrgUnitId
				AND User_Enrollments.RoleId = 104) Group_Enrollment 
	ON Group_Enrollment.ParentOrgUnitId = Org_Units.OrgUnitId 
	AND Group_Enrollment.UserId = Student.UserId
WHERE Org_Units.Code in @SelectedCourseCodes
--('2023-241COR2210G1','2023-241COR2226G1','2023-241COR2202G1','2023-241COR2202G2','2023-241COR2626G1','2023-241COR2626G2','2023-241COR2626G3','2023-241COR2203G1','2023-241COR2203G2','2023-241COR2209G48','2023-241COR2209G49','2023-241COR-THAI2403G1','2023-241COR-THAI2403G2','2023-241COR-MAND2404G1','2023-241OPIM101G5','2023-241OBHR101G12','2023-241OBHR101G13','2023-241OBHR101G1','2023-241OBHR101G2','2023-241OBHR101G14','2023-241OBHR101G4','2023-241OBHR101G5','2023-241OBHR101G7','2023-241OBHR101G8','2023-241OBHR101G9','2023-241OBHR101G10','2023-241OPIM101G6','2023-241OPIM101G7','2023-241OPIM101G12','2023-241OBHR101G11','2023-241COR1301G6','2023-241MGMT102G8','2023-241MGMT102G9','2023-241MGMT102G10','2023-241CS104G1','2023-241CS104G2','2023-241CS104G3','2023-241CS104G4','2023-241ACCT414G1','2023-241ACCT665G2','2023-241ACCT418G1','2023-241ACCT418G2','2023-241ACCT418G70','2023-241ACCT431G1','2023-241COR2100G20','2023-241COR2100G21','2023-241COR2100G25','2023-241COR2100G13','2023-241ECON118G2','2023-241ECON212G1','2023-241ECON212G2','2023-241ECON155G1','2023-241ECON107G4','2023-241SOCG001G1','2023-241SOCG001G2','2023-241ACM215G1','2023-241LGST101G3','2023-241LGST102G50','2023-241LGST101G15','2023-241LGST101G4','2023-241LGST101G5','2023-241LGST101G8','2023-241LAW4039G61','2023-241LAW4039G1','2023-241COR1100G1','2023-241COR1100G2','2023-241COR1100G3','2023-241COR1100G4','2023-241COR1100G5','2023-241COR1100G6','2023-241COR1100G7','2023-241COR1100G8','2023-241COR1100G9','2023-241COR1100G10','2023-241COR1100G11','2023-241COR1100G12','2023-241COR1100G19','2023-241COR1100G20','2023-24 August TermWRIT600G3','2023-24 August TermWRIT600G1','2023-24 August TermWRIT600G2')
AND Org_Units.StartDate IS NOT NULL AND Org_Units.EndDate IS NOT NULL AND Org_Units.Type = 'Course Offering'
	AND User_Enrollments.RoleId = 104
	--AND Instructor_Enrollment.RoleId = 106
	--AND (Group_Enrollment.Name = '' OR Group_Enrollment.Name IS NULL)
ORDER BY --InstructorFirstName, 
CourseCode, StudentFirstName



SELECT TL_CourseInfo.ACAD_GROUP AS AcadGroup,
		OrgUnitId,
		CourseCode, 
		CourseName,
		Instructor,
		--COUNT(StudentUserId) AS StudentCount,
		(SELECT COUNT(*)
		FROM User_Enrollments
		WHERE RoleId = 104
			AND OrgUnitId = GroupReadiness_Base.OrgUnitId) AS StudentCount,

		ISNULL(STUFF(
			(SELECT DISTINCT ', ' + GroupName
			FROM #Temp_GroupReadiness_Base
			WHERE OrgUnitId = GroupReadiness_Base.OrgUnitId
				AND CourseCode = GroupReadiness_Base.CourseCode
			FOR XML PATH ('')), 1, 1, ''), '') AS GroupNames,

		(SELECT COUNT(DISTINCT GroupName)
		FROM #Temp_GroupReadiness_Base
		WHERE OrgUnitId = GroupReadiness_Base.OrgUnitId
			AND CourseCode = GroupReadiness_Base.CourseCode) AS GroupCount,

		(SELECT COUNT(*)
		FROM #Temp_GroupReadiness_Base
		WHERE OrgUnitId = GroupReadiness_Base.OrgUnitId
			AND CourseCode = GroupReadiness_Base.CourseCode
			AND (GroupName IS NULL OR GroupName = '')) AS UnassignedStudentCount,			
		

		CASE WHEN (SELECT COUNT(*)
					FROM LMSTools.dbo.CourseCategories
					LEFT JOIN LMSTools.dbo.Courses
						ON CourseCategories.CourseId = Courses.Id
					WHERE Courses.Code = GroupReadiness_Base.CourseCode
						AND Courses.Id = GroupReadiness_Base.OrgUnitId) &gt; 1 THEN
						('Y - ' + STUFF(
									(SELECT ', ' + CourseCategories.[Name]
									FROM LMSTools.dbo.CourseCategories
									LEFT JOIN LMSTools.dbo.Courses
										ON CourseCategories.CourseId = Courses.Id
									WHERE Courses.Code = GroupReadiness_Base.CourseCode
										AND Courses.Id = GroupReadiness_Base.OrgUnitId	
									FOR XML PATH ('')), 1, 1, ''))
			ELSE ISNULL((SELECT 'N - ' + ISNULL(CourseCategories.[Name], '')
							FROM LMSTools.dbo.CourseCategories
							LEFT JOIN LMSTools.dbo.Courses
								ON CourseCategories.CourseId = Courses.Id
							WHERE Courses.Code = GroupReadiness_Base.CourseCode
								AND Courses.Id = GroupReadiness_Base.OrgUnitId), '')
			END AS MultipleCategoryGroups,	
		
		ISNULL('Y - ' + STUFF(
			(SELECT '][' + GroupReadiness_Sub.StudentFirstName + ': ' + 
					STUFF(
							(SELECT DISTINCT ', ' + GroupName
							FROM #Temp_GroupReadiness_Base
							WHERE OrgUnitId = GroupReadiness_Sub.OrgUnitId
								AND CourseCode = GroupReadiness_Sub.CourseCode
								AND StudentUserId = GroupReadiness_Sub.StudentUserId
						FOR XML PATH ('')), 1, 1, '') 
			FROM #Temp_GroupReadiness_Base GroupReadiness_Sub
			INNER JOIN (
						SELECT DISTINCT OrgUnitId, CourseCode
						FROM #Temp_GroupReadiness_Base
						GROUP BY OrgUnitId, coursecode, studentuserid
						HAVING COUNT(*) &gt; 1 ) DuplicateGroups
				ON GroupReadiness_Sub.OrgUnitId = DuplicateGroups.OrgUnitId
				AND GroupReadiness_Sub.CourseCode = DuplicateGroups.CourseCode

			WHERE GroupReadiness_Sub.OrgUnitId = GroupReadiness_Base.OrgUnitId
				AND GroupReadiness_Sub.CourseCode = GroupReadiness_Base.CourseCode
			GROUP BY GroupReadiness_Sub.OrgUnitId, GroupReadiness_Sub.CourseCode, GroupReadiness_Sub.studentuserid, GroupReadiness_Sub.StudentFirstName
			FOR XML PATH ('')), 1, 1, '') + ']', 'N') AS Duplicates,
		
		ISNULL(
			STUFF(
				(SELECT	DISTINCT
						'][' + PeerFeedback.[Name] + ': ' + PeerFeedbackSessions.[Label]
				FROM LMSTools.dbo.PeerFeedBackPairingSessions
				LEFT JOIN LMSTools.dbo.PeerFeedbackEvaluators
					ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
				LEFT JOIN LMSTools.dbo.CategoryGroups
					ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
				LEFT JOIN LMSTools.dbo.CourseCategories
					ON CourseCategories.Id = CategoryGroups.CourseCategoryId
				LEFT JOIN LMSTools.dbo.Courses
					ON CourseCategories.CourseId = Courses.Id
				LEFT JOIN LMSTools.dbo.PeerFeedbackSessions
					ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
				LEFT JOIN LMSTools.dbo.PeerFeedback
					ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
				LEFT JOIN LMSTools.dbo.PeerFeedbackPairings
					ON PeerFeedbackPairings.PeerFeedbackId = PeerFeedback.Id
				WHERE PeerFeedbackSessions.IsDeleted = 0
					AND PeerFeedback.IsDeleted = 0
					AND Courses.Code = GroupReadiness_Base.CourseCode
					AND Courses.Id = GroupReadiness_Base.OrgUnitId				
				FOR XML PATH ('')), 1, 1, '') + ']', 'Available') AS CreatedInPSFS
		
FROM #Temp_GroupReadiness_Base GroupReadiness_Base
LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
	ON TL_CourseOfferings.CourseOfferingCode = GroupReadiness_Base.CourseCode
LEFT JOIN LMSISIS.dbo.TL_CourseInfo 
	ON TL_CourseInfo.STRM = TL_CourseOfferings.STRM 
	AND TL_CourseInfo.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
--WHERE CourseCode = '2023-241COR1100G2'
GROUP BY TL_CourseInfo.ACAD_GROUP,
		OrgUnitId,
		CourseCode, 
		CourseName,
		Instructor
ORDER BY TL_CourseInfo.ACAD_GROUP,
		CourseCode, 
		CourseName,
		Instructor



IF OBJECT_ID('tempdb.dbo.#Temp_GroupReadiness_Base', 'U') IS NOT NULL
	DROP TABLE #Temp_GroupReadiness_Base</value>
  </data>
  <data name="mean_score_by_coursecode" xml:space="preserve">
    <value>--DROP TABLE IF EXISTS #WhitelistedCourseCodeAcademicGroup
IF OBJECT_ID('tempdb.dbo.#WhitelistedCourseCodeAcademicGroup', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourseCodeAcademicGroup; 
SELECT Courses.Id AS CourseId,
		Courses.Code AS CourseCode,
		PS_SIS_LMS_CLASS_V.ACAD_GROUP AS AcadGroup,
		STUFF((SELECT '; ' + Users.DisplayName
		FROM UserEnrollments
		INNER JOIN Users
			ON Users.Id = UserEnrollments.UserId
		WHERE UserEnrollments.CourseId = Courses.Id
			AND UserEnrollments.RoleId = 106
		ORDER BY Users.DisplayName
		FOR XML PATH('')), 1, 1, '') AS Instructor
INTO #WhitelistedCourseCodeAcademicGroup
FROM Courses
LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_CLASS_V 
	ON PS_SIS_LMS_CLASS_V.STRM = TL_CourseOfferings.STRM 
	AND PS_SIS_LMS_CLASS_V.CLASS_NBR = TL_CourseOfferings.CLASS_NBR
WHERE Courses.Id IN @SelectedCourses
	--(360280, 360850, 360163, 360572, 360675, 360080, 360097, 360950, 360546, 360752, 360684, 360323, 360569, 361162, 360532, 359908, 361211, 360324, 360673, 360956, 359817, 360123, 360836, 360856, 360158, 360753, 364480, 359803, 360444, 360381, 361022, 360667, 360235, 360959, 360510, 359806, 359875, 360714, 364661, 359892, 360923, 360528, 361017, 359984, 360078, 360860, 360244, 359809, 360058, 359958, 360356, 360688, 358258, 360694, 360459, 361137, 359873, 360666, 360769, 359913, 360311, 359813, 359807, 359976, 360686, 361221, 360623, 361018, 360508)
-- orgunitids of 2023-24 Term 2 IS213 
--(375508, 375511, 376136, 376239, 376326, 376328, 376330, 376515, 376516, 376657,
-- orgunitids of 2023-24 Term 2 COR1307sss
--376194, 376190,
-- orgunitids of 2023-24 Term 2 IS214 
--376415, 375343, 375594, 376414, 375513, 376589, 375431, 375337, 376137, 375754,
-- orgunitids of 2023-24 Term 2 CS460 --&gt;
--375581)
--SELECT * FROM #WhitelistedCourseCodeAcademicGroup

IF OBJECT_ID('tempdb.dbo.#Temp_Responses', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses; 
SELECT ROW_NUMBER() OVER (ORDER BY Responses.PeerFeedBackId) AS PeerFeedBackResponsesId,
		Responses.PeerFeedBackId,
		Responses.PeerFeedBackSessionId,
		Responses.PeerFeedBackQuestionId,
		Responses.TargetUserId,
		Responses.EvaluatorUserId,
		Responses.LastUpdateTime,
		Responses.IsDeleted,
		Responses.PeerFeedBackOptionId,
		Responses.PeerFeedBackRatingId,
		Responses.PeerFeedBackGroupId,
		CoursesId,
		CoursesCode
INTO #Temp_Responses
FROM (
		---- GENERATED MEET EXPECTATIONS BASED ON EXCEED EXPECTATIONS 
		--SELECT --PeerFeedBackResponses.Id,
		--		PeerFeedBackResponses.PeerFeedBackId,
		--		PeerFeedBackResponses.PeerFeedBackSessionId,
		--		PeerFeedbackQuestionRatingMap.QuestionId AS PeerFeedBackQuestionId,
		--		PeerFeedBackResponses.TargetUserId,
		--		PeerFeedBackResponses.EvaluatorUserId,
		--		GETDATE() AS LastUpdateTime,
		--		0 AS IsDeleted,
		--		PeerFeedbackQuestionRatingMap.RatingOptionId AS PeerFeedBackOptionId,
		--		PeerFeedbackQuestionRatingMap.RatingQuestionId AS PeerFeedBackRatingId,
		--		PeerFeedBackResponses.PeerFeedBackGroupId,
		--		CoursesId,
		--		CoursesCode
		--FROM (SELECT DISTINCT
		--				PeerFeedBackResponses.TargetUserId,
		--				PeerFeedBackResponses.PeerFeedBackId,
		--				PeerFeedBackResponses.EvaluatorUserId,
		--				PeerFeedBackResponses.PeerFeedBackGroupId,
		--				PeerFeedBackResponses.PeerFeedBackRatingId,
		--				PeerFeedBackResponses.PeerFeedBackSessionId,
		--				PeerFeedBackResponses.PeerFeedBackQuestionId,
		--				Courses.Id AS CoursesId,
		--				Courses.Code AS CoursesCode
		--		FROM PeerFeedBackResponses
		--		LEFT JOIN PeerFeedbackSessions 
		--			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		--		LEFT JOIN PeerFeedback 
		--			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		--		LEFT JOIN CategoryGroups 
		--			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		--		LEFT JOIN CourseCategories 
		--			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		--		LEFT JOIN Courses 
		--			ON CourseCategories.CourseId = Courses.Id --from course id find course code
		--		WHERE PeerFeedback.IsDeleted = 0 
		--			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
		--			AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
		--			AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
		--			--AND Courses.Id = 7318
		--			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
		--			--AND PeerFeedbackSessions.Id = 21
		--			--AND TargetUserId = 2374
		--			--AND EvaluatorUserId = 1684
		--			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--		--ORDER BY EvaluatorUserId
		--) PeerFeedBackResponses
		--LEFT JOIN PeerFeedbackQuestionRatingMap
		--	ON PeerFeedbackQuestionRatingMap.QuestionId = PeerFeedBackResponses.PeerFeedBackQuestionId
		--	AND PeerFeedbackQuestionRatingMap.RatingQuestionId = 2
		---- 159

		--UNION

		-- PeerFeedBackResponses
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedBackResponses.PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				PeerFeedBackResponses.LastUpdateTime,
				PeerFeedBackResponses.IsDeleted AS IsDeleted,
				PeerFeedBackResponses.PeerFeedBackOptionId,
				PeerFeedBackResponses.PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				Courses.Id AS CoursesId,
				Courses.Code AS CoursesCode
 		FROM PeerFeedBackResponses
		LEFT JOIN PeerFeedbackSessions 
			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback 
			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		LEFT JOIN CategoryGroups 
			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		LEFT JOIN CourseCategories 
			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		LEFT JOIN Courses 
			ON CourseCategories.CourseId = Courses.Id --from course id find course code
		WHERE PeerFeedback.IsDeleted = 0 
			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
			AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
			--AND Courses.Id = 7318 
			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
			--AND PeerFeedbackSessions.Id = 21
			--AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
			--AND TargetUserId = 2374
			--AND EvaluatorUserId = 1684
			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--ORDER BY EvaluatorUserId

		-- 203
) Responses
--1259
--select * from #Temp_Responses

--SELECT DISTINCT TargetUserId
--FROM #Temp_Responses
--WHERE EvaluatorUserId != TargetUserId


IF OBJECT_ID('tempdb.dbo.#Temp_Question1', 'U') IS NOT NULL
	DROP TABLE #Temp_Question1; 
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		CoursesId,
		CoursesCode
INTO #Temp_Question1
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 1
	--AND EvaluatorUserId != TargetUserId
--SELECT COUNT(*) FROM #Temp_Question1

IF OBJECT_ID('tempdb.dbo.#Temp_Question2', 'U') IS NOT NULL
	DROP TABLE #Temp_Question2; 
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		CoursesId,
		CoursesCode
INTO #Temp_Question2
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 2
	--AND EvaluatorUserId != TargetUserId
--SELECT COUNT(*) FROM #Temp_Question2

IF OBJECT_ID('tempdb.dbo.#Temp_Question3', 'U') IS NOT NULL
	DROP TABLE #Temp_Question3; 
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		CoursesId,
		CoursesCode 
INTO #Temp_Question3
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 3
	--AND EvaluatorUserId != TargetUserId
--SELECT COUNT(*) FROM #Temp_Question3

	
--DECLARE @AcademicGroup NVARCHAR(5) 
--DECLARE @CourseCode VARCHAR(24)
DECLARE @Total_Targets DECIMAL(5, 2)
DECLARE @EvaluatorAverage DECIMAL(10, 2)

DECLARE @RC_Exceed INT
DECLARE @RC_Exceed_Percentage DECIMAL(5, 2)
DECLARE @RC_Meet INT
DECLARE @RC_Meet_Percentage DECIMAL(5, 2)
DECLARE @RC_Below INT
DECLARE @RC_Below_Percentage DECIMAL(5, 2)
DECLARE @CE_Exceed INT
DECLARE @CE_Exceed_Percentage DECIMAL(5, 2)
DECLARE @CE_Meet INT
DECLARE @CE_Meet_Percentage DECIMAL(5, 2)
DECLARE @CE_Below INT
DECLARE @CE_Below_Percentage DECIMAL(5, 2)
DECLARE @CD_Exceed INT
DECLARE @CD_Exceed_Percentage DECIMAL(5, 2)
DECLARE @CD_Meet INT
DECLARE @CD_Meet_Percentage DECIMAL(5, 2)
DECLARE @CD_Below INT
DECLARE @CD_Below_Percentage DECIMAL(5, 2)

DECLARE @CursorParam_AcademicGroup NVARCHAR(5) 
DECLARE @CursorParam_CourseCode VARCHAR(24)
DECLARE @CursorParam_Instructor NVARCHAR(200) 

IF OBJECT_ID('tempdb.dbo.#MedianResponseRate', 'U') IS NOT NULL
	DROP TABLE #MedianResponseRate; 
CREATE TABLE #MedianResponseRate
(
	AcademicGroup NVARCHAR(5),
	CourseCode NVARCHAR(24),
	Instructor NVARCHAR(200),
	Total_Targets INT,
	EvaluatorAverage NVARCHAR(5),

	RC_Exceed INT,
	RC_Exceed_Percentage NVARCHAR(5),
	RC_Meet INT,
	RC_Meet_Percentage NVARCHAR(5),
	RC_Below INT,
	RC_Below_Percentage NVARCHAR(5),
	--RC_Difference INT,
	
	CE_Exceed INT,
	CE_Exceed_Percentage NVARCHAR(5),
	CE_Meet INT,
	CE_Meet_Percentage NVARCHAR(5),
	CE_Below INT,
	CE_Below_Percentage NVARCHAR(5),
	--CE_Difference INT,
	
	CD_Exceed INT,
	CD_Exceed_Percentage NVARCHAR(5),
	CD_Meet INT,
	CD_Meet_Percentage NVARCHAR(5),
	CD_Below INT,
	CD_Below_Percentage NVARCHAR(5),
	--CD_Difference INT
)


DECLARE CURSOR_FILTERS CURSOR FOR

	SELECT CourseCode,
			AcadGroup, 
			Instructor
	FROM #WhitelistedCourseCodeAcademicGroup

OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseCode, @CursorParam_AcademicGroup, @CursorParam_Instructor
WHILE @@FETCH_STATUS = 0
BEGIN

	SET @Total_Targets = 0.0
	SET @EvaluatorAverage = 0.0

	SET @RC_Exceed = 0.0
	SET @RC_Exceed_Percentage = 0.0
	SET @RC_Meet = 0.0
	SET @RC_Meet_Percentage = 0.0
	SET @RC_Below = 0.0
	SET @RC_Below_Percentage = 0.0
	SET @CE_Exceed = 0.0
	SET @CE_Exceed_Percentage = 0.0
	SET @CE_Meet = 0.0
	SET @CE_Meet_Percentage = 0.0
	SET @CE_Below = 0.0
	SET @CE_Below_Percentage = 0.0
	SET @CD_Exceed = 0.0
	SET @CD_Exceed_Percentage = 0.0
	SET @CD_Meet = 0.0
	SET @CD_Meet_Percentage = 0.0
	SET @CD_Below = 0.0
	SET @CD_Below_Percentage = 0.0

	--SELECT @CursorParam_CourseCode

	SELECT @Total_Targets = COUNT(TargetUserId)
	FROM (
			SELECT	DISTINCT
					Courses.Id CourseId,
					Courses.Code, 
					TargetUser.Id AS TargetUserId,
					TargetUser.DisplayName TargetUserDisplayName, 

					--CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
					--CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
					--CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",

					CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
						THEN 0
						ELSE 1
					END HasEvaluation			
			
					--, EvaluatorUser.DisplayName EvaluatorUser
					--, PeerFeedBackPairingSessions.PeerFeedBackSessionId

			FROM PeerFeedBackPairingSessions

			--LEFT JOIN PeerFeedbackEvaluators
			--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
			LEFT JOIN PeerFeedbackTargets
				ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId

			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 1) Question1
				ON 
				--Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question1.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
				--AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
				ON Question1.PeerFeedbackRatingId = Q1Rating.Id
			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 2) Question2
				ON 
				--Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question2.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
				--AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
				ON Question2.PeerFeedbackRatingId = Q2Rating.Id
			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 3) Question3
				ON 
				--Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question3.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
				--AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
				ON Question3.PeerFeedbackRatingId = Q3Rating.Id

			LEFT JOIN CategoryGroups
				ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
			LEFT JOIN CourseCategories
				ON CourseCategories.Id = CategoryGroups.CourseCategoryId
			LEFT JOIN Courses
				ON CourseCategories.CourseId = Courses.Id

			--LEFT JOIN Users EvaluatorUser
			--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
			LEFT JOIN Users TargetUser
				ON PeerFeedbackTargets.UserId = TargetUser.Id

			LEFT JOIN PeerFeedbackSessions
				ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback
				ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		
			LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
				ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
	--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
	--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID

			WHERE  Courses.Code = @CursorParam_CourseCode
	--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
				AND PeerFeedbackSessions.IsDeleted = 0
				AND PeerFeedback.IsDeleted = 0
				--AND Question1.EvaluatorUserId != TargetUser.Id
	) Targets
	WHERE Targets.HasEvaluation = 1
	GROUP BY Code
	--SELECT @Total_Targets AS Total_Targets

	
	SELECT @EvaluatorAverage = CAST(CAST(sum(EvaluatorCount) AS DECIMAL (10, 2)) / CAST(COUNT(TargetUserId) AS DECIMAL (10, 2)) AS DECIMAL (10, 2))
	FROM (
			SELECT TargetUserId,
					COUNT(DISTINCT EvaluatorUserId) EvaluatorCount
			FROM #Temp_Responses
			WHERE CoursesCode = @CursorParam_CourseCode
			GROUP BY TargetUserId
	) EvaluatorCountPerTarget


	IF OBJECT_ID('tempdb.dbo.#CTE_RC1', 'U') IS NOT NULL
		DROP TABLE #CTE_RC1; 
	;WITH CTE_RC1 AS (
		SELECT TargetUserId,
				AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
		FROM (
			SELECT DISTINCT 
					EvaluatorUserId, 
					TargetUserId, 
					PeerFeedbackSessionId, 
					PeerFeedBackRatingId, 
					PeerFeedBackGroupId 
			FROM #Temp_Question1
			WHERE CoursesCode = @CursorParam_CourseCode
		) RC
		GROUP BY TargetUserId
	)
	SELECT TargetUserId,
			CASE 
				WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
				WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
				WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
			END AS [Responsibility and Commitment]
	INTO #CTE_RC1
	FROM CTE_RC1

	IF OBJECT_ID('tempdb.dbo.#CTE_CE1', 'U') IS NOT NULL
		DROP TABLE #CTE_CE1; 
	;WITH CTE_CE1 AS (
		SELECT TargetUserId,
				AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
		FROM (
				SELECT DISTINCT 
						EvaluatorUserId, 
						TargetUserId, 
						PeerFeedbackSessionId, 
						PeerFeedBackRatingId, 
						PeerFeedBackGroupId 
				FROM #Temp_Question2
				WHERE CoursesCode = @CursorParam_CourseCode
		) CE
		GROUP BY TargetUserId
	)
	SELECT TargetUserId,
			CASE 
				WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
				WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
				WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
			END AS [Contribution towards Team Effectiveness]
	INTO #CTE_CE1
	FROM CTE_CE1

	IF OBJECT_ID('tempdb.dbo.#CTE_CD1', 'U') IS NOT NULL
		DROP TABLE #CTE_CD1; 
	;WITH CTE_CD1 AS (
		SELECT TargetUserId,
				AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
		FROM (
				SELECT DISTINCT 
						EvaluatorUserId, 
						TargetUserId, 
						PeerFeedbackSessionId, 
						PeerFeedBackRatingId, 
						PeerFeedBackGroupId 
				FROM #Temp_Question3
				WHERE CoursesCode = @CursorParam_CourseCode
		) CD
		GROUP BY TargetUserId
	)
	SELECT TargetUserId,	
			CASE 
				WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
				WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
				WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
			END AS [Contribution towards Team Deliverables (Quality and Quantity of Work)]
	INTO #CTE_CD1
	FROM CTE_CD1


	IF OBJECT_ID('tempdb.dbo.#Temp_UsersMedianPerCourse', 'U') IS NOT NULL
		DROP TABLE #Temp_UsersMedianPerCourse; 
	SELECT DISTINCT
			TargetUserId
	INTO #Temp_UsersMedianPerCourse
	FROM #Temp_Responses
	--WHERE EvaluatorUserId != TargetUserId

	IF OBJECT_ID('tempdb.dbo.#Temp_MedianPerCourse', 'U') IS NOT NULL
		DROP TABLE #Temp_MedianPerCourse; 
	SELECT UsersMedianPerCourse.TargetUserId,
			RC.[Responsibility and Commitment],
			CE.[Contribution towards Team Effectiveness],
			CD.[Contribution towards Team Deliverables (Quality and Quantity of Work)]
	INTO #Temp_MedianPerCourse
	FROM #Temp_UsersMedianPerCourse AS UsersMedianPerCourse
	LEFT JOIN #CTE_RC1 RC
	ON RC.TargetUserId = UsersMedianPerCourse.TargetUserId
	LEFT JOIN #CTE_CE1 CE
	ON CE.TargetUserId = UsersMedianPerCourse.TargetUserId
	LEFT JOIN #CTE_CD1 CD
	ON CD.TargetUserId = UsersMedianPerCourse.TargetUserId
	--SELECT * FROM #Temp_MedianPerCourse

	SELECT @RC_Exceed = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Responsibility and Commitment] = 3
	SELECT @RC_Meet = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Responsibility and Commitment] = 2
	SELECT @RC_Below = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Responsibility and Commitment] = 1

	SELECT @CE_Exceed = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Effectiveness] = 3
	SELECT @CE_Meet = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Effectiveness] = 2
	SELECT @CE_Below = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Effectiveness] = 1

	SELECT @CD_Exceed = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 3
	SELECT @CD_Meet = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 2
	SELECT @CD_Below = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 1

	INSERT INTO #MedianResponseRate
	SELECT @CursorParam_AcademicGroup As AcademicGroup 
		, @CursorParam_CourseCode AS CourseCode
		, @CursorParam_Instructor AS Instructor
		, ISNULL(@Total_Targets, 0) AS Total_Targets
		, ISNULL(@EvaluatorAverage, 0) AS Evaluator_Average_Count

		, @RC_Exceed AS RC_Exceed 
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@RC_Exceed / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS RC_Exceed_Percentage 		
		, @RC_Meet AS RC_Meet
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@RC_Meet / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS RC_Meet_Percentage
		, (@RC_Below) AS RC_Below
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@RC_Below / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS RC_Below_Percentage
		--, (@Total_Targets - (@RC_Exceed + @RC_Meet + @RC_Below)) AS RC_Difference

		, @CE_Exceed AS CE_Exceed
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CE_Exceed / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS CE_Exceed_Percentage
		, @CE_Meet AS CE_Meet
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CE_Meet / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS CE_Meet_Percentage
		, @CE_Below AS CE_Below
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CE_Below / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS CE_Below_Percentage
		--, (@Total_Targets - (@CE_Exceed + @CE_Meet + @CE_Below)) AS CE_Difference

		, @CD_Exceed AS CD_Exceed
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CD_Exceed / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%'  AS CD_Exceed_Percentage
		, @CD_Meet AS CD_Meet
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CD_Meet / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%'  AS CD_Meet_Percentage
		, @CD_Below AS CD_Below
		, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CD_Below / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%'  AS CD_Below_Percentage
		--, (@Total_Targets - (@CD_Exceed + @CD_Meet + @CD_Below)) AS CD_Difference

	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseCode, @CursorParam_AcademicGroup, @CursorParam_Instructor
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS

SELECT * FROM #MedianResponseRate

--DROP TABLE IF EXISTS #WhitelistedCourseCodeAcademicGroup
--DROP TABLE IF EXISTS #Temp_Responses
--DROP TABLE IF EXISTS #Temp_Question1
--DROP TABLE IF EXISTS #Temp_Question2
--DROP TABLE IF EXISTS #Temp_Question3
--DROP TABLE IF EXISTS #MedianResponseRate
--DROP TABLE IF EXISTS #CTE_RC1
--DROP TABLE IF EXISTS #CTE_CE1
--DROP TABLE IF EXISTS #CTE_CD1
--DROP TABLE IF EXISTS #Temp_UsersMedianPerCourse
--DROP TABLE IF EXISTS #Temp_MedianPerCourse</value>
  </data>
  <data name="mean_score_by_studentschool_intakeyear" xml:space="preserve">
    <value>--DROP TABLE IF EXISTS #WhitelistedCourses
--DROP TABLE IF EXISTS #Temp_Responses
--DROP TABLE IF EXISTS #Temp_Question1
--DROP TABLE IF EXISTS #Temp_Question2
--DROP TABLE IF EXISTS #Temp_Question3
--DROP TABLE IF EXISTS #MedianResponseRate
--DROP TABLE IF EXISTS #CTE_RC1
--DROP TABLE IF EXISTS #CTE_CE1
--DROP TABLE IF EXISTS #CTE_CD1
--DROP TABLE IF EXISTS #Temp_UsersMedianPerCourse
--DROP TABLE IF EXISTS #Temp_MedianPerCourse

--DROP TABLE IF EXISTS #Temp_Users
--DROP TABLE IF EXISTS #QueryFilters
--DROP TABLE IF EXISTS #TotalTargetsPerSchoolCodeAcademicYear
--DROP TABLE IF EXISTS #Temp_Responses
--DROP TABLE IF EXISTS #Temp_DescriptorResponse

IF OBJECT_ID('tempdb.dbo.#WhitelistedCourses', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourses; 
CREATE TABLE #WhitelistedCourses
(
	CourseId VARCHAR(24)
)

INSERT INTO #WhitelistedCourses
SELECT Courses.Id
FROM Courses
WHERE Courses.Id IN @SelectedCourses
	--(360280, 360850, 360163, 360572, 360675, 360080, 360097, 360950, 360546, 360752, 360684, 360323, 360569, 361162, 360532, 359908, 361211, 360324, 360673, 360956, 359817, 360123, 360836, 360856, 360158, 360753, 364480, 359803, 360444, 360381, 361022, 360667, 360235, 360959, 360510, 359806, 359875, 360714, 364661, 359892, 360923, 360528, 361017, 359984, 360078, 360860, 360244, 359809, 360058, 359958, 360356, 360688, 358258, 360694, 360459, 361137, 359873, 360666, 360769, 359913, 360311, 359813, 359807, 359976, 360686, 361221, 360623, 361018, 360508, 364442, 364677, 364682)

--SELECT * FROM #WhitelistedCourses

IF OBJECT_ID('tempdb.dbo.#Temp_Users', 'U') IS NOT NULL
	DROP TABLE #Temp_Users; 
CREATE TABLE #Temp_Users
(
	Id INT,
	SchoolCode NVARCHAR(50),
	AcademicYear INT
)

INSERT INTO #Temp_Users
SELECT Id,
		REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') SchoolCode,
		--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear
		DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), GETDATE()) + IIF(MONTH(GETDATE()) &lt; 8, 0, 1) + IIF(MONTH(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) &lt; 8, 1, 0) AS AcademicYear
FROM Users
--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
--LEFT JOIN STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW
--	ON Users.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID
INNER JOIN (SELECT EMPLID, MAX(TERM_BEGIN_DT) TERM_BEGIN_DT 
			FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW 
			--FROM LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
			WHERE ACAD_PROG &lt; 200 OR ACAD_PROG IN (515, 508) 
			GROUP BY EMPLID) A 
	ON Users.OrgDefinedId = A.EMPLID
WHERE YEAR(SYSDATETIME()) - YEAR(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) + 1 &lt; 10
ORDER BY SchoolCode

--DROP TABLE IF EXISTS #Temp_Courses
--CREATE TABLE #Temp_Courses
--(
--	CategoryGroupId INT,
--	CourseCategoryId INT,
--	CourseId INT
--)
--INSERT INTO #Temp_Courses
--SELECT CategoryGroups.Id,
--		CourseCategories.Id,
--		Courses.Id
--FROM CategoryGroups
--LEFT JOIN CourseCategories
--	ON CourseCategories.Id = CategoryGroups.CourseCategoryId
--LEFT JOIN Courses
--	ON CourseCategories.CourseId = Courses.Id
--WHERE Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)

IF OBJECT_ID('tempdb.dbo.#QueryFilters', 'U') IS NOT NULL
	DROP TABLE #QueryFilters; 
CREATE TABLE #QueryFilters
(
	SchoolCode NVARCHAR(50),
	AcademicYear INT
)

;WITH
Programs AS (
	SELECT DISTINCT SchoolCode
	FROM (
		SELECT	--DISTINCT
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode]
				SchoolCode
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN #Temp_Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		WHERE 
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0

		UNION

		SELECT	--DISTINCT
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode]
				SchoolCode
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		LEFT JOIN #Temp_Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		WHERE
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0

		UNION

		SELECT NULL
	) SchoolCodes
),
AcademicYears AS (
	SELECT Years
	FROM (VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9)) v(Years)
)

INSERT INTO #QueryFilters
SELECT SchoolCode,
		AcademicYears.Years
FROM Programs 
CROSS JOIN AcademicYears
--SELECT * FROM #QueryFilters

IF OBJECT_ID('tempdb.dbo.#Temp_Responses', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses; 
SELECT ROW_NUMBER() OVER (ORDER BY Responses.PeerFeedBackId) AS PeerFeedBackResponsesId,
		Responses.PeerFeedBackId,
		Responses.PeerFeedBackSessionId,
		Responses.PeerFeedBackQuestionId,
		Responses.TargetUserId,
		Responses.EvaluatorUserId,
		Responses.LastUpdateTime,
		Responses.IsDeleted,
		Responses.PeerFeedBackOptionId,
		Responses.PeerFeedBackRatingId,
		Responses.PeerFeedBackGroupId,
		--CoursesId,
		--CoursesCode,
		CourseId,
		SchoolCode,
		AcademicYear
INTO #Temp_Responses
FROM (
		---- GENERATED MEET EXPECTATIONS BASED ON EXCEED EXPECTATIONS 
		--SELECT --PeerFeedBackResponses.Id,
		--		PeerFeedBackResponses.PeerFeedBackId,
		--		PeerFeedBackResponses.PeerFeedBackSessionId,
		--		PeerFeedbackQuestionRatingMap.QuestionId AS PeerFeedBackQuestionId,
		--		PeerFeedBackResponses.TargetUserId,
		--		PeerFeedBackResponses.EvaluatorUserId,
		--		GETDATE() AS LastUpdateTime,
		--		0 AS IsDeleted,
		--		PeerFeedbackQuestionRatingMap.RatingOptionId AS PeerFeedBackOptionId,
		--		PeerFeedbackQuestionRatingMap.RatingQuestionId AS PeerFeedBackRatingId,
		--		PeerFeedBackResponses.PeerFeedBackGroupId,
		--		CoursesId,
		--		CoursesCode
		--FROM (SELECT DISTINCT
		--				PeerFeedBackResponses.TargetUserId,
		--				PeerFeedBackResponses.PeerFeedBackId,
		--				PeerFeedBackResponses.EvaluatorUserId,
		--				PeerFeedBackResponses.PeerFeedBackGroupId,
		--				PeerFeedBackResponses.PeerFeedBackRatingId,
		--				PeerFeedBackResponses.PeerFeedBackSessionId,
		--				PeerFeedBackResponses.PeerFeedBackQuestionId,
		--				Courses.Id AS CoursesId,
		--				Courses.Code AS CoursesCode
		--		FROM PeerFeedBackResponses
		--		LEFT JOIN PeerFeedbackSessions 
		--			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		--		LEFT JOIN PeerFeedback 
		--			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		--		LEFT JOIN CategoryGroups 
		--			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		--		LEFT JOIN CourseCategories 
		--			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		--		LEFT JOIN Courses 
		--			ON CourseCategories.CourseId = Courses.Id --from course id find course code
		--		WHERE PeerFeedback.IsDeleted = 0 
		--			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
		--			AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
		--			AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
		--			--AND Courses.Id = 7318
		--			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
		--			--AND PeerFeedbackSessions.Id = 21
		--			--AND TargetUserId = 2374
		--			--AND EvaluatorUserId = 1684
		--			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--		--ORDER BY EvaluatorUserId
		--) PeerFeedBackResponses
		--LEFT JOIN PeerFeedbackQuestionRatingMap
		--	ON PeerFeedbackQuestionRatingMap.QuestionId = PeerFeedBackResponses.PeerFeedBackQuestionId
		--	AND PeerFeedbackQuestionRatingMap.RatingQuestionId = 2
		---- 159

		--UNION

		-- PeerFeedBackResponses
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedBackResponses.PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				PeerFeedBackResponses.LastUpdateTime,
				PeerFeedBackResponses.IsDeleted AS IsDeleted,
				PeerFeedBackResponses.PeerFeedBackOptionId,
				PeerFeedBackResponses.PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				--Courses.Id AS CoursesId,
				--Courses.Code AS CoursesCode
				Courses.CourseId,
				SchoolCode,
				AcademicYear
 		FROM PeerFeedBackResponses
		LEFT JOIN PeerFeedbackSessions 
			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback 
			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		LEFT JOIN CategoryGroups 
			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		LEFT JOIN CourseCategories 
			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		--LEFT JOIN Courses 
		--	ON CourseCategories.CourseId = Courses.Id --from course id find course code
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		LEFT JOIN #Temp_Users TargetUsers
			ON PeerFeedBackResponses.TargetUserId = TargetUsers.Id
		WHERE PeerFeedback.IsDeleted = 0 
			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
			--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
			--AND Courses.Id = 7318 
			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
			--AND PeerFeedbackSessions.Id = 21
			--AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
			--AND TargetUserId = 2374
			--AND EvaluatorUserId = 1684
			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--ORDER BY EvaluatorUserId

		-- 203
) Responses
--1259
--select * from #Temp_Responses

--SELECT DISTINCT TargetUserId
--FROM #Temp_Responses
--WHERE EvaluatorUserId != TargetUserId


IF OBJECT_ID('tempdb.dbo.#Temp_Question1', 'U') IS NOT NULL
	DROP TABLE #Temp_Question1; 
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		--CoursesId,
		--CoursesCode
		CourseId,
		SchoolCode,
		AcademicYear
INTO #Temp_Question1
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 1
	--AND EvaluatorUserId != TargetUserId
--SELECT COUNT(*) FROM #Temp_Question1

IF OBJECT_ID('tempdb.dbo.#Temp_Question2', 'U') IS NOT NULL
	DROP TABLE #Temp_Question2; 
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		--CoursesId,
		--CoursesCode
		CourseId,
		SchoolCode,
		AcademicYear
INTO #Temp_Question2
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 2
	--AND EvaluatorUserId != TargetUserId
--SELECT COUNT(*) FROM #Temp_Question2

IF OBJECT_ID('tempdb.dbo.#Temp_Question3', 'U') IS NOT NULL
	DROP TABLE #Temp_Question3; 
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		--CoursesId,
		--CoursesCode
		CourseId,
		SchoolCode,
		AcademicYear
INTO #Temp_Question3
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 3
	--AND EvaluatorUserId != TargetUserId
--SELECT COUNT(*) FROM #Temp_Question3

	
--DECLARE @AcademicGroup NVARCHAR(5) 
--DECLARE @CourseCode VARCHAR(24)
DECLARE @Total_Targets DECIMAL(8, 2)
DECLARE @EvaluatorAverage DECIMAL(10, 2)

DECLARE @RC_Exceed INT
DECLARE @RC_Exceed_Percentage DECIMAL(8, 2)
DECLARE @RC_Meet INT
DECLARE @RC_Meet_Percentage DECIMAL(8, 2)
DECLARE @RC_Below INT
DECLARE @RC_Below_Percentage DECIMAL(8, 2)
DECLARE @CE_Exceed INT
DECLARE @CE_Exceed_Percentage DECIMAL(8, 2)
DECLARE @CE_Meet INT
DECLARE @CE_Meet_Percentage DECIMAL(8, 2)
DECLARE @CE_Below INT
DECLARE @CE_Below_Percentage DECIMAL(8, 2)
DECLARE @CD_Exceed INT
DECLARE @CD_Exceed_Percentage DECIMAL(8, 2)
DECLARE @CD_Meet INT
DECLARE @CD_Meet_Percentage DECIMAL(8, 2)
DECLARE @CD_Below INT
DECLARE @CD_Below_Percentage DECIMAL(8, 2)

DECLARE @CursorParam_SchoolCode NVARCHAR(50)
DECLARE @CursorParam_AcademicYear INT

IF OBJECT_ID('tempdb.dbo.#MedianResponseRate', 'U') IS NOT NULL
	DROP TABLE #MedianResponseRate; 
CREATE TABLE #MedianResponseRate
(
	SchoolCode NVARCHAR(50),
	AcademicYear INT,
	Total_Targets INT,
	EvaluatorAverage NVARCHAR(5),

	RC_Exceed INT,
	RC_Exceed_Percentage NVARCHAR(5),
	RC_Meet INT,
	RC_Meet_Percentage NVARCHAR(5),
	RC_Below INT,
	RC_Below_Percentage NVARCHAR(5),
	--RC_Difference INT,
	
	CE_Exceed INT,
	CE_Exceed_Percentage NVARCHAR(5),
	CE_Meet INT,
	CE_Meet_Percentage NVARCHAR(5),
	CE_Below INT,
	CE_Below_Percentage NVARCHAR(5),
	--CE_Difference INT,
	
	CD_Exceed INT,
	CD_Exceed_Percentage NVARCHAR(5),
	CD_Meet INT,
	CD_Meet_Percentage NVARCHAR(5),
	CD_Below INT,
	CD_Below_Percentage NVARCHAR(5),
	--CD_Difference INT
)

DECLARE CURSOR_FILTERS CURSOR FOR

	SELECT SchoolCode, AcademicYear FROM #QueryFilters

OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_SchoolCode, @CursorParam_AcademicYear
WHILE @@FETCH_STATUS = 0
BEGIN

	SET @Total_Targets = 0.0
	SET @EvaluatorAverage = 0.0

	SET @RC_Exceed = 0.0
	SET @RC_Exceed_Percentage = 0.0
	SET @RC_Meet = 0.0
	SET @RC_Meet_Percentage = 0.0
	SET @RC_Below = 0.0
	SET @RC_Below_Percentage = 0.0
	SET @CE_Exceed = 0.0
	SET @CE_Exceed_Percentage = 0.0
	SET @CE_Meet = 0.0
	SET @CE_Meet_Percentage = 0.0
	SET @CE_Below = 0.0
	SET @CE_Below_Percentage = 0.0
	SET @CD_Exceed = 0.0
	SET @CD_Exceed_Percentage = 0.0
	SET @CD_Meet = 0.0
	SET @CD_Meet_Percentage = 0.0
	SET @CD_Below = 0.0
	SET @CD_Below_Percentage = 0.0

	--SELECT @CursorParam_CourseCode

	SELECT @Total_Targets = COUNT(TargetUserId)
	FROM (
			SELECT	DISTINCT
					Courses.CourseId CourseId,
					--Courses.Code, 
					TargetUser.Id AS TargetUserId,
					--TargetUser.DisplayName TargetUserDisplayName, 

					--CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
					--CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
					--CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",

					CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
						THEN 0
						ELSE 1
					END HasEvaluation,
			
					--, EvaluatorUser.DisplayName EvaluatorUser
					--, PeerFeedBackPairingSessions.PeerFeedBackSessionId
					SchoolCode,
					AcademicYear

			FROM PeerFeedBackPairingSessions

			--LEFT JOIN PeerFeedbackEvaluators
			--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
			LEFT JOIN PeerFeedbackTargets
				ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId

			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 1) Question1
				ON 
				--Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question1.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
				--AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
				ON Question1.PeerFeedbackRatingId = Q1Rating.Id
			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 2) Question2
				ON 
				--Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question2.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
				--AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
				ON Question2.PeerFeedbackRatingId = Q2Rating.Id
			LEFT JOIN (SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedbackRatingId, 
								PeerFeedBackResponses.PeerFeedBackGroupId 
						FROM PeerFeedBackResponses 
						WHERE PeerFeedbackQuestionId = 3) Question3
				ON 
				--Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
				--AND 
				Question3.TargetUserId = PeerFeedbackTargets.UserId 
				AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
				--AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
				AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
			LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
				ON Question3.PeerFeedbackRatingId = Q3Rating.Id

			LEFT JOIN CategoryGroups
				ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
			LEFT JOIN CourseCategories
				ON CourseCategories.Id = CategoryGroups.CourseCategoryId
			--LEFT JOIN Courses
			--	ON CourseCategories.CourseId = Courses.Id
			INNER JOIN #WhitelistedCourses Courses
				ON CourseCategories.CourseId = Courses.CourseId

			--LEFT JOIN Users EvaluatorUser
			--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
			--LEFT JOIN Users TargetUser
			--	ON PeerFeedbackTargets.UserId = TargetUser.Id
			LEFT JOIN #Temp_Users TargetUser
				ON PeerFeedbackTargets.UserId = TargetUser.Id

			LEFT JOIN PeerFeedbackSessions
				ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback
				ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		
			--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
			--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
	--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
	--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
		
			WHERE  
				--Courses.Code = @CursorParam_CourseCode
	--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
				--AND 
				PeerFeedbackSessions.IsDeleted = 0
				AND PeerFeedback.IsDeleted = 0
				--AND Question1.EvaluatorUserId != TargetUser.Id
				AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
				AND AcademicYear = @CursorParam_AcademicYear
	) Targets
	WHERE Targets.HasEvaluation = 1
	--GROUP BY Code
	--SELECT @Total_Targets AS Total_Targets

	
	SELECT @EvaluatorAverage = CAST(CAST(sum(EvaluatorCount) AS DECIMAL (10, 2)) / CAST(COUNT(TargetUserId) AS DECIMAL (10, 2)) AS DECIMAL (10, 2))
	FROM (
			SELECT TargetUserId,
					COUNT(DISTINCT EvaluatorUserId) EvaluatorCount
			FROM #Temp_Responses
			WHERE --CoursesCode = @CursorParam_CourseCode
				ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
				AND AcademicYear = @CursorParam_AcademicYear
			GROUP BY TargetUserId
	) EvaluatorCountPerTarget


	--------------------
	--SELECT TargetUserId,
	--			AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
	--	FROM (
	--		SELECT DISTINCT 
	--				EvaluatorUserId, 
	--				TargetUserId, 
	--				PeerFeedbackSessionId, 
	--				PeerFeedBackRatingId, 
	--				PeerFeedBackGroupId 
	--		FROM #Temp_Question1
	--		--WHERE --CoursesCode = @CursorParam_CourseCode
	--		--	ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
	--		--	AND AcademicYear = @CursorParam_AcademicYear
	--	) RC
	--	GROUP BY TargetUserId
	--------------------

	IF OBJECT_ID('tempdb.dbo.#CTE_RC1', 'U') IS NOT NULL
		DROP TABLE #CTE_RC1; 
	;WITH CTE_RC1 AS (
		SELECT TargetUserId,
				AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
		FROM (
			SELECT DISTINCT 
					EvaluatorUserId, 
					TargetUserId, 
					PeerFeedbackSessionId, 
					PeerFeedBackRatingId, 
					PeerFeedBackGroupId 
			FROM #Temp_Question1
			WHERE --CoursesCode = @CursorParam_CourseCode
				ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
				AND AcademicYear = @CursorParam_AcademicYear
		) RC
		GROUP BY TargetUserId
	)
	SELECT TargetUserId,
			CASE 
				WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
				WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
				WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
			END AS [Responsibility and Commitment]
	INTO #CTE_RC1
	FROM CTE_RC1

	IF OBJECT_ID('tempdb.dbo.#CTE_CE1', 'U') IS NOT NULL
		DROP TABLE #CTE_CE1; 
	;WITH CTE_CE1 AS (
		SELECT TargetUserId,
				AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
		FROM (
				SELECT DISTINCT 
						EvaluatorUserId, 
						TargetUserId, 
						PeerFeedbackSessionId, 
						PeerFeedBackRatingId, 
						PeerFeedBackGroupId 
				FROM #Temp_Question2
			WHERE --CoursesCode = @CursorParam_CourseCode
				ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
				AND AcademicYear = @CursorParam_AcademicYear
		) CE
		GROUP BY TargetUserId
	)
	SELECT TargetUserId,
			CASE 
				WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
				WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
				WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
			END AS [Contribution towards Team Effectiveness]
	INTO #CTE_CE1
	FROM CTE_CE1

	IF OBJECT_ID('tempdb.dbo.#CTE_CD1', 'U') IS NOT NULL
		DROP TABLE #CTE_CD1; 
	;WITH CTE_CD1 AS (
		SELECT TargetUserId,
				AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
		FROM (
				SELECT DISTINCT 
						EvaluatorUserId, 
						TargetUserId, 
						PeerFeedbackSessionId, 
						PeerFeedBackRatingId, 
						PeerFeedBackGroupId 
				FROM #Temp_Question3
			WHERE --CoursesCode = @CursorParam_CourseCode
				ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
				AND AcademicYear = @CursorParam_AcademicYear
		) CD
		GROUP BY TargetUserId
	)
	SELECT TargetUserId,	
			CASE 
				WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
				WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
				WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
			END AS [Contribution towards Team Deliverables (Quality and Quantity of Work)]
	INTO #CTE_CD1
	FROM CTE_CD1


	IF OBJECT_ID('tempdb.dbo.#Temp_UsersMedianPerCourse', 'U') IS NOT NULL
		DROP TABLE #Temp_UsersMedianPerCourse; 
	SELECT DISTINCT
			TargetUserId
	INTO #Temp_UsersMedianPerCourse
	FROM #Temp_Responses
	--WHERE EvaluatorUserId != TargetUserId

	IF OBJECT_ID('tempdb.dbo.#Temp_MedianPerCourse', 'U') IS NOT NULL
		DROP TABLE #Temp_MedianPerCourse; 
	SELECT UsersMedianPerCourse.TargetUserId,
			RC.[Responsibility and Commitment],
			CE.[Contribution towards Team Effectiveness],
			CD.[Contribution towards Team Deliverables (Quality and Quantity of Work)]
	INTO #Temp_MedianPerCourse
	FROM #Temp_UsersMedianPerCourse AS UsersMedianPerCourse
	LEFT JOIN #CTE_RC1 RC
	ON RC.TargetUserId = UsersMedianPerCourse.TargetUserId
	LEFT JOIN #CTE_CE1 CE
	ON CE.TargetUserId = UsersMedianPerCourse.TargetUserId
	LEFT JOIN #CTE_CD1 CD
	ON CD.TargetUserId = UsersMedianPerCourse.TargetUserId
	--SELECT * FROM #Temp_MedianPerCourse

	SELECT @RC_Exceed = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Responsibility and Commitment] = 3
	SELECT @RC_Meet = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Responsibility and Commitment] = 2
	SELECT @RC_Below = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Responsibility and Commitment] = 1

	SELECT @CE_Exceed = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Effectiveness] = 3
	SELECT @CE_Meet = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Effectiveness] = 2
	SELECT @CE_Below = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Effectiveness] = 1

	SELECT @CD_Exceed = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 3
	SELECT @CD_Meet = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 2
	SELECT @CD_Below = COUNT(*) FROM #Temp_MedianPerCourse WHERE [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 1

	IF @Total_Targets &gt; 0
	BEGIN
		INSERT INTO #MedianResponseRate
		SELECT 
			--@CursorParam_AcademicGroup As AcademicGroup 
			--, @CursorParam_CourseCode AS CourseCode
			@CursorParam_SchoolCode As SchoolCode
			, @CursorParam_AcademicYear AS AcademicYear
			, ISNULL(@Total_Targets, 0) AS Total_Targets
			, ISNULL(@EvaluatorAverage, 0) AS Evaluator_Average_Count

			, @RC_Exceed AS RC_Exceed 
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@RC_Exceed / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS RC_Exceed_Percentage 		
			, @RC_Meet AS RC_Meet
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@RC_Meet / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS RC_Meet_Percentage
			, (@RC_Below) AS RC_Below
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@RC_Below / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS RC_Below_Percentage
			--, (@Total_Targets - (@RC_Exceed + @RC_Meet + @RC_Below)) AS RC_Difference

			, @CE_Exceed AS CE_Exceed
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CE_Exceed / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS CE_Exceed_Percentage
			, @CE_Meet AS CE_Meet
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CE_Meet / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS CE_Meet_Percentage
			, @CE_Below AS CE_Below
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CE_Below / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%' AS CE_Below_Percentage
			--, (@Total_Targets - (@CE_Exceed + @CE_Meet + @CE_Below)) AS CE_Difference

			, @CD_Exceed AS CD_Exceed
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CD_Exceed / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%'  AS CD_Exceed_Percentage
			, @CD_Meet AS CD_Meet
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CD_Meet / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%'  AS CD_Meet_Percentage
			, @CD_Below AS CD_Below
			, CAST(CEILING(CASE WHEN @Total_Targets = 0 THEN 0 ELSE ISNULL((@CD_Below / @Total_Targets) * 100, 0) END) AS NVARCHAR(3)) + '%'  AS CD_Below_Percentage
			--, (@Total_Targets - (@CD_Exceed + @CD_Meet + @CD_Below)) AS CD_Difference
	END

	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_SchoolCode, @CursorParam_AcademicYear
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS

SELECT * FROM #MedianResponseRate

--DROP TABLE IF EXISTS #WhitelistedCourseCodeAcademicGroup
--DROP TABLE IF EXISTS #Temp_Responses
--DROP TABLE IF EXISTS #Temp_Question1
--DROP TABLE IF EXISTS #Temp_Question2
--DROP TABLE IF EXISTS #Temp_Question3
--DROP TABLE IF EXISTS #MedianResponseRate
--DROP TABLE IF EXISTS #CTE_RC1
--DROP TABLE IF EXISTS #CTE_CE1
--DROP TABLE IF EXISTS #CTE_CD1
--DROP TABLE IF EXISTS #Temp_UsersMedianPerCourse
--DROP TABLE IF EXISTS #Temp_MedianPerCourse</value>
  </data>
  <data name="overall_response_rate_by_coursecode" xml:space="preserve">
    <value>--DROP TABLE IF EXISTS #WhitelistedCourses
CREATE TABLE #WhitelistedCourses
(
	CourseCode VARCHAR(24),
	AcademicGroup NVARCHAR(5),
	Instructor NVARCHAR(200)
)
 
INSERT INTO #WhitelistedCourses
SELECT Courses.Code,
		PS_SIS_LMS_CLASS_V.ACAD_GROUP,
		STUFF((SELECT '; ' + Users.DisplayName
		FROM UserEnrollments
		INNER JOIN Users
			ON Users.Id = UserEnrollments.UserId
		WHERE UserEnrollments.CourseId = Courses.Id
			AND UserEnrollments.RoleId = 106
		ORDER BY Users.DisplayName
		FOR XML PATH('')), 1, 1, '')
FROM Courses
LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_CLASS_V --STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V 
	ON PS_SIS_LMS_CLASS_V.STRM = TL_CourseOfferings.STRM 
	AND PS_SIS_LMS_CLASS_V.CLASS_NBR = TL_CourseOfferings.CLASS_NBR
WHERE Courses.Id IN @SelectedCourses
	--(360280, 360850, 360163, 360572, 360675, 360080, 360097, 360950, 360546, 360752, 360684, 360323, 360569, 361162, 360532, 359908, 361211, 360324, 360673, 360956, 359817, 360123, 360836, 360856, 360158, 360753, 364480, 359803, 360444, 360381, 361022, 360667, 360235, 360959, 360510, 359806, 359875, 360714, 364661, 359892, 360923, 360528, 361017, 359984, 360078, 360860, 360244, 359809, 360058, 359958, 360356, 360688, 358258, 360694, 360459, 361137, 359873, 360666, 360769, 359913, 360311, 359813, 359807, 359976, 360686, 361221, 360623, 361018, 360508)
 -- orgunitids of 2023-24 Term 2 IS213 
--(375508, 375511, 376136, 376239, 376326, 376328, 376330, 376515, 376516, 376657,
-- orgunitids of 2023-24 Term 2 COR1307sss
--376194, 376190,
-- orgunitids of 2023-24 Term 2 IS214 
--376415, 375343, 375594, 376414, 375513, 376589, 375431, 375337, 376137, 375754,
-- orgunitids of 2023-24 Term 2 CS460 --&gt;
--375581)

DECLARE @Total_Participants DECIMAL(5, 2)
DECLARE @Total_Evaluators DECIMAL(5, 2)
DECLARE @Total_Targets_Completed DECIMAL(5, 2)
DECLARE @Total_Targets DECIMAL(5, 2)
DECLARE @Total_Views DECIMAL(5, 2)
DECLARE @Total_Evaluators_Percentage DECIMAL(5, 2)
DECLARE @Total_Targets_Completed_Percentage DECIMAL(5, 2)
DECLARE @Total_Targets_Percentage DECIMAL(5, 2)
DECLARE @Total_Views_Percentage DECIMAL(5, 2)
 
DECLARE @CursorParam_CourseCode VARCHAR(24)
DECLARE @CursorParam_AcademicGroup NVARCHAR(5) 
DECLARE @CursorParam_Instructor NVARCHAR(200)
 
--DROP TABLE IF EXISTS #OverallResponseRate
CREATE TABLE #OverallResponseRate
(
	AcademicGroup NVARCHAR(5),
	CourseCode VARCHAR(24),
	Instructor NVARCHAR(200),
	Total_Participants DECIMAL(5, 2),
	Total_Evaluators DECIMAL(5, 2),
	Total_Evaluators_Percentage NVARCHAR(5),
	Total_Targets_Completed DECIMAL(5, 2),
	Total_Targets_Completed_Percentage NVARCHAR(5),
	Total_Targets DECIMAL(5, 2),
	Total_Targets_Percentage NVARCHAR(5),
	Total_Views DECIMAL(5, 2),
	Total_Views_Percentage NVARCHAR(5)
)
 
DECLARE CURSOR_FILTERS CURSOR FOR
 
	SELECT CourseCode, AcademicGroup, Instructor FROM #WhitelistedCourses
 
OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseCode, @CursorParam_AcademicGroup, @CursorParam_Instructor
WHILE @@FETCH_STATUS = 0
BEGIN
	SET @Total_Participants = 0.0
	SET @Total_Evaluators = 0.0
	SET @Total_Targets_Completed = 0.0
	SET @Total_Targets = 0.0
	SET @Total_Views = 0.0
	SET @Total_Evaluators_Percentage = 0.0
	SET @Total_Targets_Completed_Percentage = 0.0
	SET @Total_Targets_Percentage = 0.0
	SET @Total_Views_Percentage = 0.0
 
	--SELECT @CursorParam_CourseCode
 
	SELECT @Total_Participants = COUNT(*)
	FROM (
		SELECT	DISTINCT
--				PS_SIS_LMS_CLASS_V.ACAD_GROUP,
				Courses.Id CourseId,
				Courses.Code, 
				EvaluatorUser.Id EvaluatorUserId,
				EvaluatorUser.DisplayName EvaluatorUserDisplayName
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		LEFT JOIN Courses
			ON CourseCategories.CourseId = Courses.Id
		LEFT JOIN Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
			LEFT JOIN PeerFeedbackSessions
				ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback
				ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
 
		WHERE Courses.Code = @CursorParam_CourseCode 
--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			AND PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
 
		UNION
 
		SELECT	DISTINCT
--				PS_SIS_LMS_CLASS_V.ACAD_GROUP,
				Courses.Id CourseId,
				Courses.Code, 
				TargetUser.Id TargetUserId,
				TargetUser.DisplayName TargetUserDisplayName
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		LEFT JOIN Courses
			ON CourseCategories.CourseId = Courses.Id
		LEFT JOIN Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code --from course code find course_id/smu_crse_cd
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID --from course_id find acad_group
			LEFT JOIN PeerFeedbackSessions
				ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
			LEFT JOIN PeerFeedback
				ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
 
		WHERE Courses.Code = @CursorParam_CourseCode
--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			AND PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
	) Participants
	--SELECT @Total_Participants AS Total_Participants
 
	SELECT @Total_Evaluators = COUNT(EvaluatorUserId)
	FROM (
		SELECT	DISTINCT
				Courses.Id CourseId,
				Courses.Code, 
				EvaluatorUser.Id EvaluatorUserId,
				EvaluatorUser.DisplayName EvaluatorUserDisplayName,
 
				CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
					THEN 0
					ELSE 1
				END HasEvaluated
 
				--, PeerFeedBackPairingSessions.PeerFeedBackSessionId
 
		FROM PeerFeedBackPairingSessions
 
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		--LEFT JOIN PeerFeedbackTargets
		--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
 
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND Question1.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
			AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
			--AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND Question2.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
			AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
			--AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND Question3.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
			AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
			--AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id
 
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		LEFT JOIN Courses
			ON CourseCategories.CourseId = Courses.Id
 
		LEFT JOIN Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
 
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
 
		WHERE  Courses.Code = @CursorParam_CourseCode
--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			AND PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			--AND DisplayName = 'Student S1505'
	) Evaluations
	WHERE Evaluations.HasEvaluated = 1
	GROUP BY Code	
	--SELECT @Total_Evaluators AS Total_Evaluators
 
	SELECT @Total_Evaluators_Percentage = 
										CASE 
											WHEN @Total_Evaluators IS NULL OR @Total_Participants IS NULL OR @Total_Evaluators = 0 OR @Total_Participants = 0 THEN 0
											WHEN @Total_Evaluators &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Evaluators / @Total_Participants) * 100
										END
	--SELECT @Total_Evaluators_Percentage
 
	SELECT @Total_Targets_Completed = Total_Targets_Completed.Completed
	FROM (
		SELECT	CourseId,
				Code, 
		--		COUNT(AggregatedStudentData.EvalutionsRequired) NumberOfStudent, 
				SUM(
					CASE WHEN AggregatedStudentData.[Responsibility and Commitment] = AggregatedStudentData.EvaluationsRequired AND AggregatedStudentData.[Contribution towards Team Effectiveness] = AggregatedStudentData.EvaluationsRequired AND AggregatedStudentData.[Contribution towards Team Deliverables (Quality and Quantity of Work)] = AggregatedStudentData.EvaluationsRequired 
						THEN 1 
						ELSE 0 
					END) Completed
				--	, 
				--COUNT(AggregatedStudentData.EvalutionsRequired) -  
				--	SUM(
				--		CASE WHEN AggregatedStudentData.[Responsibility and Commitment] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Effectiveness] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Deliverables (Quality and Quantity of Work)] = AggregatedStudentData.EvalutionsRequired 
				--			THEN 1 
				--			ELSE 0 
				--		END) Incomplete
				--, PeerFeedbackSessionId
		FROM (
				--Start StudentCompletion
				SELECT	CourseId,
						Code, 
						EvaluatorUserId, 
						SUM([Responsibility and Commitment]) "Responsibility and Commitment", 
						SUM([Contribution towards Team Effectiveness]) "Contribution towards Team Effectiveness", 
						SUM([Contribution towards Team Deliverables (Quality and Quantity of Work)]) "Contribution towards Team Deliverables (Quality and Quantity of Work)", 
						COUNT(EvaluatorUserId) EvaluationsRequired, 
						PeerFeedbackSessionId
				FROM (
					--Start of PeerFeedbackRawData
					SELECT	Courses.Id CourseId,
							Courses.Code, 
							EvaluatorUser.Id EvaluatorUserId,
							EvaluatorUser.DisplayName EvaluatorUserDisplayName,
							TargetUser.Id TargetUserId, 
							TargetUser.DisplayName TargetUserDisplayName, 
							CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
							CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
							CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)", 
							PeerFeedBackPairingSessions.PeerFeedbackSessionId
					FROM PeerFeedBackPairingSessions
					LEFT JOIN PeerFeedbackEvaluators
						ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
					LEFT JOIN PeerFeedbackTargets
						ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
					LEFT JOIN (SELECT DISTINCT 
										EvaluatorUserId, 
										TargetUserId, 
										PeerFeedbackSessionId, 
										PeerFeedbackRatingId, 
										PeerFeedBackResponses.PeerFeedBackGroupId 
								FROM PeerFeedBackResponses 
								WHERE PeerFeedbackQuestionId = 1) Question1
						ON Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
						AND Question1.TargetUserId = PeerFeedbackTargets.UserId 
						AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
						AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
						AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
					LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
						ON Question1.PeerFeedbackRatingId = Q1Rating.Id
					LEFT JOIN (SELECT DISTINCT 
										EvaluatorUserId, 
										TargetUserId, 
										PeerFeedbackSessionId, 
										PeerFeedbackRatingId, 
										PeerFeedBackResponses.PeerFeedBackGroupId 
								FROM PeerFeedBackResponses 
								WHERE PeerFeedbackQuestionId = 2) Question2
						ON Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
						AND Question2.TargetUserId = PeerFeedbackTargets.UserId 
						AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
						AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
						AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
					LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
						ON Question2.PeerFeedbackRatingId = Q2Rating.Id
					LEFT JOIN (SELECT DISTINCT 
										EvaluatorUserId, 
										TargetUserId, 
										PeerFeedbackSessionId, 
										PeerFeedbackRatingId, 
										PeerFeedBackResponses.PeerFeedBackGroupId 
								FROM PeerFeedBackResponses 
								WHERE PeerFeedbackQuestionId = 3) Question3
						ON Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
						AND Question3.TargetUserId = PeerFeedbackTargets.UserId 
						AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
						AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
						AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
					LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
						ON Question3.PeerFeedbackRatingId = Q3Rating.Id
 
					LEFT JOIN CategoryGroups
						ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
					LEFT JOIN CourseCategories
						ON CourseCategories.Id = CategoryGroups.CourseCategoryId
					LEFT JOIN Courses
						ON CourseCategories.CourseId = Courses.Id
 
					LEFT JOIN Users EvaluatorUser
						ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
					LEFT JOIN Users TargetUser
						ON PeerFeedbackTargets.UserId = TargetUser.Id
					LEFT JOIN PeerFeedbackSessions
						ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
					LEFT JOIN PeerFeedback
						ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
 
					LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
						ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		--					LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
		--						ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
 
					WHERE  Courses.Code = @CursorParam_CourseCode
		--						AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
						AND PeerFeedbackSessions.IsDeleted = 0
						AND PeerFeedback.IsDeleted = 0
						AND EvaluatorUser.Id != TargetUser.Id
				) PeerFeedbackRawData
				GROUP BY CourseId, Code, EvaluatorUserId, PeerFeedbackSessionId
		) AggregatedStudentData
		GROUP BY CourseId, 
				Code--, PeerFeedbackSessionId 
	) Total_Targets_Completed
 
	SELECT @Total_Targets_Completed_Percentage = 
												CASE 
													WHEN @Total_Targets_Completed IS NULL OR @Total_Participants IS NULL OR @Total_Targets_Completed = 0 OR @Total_Participants = 0 THEN 0
													WHEN @Total_Targets_Completed &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Targets_Completed / @Total_Participants) * 100
												END
	--SELECT @@Total_Targets_Completed_Percentage
 
	SELECT @Total_Targets = COUNT(TargetUserId)
	FROM (
		SELECT	DISTINCT
				Courses.Id CourseId,
				Courses.Code, 
				TargetUser.Id TargetUserId, 
				TargetUser.DisplayName TargetUserDisplayName,
 
				--CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
				--CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
				--CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",
 
				CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
					THEN 0
					ELSE 1
				END HasEvaluation			
				--, EvaluatorUser.DisplayName EvaluatorUser
				--, PeerFeedBackPairingSessions.PeerFeedBackSessionId
 
		FROM PeerFeedBackPairingSessions
 
		--LEFT JOIN PeerFeedbackEvaluators
		--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
 
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON 
			--Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question1.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
			--AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON 
			--Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question2.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
			--AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON 
			--Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question3.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
			--AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id
 
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		LEFT JOIN Courses
			ON CourseCategories.CourseId = Courses.Id
 
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
 
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
 
		WHERE  Courses.Code = @CursorParam_CourseCode
--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			AND PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
	) Targets
	WHERE Targets.HasEvaluation = 1
	GROUP BY Code
	--SELECT @Total_Targets AS Total_Targets
 
	SELECT @Total_Targets_Percentage = 
									CASE 
										WHEN @Total_Targets IS NULL OR @Total_Participants IS NULL OR @Total_Targets = 0 OR @Total_Participants = 0 THEN 0
										WHEN @Total_Targets &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Targets / @Total_Participants) * 100
									END
	--SELECT @Total_Targets_Percentage
 
	SELECT @Total_Views = COUNT(UserId)--TargetUser)
	FROM (
--		SELECT	DISTINCT
--				Courses.Id CourseId,
--				Courses.Code, 
--				TargetUser.DisplayName TargetUser,
--				Top1Audit.UserId
--		FROM PeerFeedBackPairingSessions
--		LEFT JOIN PeerFeedbackTargets
--			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
--		LEFT JOIN CategoryGroups
--			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
--		LEFT JOIN CourseCategories
--			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
--		LEFT JOIN Courses
--			ON CourseCategories.CourseId = Courses.Id
--		LEFT JOIN Users TargetUser
--			ON PeerFeedbackTargets.UserId = TargetUser.Id
--		OUTER APPLY ( SELECT TOP 1 UserId
--					FROM [Audit]
--					WHERE UserId = TargetUser.Id
--						AND OrgUnitId = Courses.Id
--						AND ResourceId = 8
--						AND Type = 'Click'
--						AND ToolId = 'PeerFeedback'
--					ORDER BY UserId ) Top1Audit
--		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
--			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
----		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
----			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
 
--		WHERE  Courses.Code = @CursorParam_CourseCode
----			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
--			AND Top1Audit.UserId IS NOT NULL
 
 
		SELECT DISTINCT 
				Courses.Id CourseId,
				Courses.Code, 
				[Audit].UserId,
				Users.DisplayName
		FROM Courses		
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		--LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM LMSISIS.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
		--	ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
		INNER JOIN [Audit]
			ON OrgUnitId = Courses.Id
		INNER JOIN Users
			ON Users.Id = [Audit].UserId
 
		WHERE Courses.Code = @CursorParam_CourseCode
			--AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			AND ResourceId = 8
			AND [Type] = 'Click'
			AND ToolId = 'PeerFeedback'
	) [Views]
	GROUP BY Code
	SELECT @Total_Views_Percentage = 
									CASE 
										WHEN @Total_Views IS NULL OR @Total_Participants IS NULL OR @Total_Views = 0 OR @Total_Participants = 0 THEN 0
										WHEN @Total_Views &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Views / @Total_Participants) * 100
									END
	--SELECT @Total_Views_Percentage
 
	INSERT INTO #OverallResponseRate
	SELECT @CursorParam_AcademicGroup As AcademicGroup 
		, @CursorParam_CourseCode AS CourseCode
		, @CursorParam_Instructor AS Instructor
		, @Total_Participants AS Total_Participants 
		, @Total_Evaluators AS Total_Evaluators
		, CAST(CEILING(ISNULL(@Total_Evaluators_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Evaluators_Percentage
		, @Total_Targets_Completed AS Total_Targets_Completed
		, CAST(CEILING(ISNULL(@Total_Targets_Completed_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Targets_Completed_Percentage
		, @Total_Targets AS Total_Targets
		, CAST(CEILING(ISNULL(@Total_Targets_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Targets_Percentage
		, @Total_Views AS Total_Views
		, CAST(CEILING(ISNULL(@Total_Views_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Views_Percentage
 
	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseCode, @CursorParam_AcademicGroup, @CursorParam_Instructor
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS
 
SELECT * FROM #OverallResponseRate
 
--DROP TABLE IF EXISTS #WhitelistedCourses
--DROP TABLE IF EXISTS #OverallResponseRate</value>
  </data>
  <data name="overall_response_rate_by_studentschool_intakeyear" xml:space="preserve">
    <value>--DROP TABLE #WhitelistedCourses
--DROP TABLE #Temp_Users
--DROP TABLE #QueryFilters
--DROP TABLE #OverallResponseRate

--DROP TABLE IF EXISTS #WhitelistedCourses
--DROP TABLE IF EXISTS #Temp_Users
--DROP TABLE IF EXISTS #QueryFilters
--DROP TABLE IF EXISTS #OverallResponseRate


IF OBJECT_ID('tempdb.dbo.#WhitelistedCourses', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourses; 
CREATE TABLE #WhitelistedCourses
(
	CourseId VARCHAR(24)
)

INSERT INTO #WhitelistedCourses
SELECT Courses.Id
FROM Courses
WHERE Courses.Id IN @SelectedCourses
	--(360280, 360850, 360163, 360572, 360675, 360080, 360097, 360950, 360546, 360752, 360684, 360323, 360569, 361162, 360532, 359908, 361211, 360324, 360673, 360956, 359817, 360123, 360836, 360856, 360158, 360753, 364480, 359803, 360444, 360381, 361022, 360667, 360235, 360959, 360510, 359806, 359875, 360714, 364661, 359892, 360923, 360528, 361017, 359984, 360078, 360860, 360244, 359809, 360058, 359958, 360356, 360688, 358258, 360694, 360459, 361137, 359873, 360666, 360769, 359913, 360311, 359813, 359807, 359976, 360686, 361221, 360623, 361018, 360508)
--SELECT * FROM #WhitelistedCourses

IF OBJECT_ID('tempdb.dbo.#Temp_Users', 'U') IS NOT NULL
	DROP TABLE #Temp_Users; 
CREATE TABLE #Temp_Users
(
	Id INT,
	SchoolCode NVARCHAR(50),
	AcademicYear INT
)

INSERT INTO #Temp_Users
SELECT Id,
		REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') SchoolCode,
		--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear
		DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), GETDATE()) + IIF(MONTH(GETDATE()) &lt; 8, 0, 1) + IIF(MONTH(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) &lt; 8, 1, 0) AS AcademicYear
FROM Users
--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
--LEFT JOIN STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW
--	ON Users.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID
INNER JOIN (SELECT EMPLID, MAX(TERM_BEGIN_DT) TERM_BEGIN_DT 
			--FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW 
			FROM LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
			WHERE ACAD_PROG &lt; 200 OR ACAD_PROG = 515 GROUP BY EMPLID) A 
	ON Users.OrgDefinedId = A.EMPLID
WHERE YEAR(SYSDATETIME()) - YEAR(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) + 1 &lt; 10
ORDER BY SchoolCode

--DROP TABLE IF EXISTS #Temp_Courses
--CREATE TABLE #Temp_Courses
--(
--	CategoryGroupId INT,
--	CourseCategoryId INT,
--	CourseId INT
--)
--INSERT INTO #Temp_Courses
--SELECT CategoryGroups.Id,
--		CourseCategories.Id,
--		Courses.Id
--FROM CategoryGroups
--LEFT JOIN CourseCategories
--	ON CourseCategories.Id = CategoryGroups.CourseCategoryId
--LEFT JOIN Courses
--	ON CourseCategories.CourseId = Courses.Id
--WHERE Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)

IF OBJECT_ID('tempdb.dbo.#QueryFilters', 'U') IS NOT NULL
	DROP TABLE #QueryFilters; 
CREATE TABLE #QueryFilters
(
	SchoolCode NVARCHAR(50),
	AcademicYear INT
)

;WITH
Programs AS (
	SELECT DISTINCT SchoolCode
	FROM (
		SELECT	--DISTINCT
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode]
				SchoolCode
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN #Temp_Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		WHERE 
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0

		UNION

		SELECT	--DISTINCT
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode]
				SchoolCode
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		LEFT JOIN #Temp_Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		WHERE
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0

		UNION

		SELECT NULL
	) SchoolCodes
),
AcademicYears AS (
	SELECT Years
	FROM (VALUES (0), (1), (2), (3), (4), (5), (6), (7), (8), (9)) v(Years)
)

INSERT INTO #QueryFilters
SELECT SchoolCode,
		AcademicYears.Years
FROM Programs 
CROSS JOIN AcademicYears
--SELECT * FROM #QueryFilters

DECLARE @Total_Participants DECIMAL(8, 2)
DECLARE @Total_Evaluators DECIMAL(8, 2)
DECLARE @Total_Targets_Completed DECIMAL(8, 2)
DECLARE @Total_Targets DECIMAL(8, 2)
DECLARE @Total_Views DECIMAL(8, 2)
DECLARE @Total_Evaluators_Percentage DECIMAL(8, 2)
DECLARE @Total_Targets_Completed_Percentage DECIMAL(8, 2)
DECLARE @Total_Targets_Percentage DECIMAL(8, 2)
DECLARE @Total_Views_Percentage DECIMAL(8, 2)

DECLARE @CursorParam_SchoolCode NVARCHAR(50)
DECLARE @CursorParam_AcademicYear INT

IF OBJECT_ID('tempdb.dbo.#OverallResponseRate', 'U') IS NOT NULL
	DROP TABLE #OverallResponseRate; 
CREATE TABLE #OverallResponseRate
(
	StudentSchool NVARCHAR(50),
	StudentYear INT,
	Total_Participants DECIMAL(8, 2),
	Total_Evaluators DECIMAL(8, 2),
	Total_Evaluators_Percentage NVARCHAR(5),
	Total_Targets_Completed DECIMAL(8, 2),
	Total_Targets_Completed_Percentage NVARCHAR(5),
	Total_Targets DECIMAL(8, 2),
	Total_Targets_Percentage NVARCHAR(5),
	Total_Views DECIMAL(8, 2),
	Total_Views_Percentage NVARCHAR(5)
)

DECLARE CURSOR_FILTERS CURSOR FOR

	SELECT SchoolCode, AcademicYear FROM #QueryFilters

OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_SchoolCode, @CursorParam_AcademicYear
WHILE @@FETCH_STATUS = 0
BEGIN
	--SELECT @CursorParam_CourseCode, @CursorParam_AcademicYear

	SET @Total_Participants = 0.0
	SET @Total_Evaluators = 0.0
	SET @Total_Targets_Completed = 0.0
	SET @Total_Targets = 0.0
	SET @Total_Views = 0.0
	SET @Total_Evaluators_Percentage = 0.0
	SET @Total_Targets_Completed_Percentage = 0.0
	SET @Total_Targets_Percentage = 0.0
	SET @Total_Views_Percentage = 0.0
	
	SELECT @Total_Participants = COUNT(*)
	FROM (
		SELECT	DISTINCT
				Courses.CourseId CourseId,
				--Courses.Code, 
				EvaluatorUser.Id EvaluatorUserId,
				--EvaluatorUser.DisplayName EvaluatorUserDisplayName,
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode],
				--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear
				SchoolCode,
				AcademicYear
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		--	ON CourseCategories.CourseId = Courses.Id
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN #Temp_Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code				
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
		--	ON EvaluatorUser.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID
		WHERE 
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			--AND ISNULL(REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg',''), '') = @CursorParam_SchoolCode
			--AND ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 = @CursorParam_AcademicYear
			AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
			AND AcademicYear = @CursorParam_AcademicYear
		UNION

		SELECT	DISTINCT
				Courses.CourseId CourseId,
				--Courses.Code, 
				TargetUser.Id TargetUserId,
				--TargetUser.DisplayName TargetUserDisplayName,
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode],
				--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear
				SchoolCode,
				AcademicYear
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		--	ON CourseCategories.CourseId = Courses.Id
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users TargetUser
		--	ON PeerFeedbackTargets.UserId = TargetUser.Id
		LEFT JOIN #Temp_Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
		--	ON TargetUser.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID
		WHERE
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			--AND ISNULL(REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg',''), '') = @CursorParam_SchoolCode
			--AND ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 = @CursorParam_AcademicYear
			AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
			AND AcademicYear = @CursorParam_AcademicYear
	) Participants
	--WHERE ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
	--	AND AcademicYear = @CursorParam_AcademicYear
	--SELECT @Total_Participants AS Total_Participants

	SELECT @Total_Evaluators = COUNT(EvaluatorUserId)
	FROM (
		SELECT	DISTINCT
				Courses.CourseId CourseId,
				--Courses.Code, 
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode],
				--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear,
				EvaluatorUser.Id EvaluatorUserId,
				--EvaluatorUser.DisplayName EvaluatorUserDisplayName,

				CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
					THEN 0
					ELSE 1
				END HasEvaluated,

				--, PeerFeedBackPairingSessions.PeerFeedBackSessionId
				SchoolCode,
				AcademicYear
		FROM PeerFeedBackPairingSessions

		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		--LEFT JOIN PeerFeedbackTargets
		--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId

		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND Question1.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
			AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
			--AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND Question2.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
			AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
			--AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND Question3.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
			AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
			--AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id

		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		--	ON CourseCategories.CourseId = Courses.Id
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId

		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN #Temp_Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id

		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID

		--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
		--	ON EvaluatorUser.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID

		WHERE
		--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses) 
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			--AND DisplayName = 'Student S1505'
			--AND ISNULL(REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg',''), '') = @CursorParam_SchoolCode
			--AND ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 = @CursorParam_AcademicYear
			AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
			AND AcademicYear = @CursorParam_AcademicYear
	) Evaluations
	WHERE Evaluations.HasEvaluated = 1
	--GROUP BY Code	
	--SELECT @Total_Evaluators AS Total_Evaluators

	SELECT @Total_Evaluators_Percentage = 
										CASE 
											WHEN @Total_Evaluators IS NULL OR @Total_Participants IS NULL OR @Total_Evaluators = 0 OR @Total_Participants = 0 THEN 0
											WHEN @Total_Evaluators &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Evaluators / @Total_Participants) * 100
										END
	--SELECT @Total_Evaluators_Percentage

	SELECT @Total_Targets_Completed = Total_Targets_Completed.Completed
	FROM (
		SELECT	
				SchoolCode,
				AcademicYear,
				--CourseId,
				--Code, 
		--		COUNT(AggregatedStudentData.EvalutionsRequired) NumberOfStudent, 
				SUM(
					CASE WHEN AggregatedStudentData.[Responsibility and Commitment] = AggregatedStudentData.EvaluationsRequired 
							AND AggregatedStudentData.[Contribution towards Team Effectiveness] = AggregatedStudentData.EvaluationsRequired 
							AND AggregatedStudentData.[Contribution towards Team Deliverables (Quality and Quantity of Work)] = AggregatedStudentData.EvaluationsRequired 
						THEN 1 
						ELSE 0 
					END) Completed
				--	, 
				--COUNT(AggregatedStudentData.EvalutionsRequired) -  
				--	SUM(
				--		CASE WHEN AggregatedStudentData.[Responsibility and Commitment] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Effectiveness] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Deliverables (Quality and Quantity of Work)] = AggregatedStudentData.EvalutionsRequired 
				--			THEN 1 
				--			ELSE 0 
				--		END) Incomplete
				--, PeerFeedbackSessionId
		FROM (
				--Start StudentCompletion
				SELECT	
						CourseId,
						--Code, 
						EvaluatorUserId, 
						SchoolCode,
						AcademicYear,
						SUM([Responsibility and Commitment]) "Responsibility and Commitment", 
						SUM([Contribution towards Team Effectiveness]) "Contribution towards Team Effectiveness", 
						SUM([Contribution towards Team Deliverables (Quality and Quantity of Work)]) "Contribution towards Team Deliverables (Quality and Quantity of Work)", 
						COUNT(EvaluatorUserId) EvaluationsRequired, 
						PeerFeedbackSessionId
				FROM (
					--Start of PeerFeedbackRawData
					SELECT	Courses.CourseId,
							--Courses.Code, 
							EvaluatorUser.Id EvaluatorUserId,
							--EvaluatorUser.DisplayName EvaluatorUserDisplayName,
							EvaluatorUser.SchoolCode,
							EvaluatorUser.AcademicYear,
							TargetUser.Id TargetUserId, 
							--TargetUser.DisplayName TargetUserDisplayName, 
							CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
							CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
							CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)", 
							PeerFeedBackPairingSessions.PeerFeedbackSessionId
					FROM PeerFeedBackPairingSessions
					LEFT JOIN PeerFeedbackEvaluators
						ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
					LEFT JOIN PeerFeedbackTargets
						ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
					LEFT JOIN (SELECT DISTINCT 
										EvaluatorUserId, 
										TargetUserId, 
										PeerFeedbackSessionId, 
										PeerFeedbackRatingId, 
										PeerFeedBackResponses.PeerFeedBackGroupId 
								FROM PeerFeedBackResponses 
								WHERE PeerFeedbackQuestionId = 1
									AND EvaluatorUserId != TargetUserId) Question1
						ON Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
						AND Question1.TargetUserId = PeerFeedbackTargets.UserId 
						AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
						AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
						AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
					LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
						ON Question1.PeerFeedbackRatingId = Q1Rating.Id
					LEFT JOIN (SELECT DISTINCT 
										EvaluatorUserId, 
										TargetUserId, 
										PeerFeedbackSessionId, 
										PeerFeedbackRatingId, 
										PeerFeedBackResponses.PeerFeedBackGroupId 
								FROM PeerFeedBackResponses 
								WHERE PeerFeedbackQuestionId = 2
									AND EvaluatorUserId != TargetUserId) Question2
						ON Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
						AND Question2.TargetUserId = PeerFeedbackTargets.UserId 
						AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
						AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
						AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
					LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
						ON Question2.PeerFeedbackRatingId = Q2Rating.Id
					LEFT JOIN (SELECT DISTINCT 
										EvaluatorUserId, 
										TargetUserId, 
										PeerFeedbackSessionId, 
										PeerFeedbackRatingId, 
										PeerFeedBackResponses.PeerFeedBackGroupId 
								FROM PeerFeedBackResponses 
								WHERE PeerFeedbackQuestionId = 3
									AND EvaluatorUserId != TargetUserId) Question3
						ON Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
						AND Question3.TargetUserId = PeerFeedbackTargets.UserId 
						AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
						AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
						AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
					LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
						ON Question3.PeerFeedbackRatingId = Q3Rating.Id

					LEFT JOIN CategoryGroups
						ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
					LEFT JOIN CourseCategories
						ON CourseCategories.Id = CategoryGroups.CourseCategoryId
					--LEFT JOIN Courses
					--	ON CourseCategories.CourseId = Courses.Id
					INNER JOIN #WhitelistedCourses Courses
						ON CourseCategories.CourseId = Courses.CourseId
					LEFT JOIN #Temp_Users EvaluatorUser
						ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
					LEFT JOIN #Temp_Users TargetUser
						ON PeerFeedbackTargets.UserId = TargetUser.Id
		
					LEFT JOIN PeerFeedbackSessions
						ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
					LEFT JOIN PeerFeedback
						ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId

					--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
					--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		--					LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
		--						ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID

					WHERE  --Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)
		--						AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
						--AND 
						PeerFeedbackSessions.IsDeleted = 0
						AND PeerFeedback.IsDeleted = 0
						AND EvaluatorUser.Id != TargetUser.Id
						AND ISNULL(EvaluatorUser.SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
						AND EvaluatorUser.AcademicYear = @CursorParam_AcademicYear
				) PeerFeedbackRawData
				--WHERE ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
				--	AND AcademicYear = @CursorParam_AcademicYear
				GROUP BY SchoolCode, 
						AcademicYear, --
						CourseId, --Code, 
						EvaluatorUserId, 
						PeerFeedbackSessionId
		) AggregatedStudentData
		WHERE EvaluationsRequired &gt; 0
		GROUP BY SchoolCode, AcademicYear --CourseId, 
				--Code--, PeerFeedbackSessionId 
	) Total_Targets_Completed

	SELECT @Total_Targets_Completed_Percentage = 
												CASE 
													WHEN @Total_Targets_Completed IS NULL OR @Total_Participants IS NULL OR @Total_Targets_Completed = 0 OR @Total_Participants = 0 THEN 0
													WHEN @Total_Targets_Completed &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Targets_Completed / @Total_Participants) * 100
												END
	--SELECT @@Total_Targets_Completed_Percentage

	SELECT @Total_Targets = COUNT(TargetUserId)
	FROM (
		SELECT	DISTINCT
				Courses.CourseId CourseId,
				--Courses.Code, 
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode],
				--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear,
				TargetUser.Id TargetUserId, 
				--TargetUser.DisplayName TargetUserDisplayName, 

				--CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment", 
				--CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness", 
				--CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",

				CASE WHEN Q1Rating.Name IS NULL AND Q2Rating.Name IS NULL AND Q3Rating.Name IS NULL
					THEN 0
					ELSE 1
				END HasEvaluation,
			
				--, EvaluatorUser.DisplayName EvaluatorUser
				--, PeerFeedBackPairingSessions.PeerFeedBackSessionId
				SchoolCode,
				AcademicYear

		FROM PeerFeedBackPairingSessions

		--LEFT JOIN PeerFeedbackEvaluators
		--	ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId

		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON 
			--Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question1.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId 
			--AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON 
			--Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question2.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId  
			--AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT 
							EvaluatorUserId, 
							TargetUserId, 
							PeerFeedbackSessionId, 
							PeerFeedbackRatingId, 
							PeerFeedBackResponses.PeerFeedBackGroupId 
					FROM PeerFeedBackResponses 
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON 
			--Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId 
			--AND 
			Question3.TargetUserId = PeerFeedbackTargets.UserId 
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId 
			--AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId 
			AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id

		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackTargets.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		--LEFT JOIN Courses
		--	ON CourseCategories.CourseId = Courses.Id
		INNER JOIN #WhitelistedCourses Courses
			ON CourseCategories.CourseId = Courses.CourseId
		--LEFT JOIN Users EvaluatorUser
		--	ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		--LEFT JOIN Users TargetUser
		--	ON PeerFeedbackTargets.UserId = TargetUser.Id
		LEFT JOIN #Temp_Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id

		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--		LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
--			ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID

		--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
		--	ON TargetUser.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID

		WHERE 
			--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)
--			AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
			AND AcademicYear = @CursorParam_AcademicYear
	) Targets
	WHERE Targets.HasEvaluation = 1		
	--GROUP BY Code
	--SELECT @Total_Targets AS Total_Targets

	SELECT @Total_Targets_Percentage = 
									CASE 
										WHEN @Total_Targets IS NULL OR @Total_Participants IS NULL OR @Total_Targets = 0 OR @Total_Participants = 0 THEN 0
										WHEN @Total_Targets &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Targets / @Total_Participants) * 100
									END
	--SELECT @Total_Targets_Percentage

	SELECT @Total_Views = COUNT(UserId)--TargetUser)
	FROM (
		SELECT DISTINCT 
				Courses.CourseId,
				--Courses.Code, 
				--REPLACE(RIGHT(EmailAddress, LEN(EmailAddress) - CHARINDEX('@',EmailAddress)),'.smu.edu.sg','') [SchoolCode],
				--ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), SYSDATETIME()), 0) + 1 AS AcademicYear,
				[Audit].UserId,
				--Users.DisplayName
				SchoolCode,
				AcademicYear
		FROM #WhitelistedCourses Courses		
		--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
		--	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
		--LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM LMSISIS.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V 
		--	ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
		INNER JOIN [Audit]
			ON OrgUnitId = Courses.CourseId
		--INNER JOIN Users
		--	ON Users.Id = [Audit].UserId
		INNER JOIN #Temp_Users Users
			ON Users.Id = [Audit].UserId
			
		--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
		--	ON Users.OrgDefinedId = PS_SIS_LMS_SPRG_VW.EMPLID

		WHERE 
			--Courses.Id IN (SELECT CourseId FROM #WhitelistedCourses)
			--AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			--AND 
			ResourceId = 8
			AND [Type] = 'Click'
			AND ToolId = 'PeerFeedback'
			AND ISNULL(SchoolCode, '') = ISNULL(@CursorParam_SchoolCode, '')
		AND AcademicYear = @CursorParam_AcademicYear
	) [Views]
	--GROUP BY Code
	
	SELECT @Total_Views_Percentage = 
									CASE 
										WHEN @Total_Views IS NULL OR @Total_Participants IS NULL OR @Total_Views = 0 OR @Total_Participants = 0 THEN 0
										WHEN @Total_Views &gt; 0 AND @Total_Participants &gt; 0 THEN (@Total_Views / @Total_Participants) * 100
									END
	--SELECT @Total_Views_Percentage

	IF @Total_Participants &gt; 0 
		BEGIN
			INSERT INTO #OverallResponseRate
			SELECT @CursorParam_SchoolCode As SchoolCode 
				, @CursorParam_AcademicYear AS AcademicYear
				, @Total_Participants AS Total_Participants 
				, @Total_Evaluators AS Total_Evaluators
				, CAST(CEILING(ISNULL(@Total_Evaluators_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Evaluators_Percentage
				, @Total_Targets_Completed AS Total_Targets_Completed
				, CAST(CEILING(ISNULL(@Total_Targets_Completed_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Targets_Completed_Percentage
				, @Total_Targets AS Total_Targets
				, CAST(CEILING(ISNULL(@Total_Targets_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Targets_Percentage
				, @Total_Views AS Total_Views
				, CAST(CEILING(ISNULL(@Total_Views_Percentage, 0)) AS NVARCHAR(3)) + '%' AS Total_Views_Percentage
		END

	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_SchoolCode, @CursorParam_AcademicYear
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS

SELECT * FROM #OverallResponseRate

--DROP TABLE IF EXISTS #WhitelistedCourses
--DROP TABLE IF EXISTS #OverallResponseRate</value>
  </data>
  <data name="student_result" xml:space="preserve">
    <value>-- student-result-with-descriptors.sql

USE LMSTools
GO



IF OBJECT_ID('tempdb.dbo.#WhitelistedCourse', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourse; 
SELECT Courses.Id AS CourseId,
		Courses.Code AS CourseCode,
		STUFF((SELECT '; ' + Users.DisplayName
		FROM UserEnrollments
		INNER JOIN Users
			ON Users.Id = UserEnrollments.UserId
		WHERE UserEnrollments.CourseId = Courses.Id
			AND UserEnrollments.RoleId = 106
		ORDER BY Users.DisplayName
		FOR XML PATH('')), 1, 1, '') AS Instructor
INTO #WhitelistedCourse
FROM Courses
LEFT JOIN LMSISIS.dbo.TL_CourseOfferings 
	ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
WHERE Courses.Id IN @SelectedCourses
-- 2023-24 TERM 1
--(360280, 360850, 360163, 360572, 360675, 360080, 360097, 360950, 360546, 360752, 360684, 360323, 360569, 361162, 360532, 359908, 361211, 360324, 360673, 360956, 359817, 360123, 360836, 360856, 360158, 360753, 364480, 359803, 360444, 360381, 361022, 360667, 360235, 360959, 360510, 359806, 359875, 360714, 364661, 359892, 360923, 360528, 361017, 359984, 360078, 360860, 360244, 359809, 360058, 359958, 360356, 360688, 358258, 360694, 360459, 361137, 359873, 360666, 360769, 359913, 360311, 359813, 359807, 359976, 360686, 361221, 360623, 361018, 360508)

-- 2022-23 TERM 1 (55 Course Id)
	--(117846, 329392, 329581, 328765, 329737, 329477, 328931, 329832, 329733, 329394, 328768, 328940, 329583, 329674, 329923, 328944, 329244, 328806, 328713, 328636, 329076, 328726, 329542, 329167, 328822, 328894, 329355, 328988, 329078, 329252, 329975, 328985, 329084, 329452, 328650, 329262, 329174, 329640, 328825, 329897, 329710, 329799, 328734, 329265, 328828, 329086, 329173, 329898, 328994, 329644, 329643, 329554, 328740, 329901, 329998)

-- 2022-23 TERM 2 (54 Course Id)
	--(344128, 344688, 345009, 344693, 345254, 344614, 344780, 345177, 345345, 344694, 344938, 345255, 344861, 344545, 344940, 345180, 344547, 344788, 345260, 345368, 345270, 344708, 344232, 345127, 344570, 345129, 345376, 344486, 344413, 345060, 344735, 345216, 344654, 344832, 344836, 345392, 344588, 345152, 344977, 344587, 344658, 345238, 345156, 344842, 345308, 344908, 344518, 344430, 344910, 344189, 344760, 344194, 344351, 344525)
-- 2023-24 TERM 2
-- orgunitids of 2023-24 Term 2 IS213 
--(375508, 375511, 376136, 376239, 376326, 376328, 376330, 376515, 376516, 376657,
-- orgunitids of 2023-24 Term 2 COR1307sss
--376194, 376190,
-- orgunitids of 2023-24 Term 2 IS214 
--376415, 375343, 375594, 376414, 375513, 376589, 375431, 375337, 376137, 375754,
-- orgunitids of 2023-24 Term 2 CS460 --&gt;
--(375581)
--SELECT * FROM #WhitelistedCourse




IF OBJECT_ID('tempdb.dbo.#StudentCompletionAsEvaluator', 'U') IS NOT NULL
	DROP TABLE #StudentCompletionAsEvaluator; 
SELECT	CoursesId,
		CoursesCode,
		Instructor,

		EvaluatorUserId,
		EvaluatorUserDisplayName,
		EvaluatorUserEmailAddress,
		--TargetUserId,
		--TargetUserDisplayName,
		--TargetUserEmailAddress,

--		COUNT(AggregatedStudentData.EvalutionsRequired) NumberOfStudent,
		CASE WHEN [Responsibility and Commitment] = EvaluationsRequired 
				AND [Contribution towards Team Effectiveness] = EvaluationsRequired 
				AND [Contribution towards Team Deliverables (Quality and Quantity of Work)] = EvaluationsRequired
			THEN 'COMPLETED'
			ELSE 'INCOMPLETE'
		END [Status],
		--	,
		--COUNT(AggregatedStudentData.EvalutionsRequired) - 
		--	SUM(
		--		CASE WHEN AggregatedStudentData.[Responsibility and Commitment] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Effectiveness] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Deliverables (Quality and Quantity of Work)] = AggregatedStudentData.EvalutionsRequired
		--			THEN 1
		--			ELSE 0
		--		END) Incomplete
		--, PeerFeedbackSessionId
		DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), GETDATE()) + IIF(MONTH(GETDATE()) &lt; 8, 0, 1) + IIF(MONTH(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) &lt; 8, 1, 0) AS AcademicYear,
		PeerFeedBackSessionId,
		PeerFeedbackSessionsLabel,
		CategoryGroupsId,
		CategoryGroupsName,
		PeerFeedBackPairingId
INTO #StudentCompletionAsEvaluator
FROM (
	--Start StudentCompletion
	SELECT	CoursesId,
			CoursesCode,
			Instructor,

			EvaluatorUserId,
			EvaluatorUserDisplayName,
			EvaluatorUserEmailAddress, 
			--TargetUserId,
			--TargetUserDisplayName,
			--TargetUserEmailAddress,

			SUM([Responsibility and Commitment]) "Responsibility and Commitment",
			SUM([Contribution towards Team Effectiveness]) "Contribution towards Team Effectiveness",
			SUM([Contribution towards Team Deliverables (Quality and Quantity of Work)]) "Contribution towards Team Deliverables (Quality and Quantity of Work)",
			COUNT(EvaluatorUserId) EvaluationsRequired,
			PeerFeedbackSessionId,
			PeerFeedbackSessionsLabel,
			CategoryGroupsId,
			CategoryGroupsName,
			PeerFeedBackPairingId
	FROM (
		--Start of PeerFeedbackRawData
		SELECT	Courses.Id AS CoursesId,
				Courses.Code AS CoursesCode, 
				WhitelistedCourse.Instructor,
				EvaluatorUser.Id AS EvaluatorUserId,
				EvaluatorUser.DisplayName AS EvaluatorUserDisplayName,
				EvaluatorUser.EmailAddress AS EvaluatorUserEmailAddress, 
				TargetUser.Id AS TargetUserId, 
				TargetUser.DisplayName AS TargetUserDisplayName, 
				TargetUser.EmailAddress AS TargetUserEmailAddress, 
				CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment",
				CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness",
				CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",
				PeerFeedBackPairingSessions.PeerFeedbackSessionId,
				PeerFeedbackSessions.Label PeerFeedbackSessionsLabel,
				CategoryGroups.Id CategoryGroupsId,
				CategoryGroups.Name CategoryGroupsName,
				PeerFeedBackPairingSessions.PeerFeedBackPairingId
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN (SELECT DISTINCT
							EvaluatorUserId,
							TargetUserId,
							PeerFeedbackSessionId,
							PeerFeedbackRatingId,
							PeerFeedBackResponses.PeerFeedBackGroupId
					FROM PeerFeedBackResponses
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId
			AND Question1.TargetUserId = PeerFeedbackTargets.UserId
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId
			AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId
			AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT
							EvaluatorUserId,
							TargetUserId,
							PeerFeedbackSessionId,
							PeerFeedbackRatingId,
							PeerFeedBackResponses.PeerFeedBackGroupId
					FROM PeerFeedBackResponses
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId
			AND Question2.TargetUserId = PeerFeedbackTargets.UserId
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId 
			AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId
			AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT
							EvaluatorUserId,
							TargetUserId,
							PeerFeedbackSessionId,
							PeerFeedbackRatingId,
							PeerFeedBackResponses.PeerFeedBackGroupId
					FROM PeerFeedBackResponses
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId
			AND Question3.TargetUserId = PeerFeedbackTargets.UserId
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId
			AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId
			AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating					
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		LEFT JOIN Courses
			ON CourseCategories.CourseId = Courses.Id
		LEFT JOIN Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--					LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V
--						ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
		INNER JOIN #WhitelistedCourse WhitelistedCourse
			ON CourseCategories.CourseId = WhitelistedCourse.CourseId
		WHERE 
--			Courses.Code = @CursorParam_CourseCode
----						AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			AND EvaluatorUser.Id != TargetUser.Id
			--AND TargetUser.Id in (64620) --71021, 51565)
			and CategoryGroups.Id in (378505)--, 371929)
			--AND Question1.PeerFeedBackGroupId IS NOT NULL
			--AND Question2.PeerFeedBackGroupId IS NOT NULL
			--AND Question3.PeerFeedBackGroupId IS NOT NULL
	) PeerFeedbackRawData
	GROUP BY CoursesId, 
			CoursesCode, 
			Instructor,

			EvaluatorUserId, 
			EvaluatorUserDisplayName, 
			EvaluatorUserEmailAddress, 
			--TargetUserId,
			--TargetUserDisplayName,
			--TargetUserEmailAddress,

			PeerFeedbackSessionId,
			PeerFeedbackSessionsLabel,
			CategoryGroupsId,
			CategoryGroupsName,
			PeerFeedBackPairingId
) PeerFeedbackData
INNER JOIN Users
	ON PeerFeedbackData.EvaluatorUserId = Users.Id
INNER JOIN (SELECT EMPLID, MAX(TERM_BEGIN_DT) TERM_BEGIN_DT 
			FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW 
			--FROM LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
			WHERE ACAD_PROG &lt; 200 OR ACAD_PROG IN (515, 508) 
			GROUP BY EMPLID) A 
	ON Users.OrgDefinedId = A.EMPLID  
WHERE EvaluationsRequired &gt; 0
--GROUP BY CourseId,
--		Code--, PeerFeedbackSessionId
--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings
--	ON PeerFeedbackData.CoursesCode = TL_CourseOfferings.CourseOfferingCode
--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_INSTR_V
--	ON TL_CourseOfferings.STRM = PS_SIS_LMS_INSTR_V.STRM AND TL_CourseOfferings.CLASS_NBR = PS_SIS_LMS_INSTR_V.CLASS_NBR
--WHERE TargetUserId = 67837
--SELECT * FROM #StudentCompletionAsEvaluator



IF OBJECT_ID('tempdb.dbo.#StudentCompletion', 'U') IS NOT NULL
	DROP TABLE #StudentCompletion; 
--DROP TABLE IF EXISTS #StudentCompletion
SELECT	PeerFeedbackData.CoursesId,
		PeerFeedbackData.CoursesCode,
		PeerFeedbackData.Instructor,

		--EvaluatorUserId,
		--EvaluatorUserDisplayName,
		--EvaluatorUserEmailAddress,
		TargetUserId,
		TargetUserDisplayName,
		TargetUserEmailAddress,

--		COUNT(AggregatedStudentData.EvalutionsRequired) NumberOfStudent,
		CASE WHEN [Responsibility and Commitment] = EvaluationsRequired 
				AND [Contribution towards Team Effectiveness] = EvaluationsRequired 
				AND [Contribution towards Team Deliverables (Quality and Quantity of Work)] = EvaluationsRequired
			THEN 'COMPLETED'
			ELSE 'INCOMPLETE'
		END [Status],
		--	,
		--COUNT(AggregatedStudentData.EvalutionsRequired) - 
		--	SUM(
		--		CASE WHEN AggregatedStudentData.[Responsibility and Commitment] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Effectiveness] = AggregatedStudentData.EvalutionsRequired AND AggregatedStudentData.[Contribution towards Team Deliverables (Quality and Quantity of Work)] = AggregatedStudentData.EvalutionsRequired
		--			THEN 1
		--			ELSE 0
		--		END) Incomplete
		--, PeerFeedbackSessionId
		DATEDIFF(YEAR, CONVERT(DATETIME, TERM_BEGIN_DT, 103), GETDATE()) + IIF(MONTH(GETDATE()) &lt; 8, 0, 1) + IIF(MONTH(CONVERT(DATETIME, TERM_BEGIN_DT, 103)) &lt; 8, 1, 0) AS AcademicYear,
		PeerFeedbackData.PeerFeedBackSessionId,
		PeerFeedbackData.PeerFeedbackSessionsLabel,
		PeerFeedbackData.CategoryGroupsId,
		PeerFeedbackData.CategoryGroupsName,
		PeerFeedbackData.PeerFeedBackPairingId,
		StudentCompletionAsEvaluator.[Status] AS CompletionAsEvaluator
INTO #StudentCompletion
FROM (
	--Start StudentCompletion
	SELECT	CoursesId,
			CoursesCode,
			Instructor,

			--EvaluatorUserId,
			--EvaluatorUserDisplayName,
			--EvaluatorUserEmailAddress, 
			TargetUserId,
			TargetUserDisplayName,
			TargetUserEmailAddress,

			SUM([Responsibility and Commitment]) "Responsibility and Commitment",
			SUM([Contribution towards Team Effectiveness]) "Contribution towards Team Effectiveness",
			SUM([Contribution towards Team Deliverables (Quality and Quantity of Work)]) "Contribution towards Team Deliverables (Quality and Quantity of Work)",
			COUNT(EvaluatorUserId) EvaluationsRequired,
			PeerFeedbackSessionId,
			PeerFeedbackSessionsLabel,
			CategoryGroupsId,
			CategoryGroupsName,
			PeerFeedBackPairingId
	FROM (
		--Start of PeerFeedbackRawData
		SELECT	Courses.Id AS CoursesId,
				Courses.Code AS CoursesCode, 
				WhitelistedCourse.Instructor,
				EvaluatorUser.Id AS EvaluatorUserId,
				EvaluatorUser.DisplayName AS EvaluatorUserDisplayName,
				EvaluatorUser.EmailAddress AS EvaluatorUserEmailAddress, 
				TargetUser.Id AS TargetUserId, 
				TargetUser.DisplayName AS TargetUserDisplayName, 
				TargetUser.EmailAddress AS TargetUserEmailAddress, 
				CASE WHEN Q1Rating.Name IS NULL THEN 0 ELSE 1 END "Responsibility and Commitment",
				CASE WHEN Q2Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Effectiveness",
				CASE WHEN Q3Rating.Name IS NULL THEN 0 ELSE 1 END "Contribution towards Team Deliverables (Quality and Quantity of Work)",
				PeerFeedBackPairingSessions.PeerFeedbackSessionId,
				PeerFeedbackSessions.Label PeerFeedbackSessionsLabel,
				CategoryGroups.Id CategoryGroupsId,
				CategoryGroups.Name CategoryGroupsName,
				PeerFeedBackPairingSessions.PeerFeedBackPairingId
		FROM PeerFeedBackPairingSessions
		LEFT JOIN PeerFeedbackEvaluators
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackEvaluators.PeerFeedbackPairingId
		LEFT JOIN PeerFeedbackTargets
			ON PeerFeedBackPairingSessions.PeerFeedbackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
		LEFT JOIN (SELECT DISTINCT
							EvaluatorUserId,
							TargetUserId,
							PeerFeedbackSessionId,
							PeerFeedbackRatingId,
							PeerFeedBackResponses.PeerFeedBackGroupId
					FROM PeerFeedBackResponses
					WHERE PeerFeedbackQuestionId = 1) Question1
			ON Question1.EvaluatorUserId = PeerFeedbackEvaluators.UserId
			AND Question1.TargetUserId = PeerFeedbackTargets.UserId
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question1.PeerFeedbackSessionId
			AND PeerFeedbackEvaluators.OrgUnitId = Question1.PeerFeedBackGroupId
			AND PeerFeedbackTargets.OrgUnitId = Question1.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q1Rating
			ON Question1.PeerFeedbackRatingId = Q1Rating.Id
		LEFT JOIN (SELECT DISTINCT
							EvaluatorUserId,
							TargetUserId,
							PeerFeedbackSessionId,
							PeerFeedbackRatingId,
							PeerFeedBackResponses.PeerFeedBackGroupId
					FROM PeerFeedBackResponses
					WHERE PeerFeedbackQuestionId = 2) Question2
			ON Question2.EvaluatorUserId = PeerFeedbackEvaluators.UserId
			AND Question2.TargetUserId = PeerFeedbackTargets.UserId
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question2.PeerFeedbackSessionId 
			AND PeerFeedbackEvaluators.OrgUnitId = Question2.PeerFeedBackGroupId
			AND PeerFeedbackTargets.OrgUnitId = Question2.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q2Rating
			ON Question2.PeerFeedbackRatingId = Q2Rating.Id
		LEFT JOIN (SELECT DISTINCT
							EvaluatorUserId,
							TargetUserId,
							PeerFeedbackSessionId,
							PeerFeedbackRatingId,
							PeerFeedBackResponses.PeerFeedBackGroupId
					FROM PeerFeedBackResponses
					WHERE PeerFeedbackQuestionId = 3) Question3
			ON Question3.EvaluatorUserId = PeerFeedbackEvaluators.UserId
			AND Question3.TargetUserId = PeerFeedbackTargets.UserId
			AND PeerFeedBackPairingSessions.PeerFeedbackSessionId = Question3.PeerFeedbackSessionId
			AND PeerFeedbackEvaluators.OrgUnitId = Question3.PeerFeedBackGroupId
			AND PeerFeedbackTargets.OrgUnitId = Question3.PeerFeedBackGroupId
		LEFT JOIN PeerFeedbackRatingQuestion Q3Rating					
			ON Question3.PeerFeedbackRatingId = Q3Rating.Id
		LEFT JOIN CategoryGroups
			ON CategoryGroups.Id = PeerFeedbackEvaluators.OrgUnitId
		LEFT JOIN CourseCategories
			ON CourseCategories.Id = CategoryGroups.CourseCategoryId
		LEFT JOIN Courses
			ON CourseCategories.CourseId = Courses.Id
		LEFT JOIN Users EvaluatorUser
			ON PeerFeedbackEvaluators.UserId = EvaluatorUser.Id
		LEFT JOIN Users TargetUser
			ON PeerFeedbackTargets.UserId = TargetUser.Id
		LEFT JOIN PeerFeedbackSessions
			ON PeerFeedbackSessions.Id = PeerFeedBackPairingSessions.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback
			ON PeerFeedback.Id = PeerFeedbackSessions.PeerFeedbackId
		LEFT JOIN LMSISIS.dbo.TL_CourseOfferings
			ON TL_CourseOfferings.CourseOfferingCode = Courses.Code
--					LEFT JOIN (SELECT DISTINCT SMU_CRSE_CD, ACAD_GROUP FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_CLASS_V) PS_SIS_LMS_CLASS_V
--						ON PS_SIS_LMS_CLASS_V.SMU_CRSE_CD = TL_CourseOfferings.COURSE_ID
		INNER JOIN #WhitelistedCourse WhitelistedCourse
			ON CourseCategories.CourseId = WhitelistedCourse.CourseId
		WHERE 
--			Courses.Code = @CursorParam_CourseCode
----						AND PS_SIS_LMS_CLASS_V.ACAD_GROUP = @CursorParam_AcademicGroup
			--AND 
			PeerFeedbackSessions.IsDeleted = 0
			AND PeerFeedback.IsDeleted = 0
			AND EvaluatorUser.Id != TargetUser.Id
			--AND TargetUser.Id in (58482) -- (71021, 51565)
			and CategoryGroups.Id in (378505)--, 371929)
			--AND Question1.PeerFeedBackGroupId IS NOT NULL
			--AND Question2.PeerFeedBackGroupId IS NOT NULL
			--AND Question3.PeerFeedBackGroupId IS NOT NULL
	) PeerFeedbackRawData
	GROUP BY CoursesId, 
			CoursesCode, 
			Instructor,

			--EvaluatorUserId, 
			--EvaluatorUserDisplayName, 
			--EvaluatorUserEmailAddress, 
			TargetUserId,
			TargetUserDisplayName,
			TargetUserEmailAddress,

			PeerFeedbackSessionId,
			PeerFeedbackSessionsLabel,
			CategoryGroupsId,
			CategoryGroupsName,
			PeerFeedBackPairingId
) PeerFeedbackData
INNER JOIN Users
	ON PeerFeedbackData.TargetUserId = Users.Id
INNER JOIN (SELECT EMPLID, MAX(TERM_BEGIN_DT) TERM_BEGIN_DT 
			FROM STMSSQL01.CSPRD.dbo.PS_SIS_LMS_SPRG_VW 
			--FROM LMSISIS.dbo.PS_SIS_LMS_SPRG_VW
			WHERE ACAD_PROG &lt; 200 OR ACAD_PROG IN (515, 508) 
			GROUP BY EMPLID) A 
	ON Users.OrgDefinedId = A.EMPLID
INNER JOIN #StudentCompletionAsEvaluator StudentCompletionAsEvaluator
	ON PeerFeedbackData.CoursesId = StudentCompletionAsEvaluator.CoursesId
	AND PeerFeedbackData.PeerFeedbackSessionId = StudentCompletionAsEvaluator.PeerFeedbackSessionId
	AND PeerFeedbackData.CategoryGroupsId = StudentCompletionAsEvaluator.CategoryGroupsId
	AND PeerFeedbackData.PeerFeedBackPairingId = StudentCompletionAsEvaluator.PeerFeedBackPairingId
	AND PeerFeedbackData.TargetUserId = StudentCompletionAsEvaluator.EvaluatorUserId

WHERE EvaluationsRequired &gt; 0
--GROUP BY CourseId,
--		Code--, PeerFeedbackSessionId
--LEFT JOIN LMSISIS.dbo.TL_CourseOfferings
--	ON PeerFeedbackData.CoursesCode = TL_CourseOfferings.CourseOfferingCode
--LEFT JOIN LMSISIS.dbo.PS_SIS_LMS_INSTR_V
--	ON TL_CourseOfferings.STRM = PS_SIS_LMS_INSTR_V.STRM AND TL_CourseOfferings.CLASS_NBR = PS_SIS_LMS_INSTR_V.CLASS_NBR
--WHERE TargetUserId = 67837
--SELECT * FROM #StudentCompletion



IF OBJECT_ID('tempdb.dbo.#Temp_Responses_Descriptors', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses_Descriptors; 
SELECT ROW_NUMBER() OVER (ORDER BY Responses.PeerFeedBackId) AS PeerFeedBackResponsesId,
		Responses.PeerFeedBackId,
		Responses.PeerFeedBackSessionId,
		Responses.PeerFeedBackQuestionId,
		Responses.TargetUserId,
		Responses.EvaluatorUserId,
		Responses.LastUpdateTime,
		Responses.IsDeleted,
		Responses.PeerFeedBackOptionId,
		Responses.PeerFeedBackRatingId,
		Responses.PeerFeedBackGroupId,
		CoursesId--,
		--CoursesCode
INTO #Temp_Responses_Descriptors
FROM (
		-- GENERATED MEET EXPECTATIONS BASED ON EXCEED EXPECTATIONS 
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedbackQuestionRatingMap.QuestionId AS PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				GETDATE() AS LastUpdateTime,
				0 AS IsDeleted,
				PeerFeedbackQuestionRatingMap.RatingOptionId AS PeerFeedBackOptionId,
				PeerFeedbackQuestionRatingMap.RatingQuestionId AS PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				CoursesId--,
				--CoursesCode
		FROM (SELECT DISTINCT
						PeerFeedBackResponses.TargetUserId,
						PeerFeedBackResponses.PeerFeedBackId,
						PeerFeedBackResponses.EvaluatorUserId,
						PeerFeedBackResponses.PeerFeedBackGroupId,
						PeerFeedBackResponses.PeerFeedBackRatingId,
						PeerFeedBackResponses.PeerFeedBackSessionId,
						PeerFeedBackResponses.PeerFeedBackQuestionId,
						Courses.CourseId AS CoursesId--,
						--Courses.Code AS CoursesCode
				FROM PeerFeedBackResponses
				LEFT JOIN PeerFeedbackSessions 
					ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
				LEFT JOIN PeerFeedback 
					ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
				LEFT JOIN CategoryGroups 
					ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
				LEFT JOIN CourseCategories 
					ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
				--LEFT JOIN Courses 
				--	ON CourseCategories.CourseId = Courses.Id --from course id find course code
				INNER JOIN #WhitelistedCourse Courses
					ON CourseCategories.CourseId = Courses.CourseId
				WHERE PeerFeedback.IsDeleted = 0 
					AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
					AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
					--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
					--AND Courses.Id = 7318
					--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
					--AND PeerFeedbackSessions.Id = 21
					--AND TargetUserId = 2374
					--AND EvaluatorUserId = 1684
					--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
				--ORDER BY EvaluatorUserId
		) PeerFeedBackResponses
		LEFT JOIN PeerFeedbackQuestionRatingMap
			ON PeerFeedbackQuestionRatingMap.QuestionId = PeerFeedBackResponses.PeerFeedBackQuestionId
			AND PeerFeedbackQuestionRatingMap.RatingQuestionId = 2

		UNION

		-- PeerFeedBackResponses
		SELECT --PeerFeedBackResponses.Id,
				PeerFeedBackResponses.PeerFeedBackId,
				PeerFeedBackResponses.PeerFeedBackSessionId,
				PeerFeedBackResponses.PeerFeedBackQuestionId,
				PeerFeedBackResponses.TargetUserId,
				PeerFeedBackResponses.EvaluatorUserId,
				PeerFeedBackResponses.LastUpdateTime,
				PeerFeedBackResponses.IsDeleted AS IsDeleted,
				PeerFeedBackResponses.PeerFeedBackOptionId,
				PeerFeedBackResponses.PeerFeedBackRatingId,
				PeerFeedBackResponses.PeerFeedBackGroupId,
				Courses.CourseId AS CoursesId--,
				--Courses.Code AS CoursesCode
 		FROM PeerFeedBackResponses
		LEFT JOIN PeerFeedbackSessions 
			ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
		LEFT JOIN PeerFeedback 
			ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
		LEFT JOIN CategoryGroups 
			ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
		LEFT JOIN CourseCategories 
			ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
		--LEFT JOIN Courses 
		--	ON CourseCategories.CourseId = Courses.Id --from course id find course code
		INNER JOIN #WhitelistedCourse Courses
			ON CourseCategories.CourseId = Courses.CourseId
		WHERE PeerFeedback.IsDeleted = 0 
			AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
			--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourseCodeAcademicGroup)
			--AND Courses.Id = 7318 
			--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
			--AND PeerFeedbackSessions.Id = 21
			--AND PeerFeedBackResponses.PeerFeedBackRatingId = 3
			--AND TargetUserId = 2374
			--AND EvaluatorUserId = 1684
			--AND PeerFeedBackResponses.PeerFeedBackQuestionId = 3
		--ORDER BY EvaluatorUserId
) Responses
--select * from #Temp_Responses_Descriptors



IF OBJECT_ID('tempdb.dbo.#Temp_Responses', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses; 
--DROP TABLE IF EXISTS #Temp_Responses
SELECT ROW_NUMBER() OVER (ORDER BY PeerFeedBackResponses.PeerFeedBackId) AS PeerFeedBackResponsesId, --PeerFeedBackResponses.Id,
		PeerFeedBackResponses.PeerFeedBackId,
		PeerFeedBackResponses.PeerFeedBackSessionId,
		PeerFeedBackResponses.PeerFeedBackQuestionId,
		PeerFeedBackResponses.TargetUserId,
		PeerFeedBackResponses.EvaluatorUserId,
		PeerFeedBackResponses.LastUpdateTime,
		PeerFeedBackResponses.IsDeleted AS IsDeleted,
		PeerFeedBackResponses.PeerFeedBackOptionId,
		PeerFeedBackResponses.PeerFeedBackRatingId,
		PeerFeedBackResponses.PeerFeedBackGroupId,
		Courses.Id AS CoursesId,
		Courses.Code AS CoursesCode,
		PeerFeedBackPairingSessions.PeerFeedBackPairingId--, 
		--PeerFeedBackResponseRemarks.Remarks
INTO #Temp_Responses
FROM PeerFeedBackResponses
LEFT JOIN PeerFeedbackSessions 
	ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
LEFT JOIN PeerFeedback 
	ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
LEFT JOIN CategoryGroups 
	ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
	AND CategoryGroups.Id = 378505 --------
LEFT JOIN CourseCategories 
	ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
LEFT JOIN Courses 
	ON CourseCategories.CourseId = Courses.Id --from course id find course code
INNER JOIN #WhitelistedCourse WhitelistedCourse
	ON CourseCategories.CourseId = WhitelistedCourse.CourseId

INNER JOIN PeerFeedbackTargets
	ON PeerFeedbackTargets.OrgUnitId = CategoryGroups.Id
	AND PeerFeedbackTargets.UserId = TargetUserId
INNER JOIN PeerFeedBackPairingSessions
	ON PeerFeedBackPairingSessions.PeerFeedBackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
	AND PeerFeedBackPairingSessions.PeerFeedBackSessionId = PeerFeedBackResponses.PeerFeedBackSessionId

--INNER JOIN PeerFeedBackResponseRemarks
--	ON PeerFeedBackResponseRemarks.PeerFeedBackId = PeerFeedBackResponses.PeerFeedBackId
--	AND PeerFeedBackResponseRemarks.PeerFeedBackSessionId = PeerFeedBackResponses.PeerFeedBackSessionId
--	AND PeerFeedBackResponseRemarks.TargetUserId = PeerFeedBackResponses.TargetUserId
--	AND PeerFeedBackResponseRemarks.EvaluatorUserId = PeerFeedBackResponses.EvaluatorUserId
--	--AND PeerFeedBackResponseRemarks.PeerFeedBackOptionId = PeerFeedBackResponses.PeerFeedBackOptionId
--	--AND PeerFeedBackResponseRemarks.PeerFeedBackRatingId = PeerFeedBackResponses.PeerFeedBackRatingId
--	AND PeerFeedBackResponseRemarks.PeerFeedBackGroupId = PeerFeedBackResponses.PeerFeedBackGroupId

WHERE PeerFeedback.IsDeleted = 0 
	AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
	--AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourse)
	--AND PeerFeedBackResponses.EvaluatorUserId != PeerFeedBackResponses.TargetUserId
	--AND TargetUserId = 58482
--SELECT * FROM #Temp_Responses



IF OBJECT_ID('tempdb.dbo.#Temp_Question1', 'U') IS NOT NULL
	DROP TABLE #Temp_Question1; 
--DROP TABLE IF EXISTS #Temp_Question1
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		PeerFeedBackPairingId,
		CoursesId,
		CoursesCode
INTO #Temp_Question1
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 1
	--AND EvaluatorUserId != TargetUserId
--SELECT * FROM #Temp_Question1

IF OBJECT_ID('tempdb.dbo.#Temp_Question2', 'U') IS NOT NULL
	DROP TABLE #Temp_Question2; 
--DROP TABLE IF EXISTS #Temp_Question2
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		PeerFeedBackPairingId,
		CoursesId,
		CoursesCode
INTO #Temp_Question2
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 2
	--AND EvaluatorUserId != TargetUserId
--SELECT * FROM #Temp_Question2

IF OBJECT_ID('tempdb.dbo.#Temp_Question3', 'U') IS NOT NULL
	DROP TABLE #Temp_Question3; 
--DROP TABLE IF EXISTS #Temp_Question3
SELECT DISTINCT 
		EvaluatorUserId, 
		TargetUserId, 
		PeerFeedbackSessionId, 
		PeerFeedBackRatingId, 
		PeerFeedBackGroupId,
		PeerFeedBackPairingId,
		CoursesId,
		CoursesCode 
INTO #Temp_Question3
FROM #Temp_Responses 
WHERE PeerFeedBackQuestionId = 3
	--AND EvaluatorUserId != TargetUserId
--SELECT * FROM #Temp_Question3



DECLARE @CursorParam_CourseId INT
DECLARE @CursorParam_CourseCode VARCHAR(200)
DECLARE @CursorParam_Instructor NVARCHAR(200)
DECLARE @CursorParam_TargetUserId INT
DECLARE @CursorParam_DisplayName NVARCHAR(200)
DECLARE @CursorParam_EmailAddress NVARCHAR(200)
DECLARE @CursorParam_AcademicYear INT
DECLARE @CursorParam_Status NVARCHAR(10)
DECLARE @CursorParam_SessionId INT
DECLARE @CursorParam_SessionLabel NVARCHAR(200)
DECLARE @CursorParam_GroupId INT
DECLARE @CursorParam_GroupName NVARCHAR(200)
DECLARE @CursorParam_PairingId INT
DECLARE @CursorParam_CompletionAsEvaluator NVARCHAR(10)

DECLARE @GroupCount INT
DECLARE @EvaluatorCount INT
DECLARE @EvaluatorCount_All INT
DECLARE @OverallScore INT
DECLARE @OverallScore_Self INT

DECLARE @EE_Count INT
DECLARE @ME_Count INT
DECLARE @BE_Count INT



IF OBJECT_ID('tempdb.dbo.#StudentResult', 'U') IS NOT NULL
	DROP TABLE #StudentResult; 
CREATE TABLE #StudentResult
(
	psfs_courseid INT,
	psfs_coursecode NVARCHAR(200),
	psfs_instructor NVARCHAR(200),
	psfs_sessionid INT,
	psfs_sessionname NVARCHAR(200),
	psfs_groupid INT,
	psfs_groupname NVARCHAR(200),
	psfs_pairingid INT,
	psfs_studentname NVARCHAR(200),
	completion_as_evaluator NVARCHAR(10),
	completion_as_target INT,
	psfs_groupcount INT,
	psfs_evaluatorcount INT,
	psfs_eenumber NVARCHAR(5),
	psfs_menumber NVARCHAR(5),
	psfs_benumber NVARCHAR(5),
	psfs_medianscrore NVARCHAR(50),
	psfs_rcscore NVARCHAR(50),
	psfs_tescore NVARCHAR(50),
	psfs_tdscore NVARCHAR(50),
	evaluator_remarks NVARCHAR(MAX),
	psfs_email NVARCHAR(200),
	intake_year NVARCHAR(4),
	student_year NVARCHAR(7),
	student_school NVARCHAR(50),
	psfs_medianscrore_self NVARCHAR(50),
	psfs_rcscore_self NVARCHAR(50),
	psfs_tescore_self NVARCHAR(50),
	psfs_tdscore_self NVARCHAR(50),
	evaluator_remarks_self NVARCHAR(MAX),

	RC_Meet_Responsive INT,
	RC_Meet_Responsive_Percentage NVARCHAR(5),
	RC_Meet_Attended INT,
	RC_Meet_Attended_Percentage NVARCHAR(5),
	RC_Meet_Completed INT,
	RC_Meet_Completed_Percentage NVARCHAR(5),
	RC_Meet_Prepared INT,
	RC_Meet_Prepared_Percentage NVARCHAR(5),
	RC_Meet_Contributed INT,
	RC_Meet_Contributed_Percentage NVARCHAR(5),
	RC_Exceed_Initiated INT,
	RC_Exceed_Initiated_Percentage NVARCHAR(5),
	RC_Exceed_Demonstrated INT,
	RC_Exceed_Demonstrated_Percentage NVARCHAR(5),
	RC_Exceed_Steered INT,
	RC_Exceed_Steered_Percentage NVARCHAR(5),
	RC_Exceed_Regularly INT,
	RC_Exceed_Regularly_Percentage NVARCHAR(5),
	RC_Below_Unresponsive INT,
	RC_Below_Unresponsive_Percentage NVARCHAR(5),
	RC_Below_Missed INT,
	RC_Below_Missed_Percentage NVARCHAR(5),
	RC_Below_DidNotComplete INT,
	RC_Below_DidNotComplete_Percentage NVARCHAR(5),
	RC_Below_DidNotPrepare INT,
	RC_Below_DidNotPrepare_Percentage NVARCHAR(5),
	RC_Below_DidNotContribute INT,
	RC_Below_DidNotContribute_Percentage NVARCHAR(5),
	CE_Meet_Showed INT,
	CE_Meet_Showed_Percentage NVARCHAR(5),
	CE_Meet_Demonstrated INT,
	CE_Meet_Demonstrated_Percentage NVARCHAR(5),
	CE_Meet_Receptive INT,
	CE_Meet_Receptive_Percentage NVARCHAR(5),
	CE_Meet_Respectful INT,
	CE_Meet_Respectful_Percentage NVARCHAR(5),
	CE_Meet_Shared INT,
	CE_Meet_Shared_Percentage NVARCHAR(5),
	CE_Exceed_Demonstrated INT,
	CE_Exceed_Demonstrated_Percentage NVARCHAR(5),
	CE_Exceed_Initiative INT,
	CE_Exceed_Initiative_Percentage NVARCHAR(5),
	CE_Exceed_Encouraged INT,
	CE_Exceed_Encouraged_Percentage NVARCHAR(5),
	CE_Exceed_Facilitated INT,
	CE_Exceed_Facilitated_Percentage NVARCHAR(5),
	CE_Below_Uncooperative INT,
	CE_Below_Uncooperative_Percentage NVARCHAR(5),
	CE_Below_NotReceptive INT,
	CE_Below_NotReceptive_Percentage NVARCHAR(5),
	CE_Below_Lack INT,
	CE_Below_Lack_Percentage NVARCHAR(5),
	CE_Below_Disrespect INT,
	CE_Below_Disrespect_Percentage NVARCHAR(5),
	CE_Below_Withheld INT,
	CE_Below_Withheld_Percentage NVARCHAR(5),
	CD_Meet_GoodQuality INT,
	CD_Meet_GoodQuality_Percentage NVARCHAR(5),
	CD_Meet_Fair INT,
	CD_Meet_Fair_Percentage NVARCHAR(5),
	CD_Meet_Effective INT,
	CD_Meet_Effective_Percentage NVARCHAR(5),
	CD_Meet_Significantly INT,
	CD_Meet_Significantly_Percentage NVARCHAR(5),
	CD_Exceed_HighQuality INT,
	CD_Exceed_HighQuality_Percentage NVARCHAR(5),
	CD_Exceed_MoreThanFair INT,
	CD_Exceed_MoreThanFair_Percentage NVARCHAR(5),
	CD_Exceed_Contributed INT,
	CD_Exceed_Contributed_Percentage NVARCHAR(5),
	CD_Exceed_VerySignificant INT,
	CD_Exceed_VerySignificant_Percentage NVARCHAR(5),
	CD_Below_PoorQuality INT,
	CD_Below_PoorQuality_Percentage NVARCHAR(5),
	CD_Below_LessThanFair INT,
	CD_Below_LessThanFair_Percentage NVARCHAR(5),
	CD_Below_VeryMinimally INT,
	CD_Below_VeryMinimally_Percentage NVARCHAR(5),
	CD_Below_DidNotPull INT,
	CD_Below_DidNotPull_Percentage NVARCHAR(5)
)



DECLARE CURSOR_FILTERS CURSOR FOR

	SELECT --TOP 4 
			CoursesId,
			CoursesCode,
			Instructor,

			--EvaluatorUserId, 
			--EvaluatorUserDisplayName,
			--EvaluatorUserEmailAddress,
			TargetUserId,
			TargetUserDisplayName,
			TargetUserEmailAddress,

			AcademicYear,
			[Status],
			PeerFeedBackSessionId,
			PeerFeedbackSessionsLabel,
			CategoryGroupsId,
			CategoryGroupsName,
			PeerFeedBackPairingId,
			CompletionAsEvaluator
	FROM #StudentCompletion
	--WHERE Status = 'COMPLETED'
	where TargetUserId in (55532,
58053,
64620,
66142)
--)
OPEN CURSOR_FILTERS
FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseId, @CursorParam_CourseCode, @CursorParam_Instructor, @CursorParam_TargetUserId, @CursorParam_DisplayName, @CursorParam_EmailAddress, @CursorParam_AcademicYear, @CursorParam_Status, @CursorParam_SessionId, @CursorParam_SessionLabel, @CursorParam_GroupId, @CursorParam_GroupName, @CursorParam_PairingId, @CursorParam_CompletionAsEvaluator
WHILE @@FETCH_STATUS = 0
BEGIN
	
	--SELECT @CursorParam_CourseId, @CursorParam_CourseCode, @CursorParam_Instructor, @CursorParam_TargetUserId, @CursorParam_DisplayName, @CursorParam_EmailAddress, @CursorParam_AcademicYear, @CursorParam_Status, @CursorParam_SessionId, @CursorParam_SessionLabel, @CursorParam_GroupId, @CursorParam_GroupName, @CursorParam_PairingId

	SET @GroupCount = 0
	SELECT @GroupCount = (SELECT COUNT(DISTINCT UserId)
						FROM PeerFeedbackTargets
						INNER JOIN PeerFeedBackPairingSessions
							ON PeerFeedBackPairingSessions.PeerFeedBackPairingId = PeerFeedbackTargets.PeerFeedbackPairingId
						WHERE OrgUnitId = @CursorParam_GroupId  
							AND UserId != @CursorParam_TargetUserId
							AND PeerFeedBackPairingSessions.PeerFeedBackSessionId = @CursorParam_SessionId
							AND PeerFeedBackPairingSessions. PeerFeedbackPairingId = @CursorParam_PairingId)

	--SET @OverallScore = 0

	SET @EvaluatorCount = 0
	SELECT @EvaluatorCount = (SELECT COUNT(DISTINCT EvaluatorUserId)
							FROM #Temp_Responses
							WHERE TargetUserId != EvaluatorUserId
								AND CoursesCode = @CursorParam_CourseCode
								AND TargetUserId = @CursorParam_TargetUserId
								AND PeerFeedBackSessionId = @CursorParam_SessionId
								AND PeerFeedBackGroupId = @CursorParam_GroupId
								AND PeerFeedBackPairingId = @CursorParam_PairingId)

	SET @EvaluatorCount_All = 0
	SELECT @EvaluatorCount_All = (SELECT COUNT(DISTINCT EvaluatorUserId)
								FROM #Temp_Responses
								WHERE --TargetUserId = EvaluatorUserId
									--AND 
									CoursesCode = @CursorParam_CourseCode
									AND TargetUserId = @CursorParam_TargetUserId
									AND PeerFeedBackSessionId = @CursorParam_SessionId
									AND PeerFeedBackGroupId = @CursorParam_GroupId
									AND PeerFeedBackPairingId = @CursorParam_PairingId)


	--IF @CursorParam_Status = 'INCOMPLETE'
	IF @EvaluatorCount &lt;= 0
		BEGIN
			INSERT INTO #StudentResult
			SELECT	@CursorParam_CourseId AS CourseId,
					@CursorParam_CourseCode AS CourseCode,
					@CursorParam_Instructor AS Instructor,
					@CursorParam_SessionId AS SessionId,
					@CursorParam_SessionLabel AS SessionLabel,
					@CursorParam_GroupId AS GroupId,
					@CursorParam_GroupName AS GroupName,
					@CursorParam_PairingId AS PairingId,
					@CursorParam_DisplayName AS DisplayName,
					@CursorParam_CompletionAsEvaluator AS CompletionAsEvaluator, -- @CursorParam_Status,
					(CAST(@EvaluatorCount AS DECIMAL(10, 2)) / CAST(@GroupCount AS DECIMAL(10, 2)) * 100) AS CompletionAsTarget,
					@GroupCount AS GroupCount,
					@EvaluatorCount AS EvaluatorCount,
					'NA' AS EENumber,
					'NA' AS MENumber,
					'NA' AS BENumber,
					'NA' AS MedianScore,
					'NA' AS RCScore,
					'NA' AS TESCrore,
					'NA' AS TDScore,
					'NA' AS EvaluatorRemarks,
					@CursorParam_EmailAddress AS EmailAddress,
					SUBSTRING(@CursorParam_EmailAddress, CHARINDEX('@', @CursorParam_EmailAddress) - 4, 4), 'Year ' + LTRIM(RTRIM(STR(@CursorParam_AcademicYear))) AS IntakeYear,
					REPLACE(RIGHT(@CursorParam_EmailAddress, LEN(@CursorParam_EmailAddress) - CHARINDEX('@',@CursorParam_EmailAddress)),'.smu.edu.sg','') AS StudentSchool,
					'NA' AS Medianscore_Self,
					'NA' AS RCScore_Self,
					'NA' AS TEScore_Self,
					'NA' AS TDScore_Self,
					'NA' AS EvaluatorRemarks_Self,

					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					'',
					0,
					''
		END
	ELSE
		BEGIN

			SET @OverallScore = 0		
			;WITH CTE_OVERALLSCORE2 AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId 
						FROM #Temp_Responses
						WHERE TargetUserId != EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedBackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) RC
				GROUP BY TargetUserId
			)
			SELECT @OverallScore =
					CASE 
							WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
							WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
							WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END
			FROM CTE_OVERALLSCORE2


			SET @EE_Count = 0
			SET @ME_Count = 0
			SET @BE_Count = 0

			DECLARE @EvaluatorExpectation INT

			DECLARE @CursorParam_EvaluatorUserId INT

			DECLARE CURSOR_EVAL CURSOR FOR

				SELECT DISTINCT EvaluatorUserId
				FROM #Temp_Responses
				WHERE TargetUserId != EvaluatorUserId
					AND CoursesCode = @CursorParam_CourseCode
					AND TargetUserId = @CursorParam_TargetUserId
					AND PeerFeedBackSessionId = @CursorParam_SessionId
					AND PeerFeedBackGroupId = @CursorParam_GroupId
					AND PeerFeedBackPairingId = @CursorParam_PairingId

			OPEN CURSOR_EVAL
			FETCH NEXT FROM CURSOR_EVAL INTO @CursorParam_EvaluatorUserId
			WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @EvaluatorExpectation = 0

				;WITH CTE_COUNT2 AS (
					SELECT TargetUserId, 
							AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
					FROM (
							SELECT DISTINCT 
									EvaluatorUserId, 
									TargetUserId, 
									PeerFeedbackSessionId, 
									PeerFeedBackRatingId, 
									PeerFeedBackGroupId 
							FROM #Temp_Responses
							WHERE TargetUserId != EvaluatorUserId
								AND CoursesCode = @CursorParam_CourseCode
								AND TargetUserId = @CursorParam_TargetUserId
								AND EvaluatorUserId = @CursorParam_EvaluatorUserId
								AND PeerFeedbackSessionId = @CursorParam_SessionId
								AND PeerFeedBackGroupId = @CursorParam_GroupId
								AND PeerFeedBackPairingId = @CursorParam_PairingId
					) RC
					GROUP BY TargetUserId
				)
				SELECT @EvaluatorExpectation =
						CASE 
							WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
							WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
							WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
						END
				FROM CTE_COUNT2

				IF @EvaluatorExpectation = 1
					SET @BE_Count = @BE_Count + 1
				ELSE IF @EvaluatorExpectation = 2
					SET @ME_Count = @ME_Count + 1
				ELSE IF @EvaluatorExpectation = 3
					SET @EE_Count = @EE_Count + 1

				FETCH NEXT FROM CURSOR_EVAL INTO @CursorParam_EvaluatorUserId
			END
			CLOSE CURSOR_EVAL
			DEALLOCATE CURSOR_EVAL


			IF OBJECT_ID('tempdb.dbo.#CTE_RC2', 'U') IS NOT NULL
				DROP TABLE #CTE_RC2; 
			;WITH CTE_RC2 AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId
						FROM #Temp_Question1
						WHERE TargetUserId != EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedbackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) RC
				GROUP BY TargetUserId
			)
			SELECT TargetUserId,
					CASE 
						WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
						WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
						WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END AS [Responsibility and Commitment]
			INTO #CTE_RC2
			FROM CTE_RC2
			--SELECT * FROM #CTE_RC2

	
			IF OBJECT_ID('tempdb.dbo.#CTE_CE2', 'U') IS NOT NULL
				DROP TABLE #CTE_CE2; 
			;WITH CTE_CE2 AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId 
						FROM #Temp_Question2
						WHERE TargetUserId != EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedbackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) CE
				GROUP BY TargetUserId
			)
			SELECT TargetUserId,
					CASE 
						WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
						WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
						WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END AS [Contribution towards Team Effectiveness]
			INTO #CTE_CE2
			FROM CTE_CE2
			--SELECT * FROM #CTE_CE2

	
			IF OBJECT_ID('tempdb.dbo.#CTE_CD2', 'U') IS NOT NULL
				DROP TABLE #CTE_CD2; 
			;WITH CTE_CD2 AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId 
						FROM #Temp_Question3
						WHERE TargetUserId != EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedbackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) CD
				GROUP BY TargetUserId
			)
			SELECT TargetUserId,	
					CASE 
						WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
						WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
						WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END AS [Contribution towards Team Deliverables (Quality and Quantity of Work)]
			INTO #CTE_CD2
			FROM CTE_CD2
			--SELECT * FROM #CTE_CD2



			-- SELF-EVALUATION -------------------------------------------------------------------------------------------------------

			SET @OverallScore_Self = 0
			;WITH CTE_OVERALLSCORE2_SELF AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId 
						FROM #Temp_Responses
						WHERE TargetUserId = EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedBackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) RC
				GROUP BY TargetUserId
			)
			SELECT @OverallScore_Self =
					CASE 
							WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
							WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
							WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END
			FROM CTE_OVERALLSCORE2_SELF


			IF OBJECT_ID('tempdb.dbo.#CTE_RC2_SELF', 'U') IS NOT NULL
				DROP TABLE #CTE_RC2_SELF; 
			;WITH CTE_RC2_SELF AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId
						FROM #Temp_Question1
						WHERE TargetUserId = EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedbackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) RC
				GROUP BY TargetUserId
			)
			SELECT TargetUserId,
					CASE 
						WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
						WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
						WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END AS [Responsibility and Commitment]
			INTO #CTE_RC2_SELF
			FROM CTE_RC2_SELF
			SELECT DISTINCT 
					EvaluatorUserId, 
					TargetUserId, 
					PeerFeedbackSessionId, 
					PeerFeedBackRatingId, 
					PeerFeedBackGroupId
			FROM #Temp_Question1
			WHERE TargetUserId = EvaluatorUserId
				AND CoursesCode = @CursorParam_CourseCode
				AND TargetUserId = @CursorParam_TargetUserId
				AND PeerFeedbackSessionId = @CursorParam_SessionId
				AND PeerFeedBackGroupId = @CursorParam_GroupId
				AND PeerFeedBackPairingId = @CursorParam_PairingId
			SELECT * FROM #CTE_RC2_SELF

	
			IF OBJECT_ID('tempdb.dbo.#CTE_CE2_SELF', 'U') IS NOT NULL
				DROP TABLE #CTE_CE2_SELF; 
			;WITH CTE_CE2_SELF AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId 
						FROM #Temp_Question2
						WHERE TargetUserId = EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedbackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) CE
				GROUP BY TargetUserId
			)
			SELECT TargetUserId,
					CASE 
						WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
						WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
						WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END AS [Contribution towards Team Effectiveness]
			INTO #CTE_CE2_SELF
			FROM CTE_CE2_SELF
			--SELECT * FROM #CTE_CE2_SELF

	
			IF OBJECT_ID('tempdb.dbo.#CTE_CD2_SELF', 'U') IS NOT NULL
				DROP TABLE #CTE_CD2_SELF; 
			;WITH CTE_CD2_SELF AS (
				SELECT TargetUserId, 
						AVG(CAST(PeerFeedBackRatingId AS DECIMAL(10, 2))) AS PeerFeedBackRatingIdAverage
				FROM (
						SELECT DISTINCT 
								EvaluatorUserId, 
								TargetUserId, 
								PeerFeedbackSessionId, 
								PeerFeedBackRatingId, 
								PeerFeedBackGroupId 
						FROM #Temp_Question3
						WHERE TargetUserId = EvaluatorUserId
							AND CoursesCode = @CursorParam_CourseCode
							AND TargetUserId = @CursorParam_TargetUserId
							AND PeerFeedbackSessionId = @CursorParam_SessionId
							AND PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackPairingId = @CursorParam_PairingId
				) CD
				GROUP BY TargetUserId
			)
			SELECT TargetUserId,	
					CASE 
						WHEN PeerFeedBackRatingIdAverage &lt; 1.5 THEN 1
						WHEN PeerFeedBackRatingIdAverage &gt;= 1.5 AND PeerFeedBackRatingIdAverage &lt;= 2.5 THEN 2
						WHEN PeerFeedBackRatingIdAverage &gt; 2.5 THEN 3
					END AS [Contribution towards Team Deliverables (Quality and Quantity of Work)]
			INTO #CTE_CD2_SELF
			FROM CTE_CD2_SELF
			--SELECT * FROM #CTE_CD2_SELF

			--------------------------------------------------------------------------------------------------------------------------

			
			IF OBJECT_ID('tempdb.dbo.#Temp_DescriptorResponse', 'U') IS NOT NULL
				DROP TABLE #Temp_DescriptorResponse; 
			SELECT	--ACAD_GROUP, 
					CoursesCode,
					--PeerFeedbackQuestionTitle, PeerFeedbackRatingQuestionName, PeerFeedbackRatingOptionName, 
					TargetUserId,
					ISNULL([6], 0) AS RC_Meet_Responsive, 
					ISNULL([7], 0) AS RC_Meet_Attended, 
					ISNULL([8], 0) AS RC_Meet_Completed, 
					ISNULL([9], 0) AS RC_Meet_Prepared, 
					ISNULL([10], 0) AS RC_Meet_Contributed, 
					ISNULL([11], 0) AS RC_Exceed_Initiated, 
					ISNULL([12], 0) AS RC_Exceed_Demonstrated, 
					ISNULL([13], 0) AS RC_Exceed_Steered, 
					ISNULL([14], 0) AS RC_Exceed_Regularly,
					ISNULL([1], 0) AS RC_Below_Unresponsive, 
					ISNULL([2], 0) AS RC_Below_Missed, 
					ISNULL([3], 0) AS RC_Below_DidNotComplete,
					ISNULL([4], 0) AS RC_Below_DidNotPrepare,
					ISNULL([5], 0) AS RC_Below_DidNotContribute, 
					ISNULL([20], 0) AS CE_Meet_Showed, 
					ISNULL([21], 0) AS CE_Meet_Demonstrated,
					ISNULL([22], 0) AS CE_Meet_Receptive,
					ISNULL([23], 0) AS CE_Meet_Respectful, 
					ISNULL([24], 0) AS CE_Meet_Shared, 
					ISNULL([25], 0) AS CE_Exceed_Demonstrated,
					ISNULL([26], 0) AS CE_Exceed_Initiative,
					ISNULL([27], 0) AS CE_Exceed_Encouraged, 
					ISNULL([28], 0) AS CE_Exceed_Facilitated,
					ISNULL([15], 0) AS CE_Below_Uncooperative, 
					ISNULL([16], 0) AS CE_Below_NotReceptive, 
					ISNULL([17], 0) AS CE_Below_Lack, 
					ISNULL([18], 0) AS CE_Below_Disrespect,
					ISNULL([19], 0) AS CE_Below_Withheld, 
					ISNULL([33], 0) AS CD_Meet_GoodQuality,
					ISNULL([34], 0) AS CD_Meet_Fair,
					ISNULL([35], 0) AS CD_Meet_Effective, 
					ISNULL([36], 0) AS CD_Meet_Significantly, 
					ISNULL([41], 0) AS CD_Exceed_HighQuality,
					ISNULL([42], 0) AS CD_Exceed_MoreThanFair, 
					ISNULL([43], 0) AS CD_Exceed_Contributed, 
					ISNULL([44], 0) AS CD_Exceed_VerySignificant, 
					ISNULL([29], 0) AS CD_Below_PoorQuality, 
					ISNULL([30], 0) AS CD_Below_LessThanFair, 
					ISNULL([31], 0) AS CD_Below_VeryMinimally, 
					ISNULL([32], 0) AS CD_Below_DidNotPull
			INTO #Temp_DescriptorResponse
			FROM (
					--SELECT CoursesCode,
					--		PeerFeedBackOptionId,
					--		--COUNT(TargetUserId) AS TargetUserDistinctCount
					--		TargetUserId
					--FROM (
						SELECT	Courses.Code CoursesCode,
								PeerFeedBackResponses.PeerFeedBackOptionId,
								COUNT(PeerFeedBackResponses.PeerFeedBackResponsesId) DescriptorResponseCount,
								PeerFeedBackResponses.TargetUserId
						FROM #Temp_Responses_Descriptors PeerFeedBackResponses
						LEFT JOIN PeerFeedbackSessions 
							ON PeerFeedbackSessions.Id = PeerFeedBackResponses.PeerFeedBackSessionId
						LEFT JOIN PeerFeedback 
							ON PeerFeedback.Id = PeerFeedBackResponses.PeerFeedBackId
						LEFT JOIN CategoryGroups 
							ON PeerFeedBackResponses.PeerFeedBackGroupId = CategoryGroups.Id --from group id find category id
						LEFT JOIN CourseCategories 
							ON CategoryGroups.CourseCategoryId = CourseCategories.Id --from category id find course id
						LEFT JOIN Courses 
							ON CourseCategories.CourseId = Courses.Id --from course id find course code
						WHERE PeerFeedback.IsDeleted = 0 
							AND PeerFeedbackSessions.IsDeleted = 0 --filter off deleted peerfeedback and session
							AND Courses.Id IN (SELECT CourseId FROM #WhitelistedCourse)
							--AND Courses.Id = 7318 
							--AND Courses.Id IN (6672, 6674, 6676, 6678, 6690, 6692, 6694, 6696, 6698, 7318, 7456, 7158, 7160) 
							--AND PeerFeedbackSessions.Id = 21
							AND PeerFeedBackResponses.CoursesId = @CursorParam_CourseId
							AND PeerFeedBackResponses.PeerFeedBackSessionId = @CursorParam_SessionId
							AND PeerFeedBackResponses.PeerFeedBackGroupId = @CursorParam_GroupId
							AND PeerFeedBackResponses.TargetUserId = @CursorParam_TargetUserId
						GROUP BY Courses.Code,
								PeerFeedBackResponses.PeerFeedBackQuestionId,
								--PeerFeedBackResponses.PeerFeedBackRatingId,
								PeerFeedBackResponses.PeerFeedBackOptionId,
								PeerFeedBackResponses.TargetUserId
					--) AS DesriptorCount
					--GROUP BY CoursesCode,
					--		PeerFeedBackOptionId,
					--		TargetUserId
			) basedata
			PIVOT
			(
				--SUM(TargetUserDistinctCount)
				SUM(DescriptorResponseCount)
				FOR PeerFeedBackOptionId IN (	[6], [7], [8], [9], [10], [11], [12], [13], [14], [1], [2], [3], [4], [5], [20], [21], [22], [23], [24], [25], [26], [27], [28], [15], [16], [17], [18], [19], [33], [34], [35], [36], [41], [42], [43], [44], [29], [30], [31], [32])
			) pivotdata



			INSERT INTO #StudentResult
			SELECT	@CursorParam_CourseId AS CourseId,
					@CursorParam_CourseCode AS CourseCode,
					@CursorParam_Instructor AS Instructor,
					@CursorParam_SessionId AS SessionId,
					@CursorParam_SessionLabel AS SessionLabel,
					@CursorParam_GroupId AS GroupId,
					@CursorParam_GroupName AS GroupName,
					@CursorParam_PairingId AS PairingId,
					@CursorParam_DisplayName AS DisplayName,
					@CursorParam_CompletionAsEvaluator AS CompletionAsEvaluator, -- @CursorParam_Status,
					CAST(@EvaluatorCount AS DECIMAL(10, 2)) / CAST(@GroupCount AS DECIMAL(10, 2)) * 100 AS CompletionAsTarget,
					@GroupCount AS GroupCount,
					@EvaluatorCount AS EvaluatorCount,
					CAST(@EE_Count AS NVARCHAR(5)) AS EENumber,
					CAST(@ME_Count AS NVARCHAR(5)) AS MENumber,
					CAST(@BE_Count AS NVARCHAR(5)) AS BENumber,

					CASE WHEN @OverallScore = 1 THEN 'Below Expectation' 
						WHEN @OverallScore = 2 THEN 'Meets Expectation' 
						WHEN @OverallScore = 3 THEN 'Exceeds Expectation'
						ELSE 'Invalid Result'
					END AS MedianScore,

					(SELECT CASE WHEN [Responsibility and Commitment] = 1 THEN 'Below Expectation' 
								WHEN [Responsibility and Commitment] = 2 THEN 'Meets Expectation' 
								WHEN [Responsibility and Commitment] = 3 THEN 'Exceeds Expectation'
								ELSE 'Invalid Result'
							END			 
					FROM #CTE_RC2) AS RCScore,

					(SELECT CASE WHEN [Contribution towards Team Effectiveness] = 1 THEN 'Below Expectation' 
								WHEN [Contribution towards Team Effectiveness] = 2 THEN 'Meets Expectation' 
								WHEN [Contribution towards Team Effectiveness] = 3 THEN 'Exceeds Expectation'
								ELSE 'Invalid Result'
							END 
					FROM #CTE_CE2) AS TESCrore,

					(SELECT CASE WHEN [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 1 THEN 'Below Expectation' 
								WHEN [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 2 THEN 'Meets Expectation' 
								WHEN [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 3 THEN 'Exceeds Expectation'
								ELSE 'Invalid Result'
							END 
					FROM #CTE_CD2) AS TDScore,

					STUFF((SELECT '; [' + Users.DisplayName + ': ' + PeerFeedBackResponseRemarks.Remarks + '] '
							FROM PeerFeedBackResponseRemarks
							INNER JOIN Users
								ON Users.Id = PeerFeedBackResponseRemarks.EvaluatorUserId
							WHERE PeerFeedBackResponseRemarks.PeerFeedBackSessionId = @CursorParam_SessionId
								AND PeerFeedBackResponseRemarks.PeerFeedBackGroupId = @CursorParam_GroupId
								AND PeerFeedBackResponseRemarks.TargetUserId = @CursorParam_TargetUserId
								AND EvaluatorUserId != TargetUserId
							ORDER BY Users.DisplayName
					FOR XML PATH('')), 1, 1, '') AS EvaluatorRemarks,

					@CursorParam_EmailAddress AS EmailAddress,
					SUBSTRING(@CursorParam_EmailAddress, CHARINDEX('@', @CursorParam_EmailAddress) - 4, 4), 'Year ' + LTRIM(RTRIM(STR(@CursorParam_AcademicYear))) AS IntakeYear,
					REPLACE(RIGHT(@CursorParam_EmailAddress, LEN(@CursorParam_EmailAddress) - CHARINDEX('@',@CursorParam_EmailAddress)),'.smu.edu.sg','') AS StudentSchool,
														
					-- SELF-EVALUATION
					CASE WHEN @OverallScore_Self = 1 THEN 'Below Expectation' 
						WHEN @OverallScore_Self = 2 THEN 'Meets Expectation' 
						WHEN @OverallScore_Self = 3 THEN 'Exceeds Expectation'
						ELSE 'Invalid Result'
					END AS Medianscore_Self,

					(SELECT CASE WHEN [Responsibility and Commitment] = 1 THEN 'Below Expectation' 
								WHEN [Responsibility and Commitment] = 2 THEN 'Meets Expectation' 
								WHEN [Responsibility and Commitment] = 3 THEN 'Exceeds Expectation'
								ELSE 'Invalid Result'
							END			 
					FROM #CTE_RC2_SELF) AS RCScore_Self,

					(SELECT CASE WHEN [Contribution towards Team Effectiveness] = 1 THEN 'Below Expectation' 
								WHEN [Contribution towards Team Effectiveness] = 2 THEN 'Meets Expectation' 
								WHEN [Contribution towards Team Effectiveness] = 3 THEN 'Exceeds Expectation'
								ELSE 'Invalid Result'
							END 
					FROM #CTE_CE2_SELF) AS TEScore_Self,

					(SELECT CASE WHEN [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 1 THEN 'Below Expectation' 
								WHEN [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 2 THEN 'Meets Expectation' 
								WHEN [Contribution towards Team Deliverables (Quality and Quantity of Work)] = 3 THEN 'Exceeds Expectation'
								ELSE 'Invalid Result'
							END 
					FROM #CTE_CD2_SELF) AS TDScore_Self,

					(SELECT TOP 1 '[SELF: ' + PeerFeedBackResponseRemarks.Remarks + ']'
					FROM PeerFeedBackResponseRemarks
					INNER JOIN Users
						ON Users.Id = PeerFeedBackResponseRemarks.EvaluatorUserId
					WHERE PeerFeedBackResponseRemarks.PeerFeedBackSessionId = @CursorParam_SessionId
						AND PeerFeedBackResponseRemarks.PeerFeedBackGroupId = @CursorParam_GroupId
						AND PeerFeedBackResponseRemarks.TargetUserId = @CursorParam_TargetUserId
						AND EvaluatorUserId = TargetUserId) AS EvaluatorRemarks_Self,
						

					ISNULL(DescriptorResponse.RC_Meet_Responsive, 0) AS RC_Meet_Responsive, 
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Responsive / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Responsive_Percentage,
					ISNULL(DescriptorResponse.RC_Meet_Attended, 0) AS RC_Meet_Attended,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Attended / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Attended_Percentage, 
					ISNULL(DescriptorResponse.RC_Meet_Completed, 0) AS RC_Meet_Completed,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Completed / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Completed_Percentage, 
					ISNULL(DescriptorResponse.RC_Meet_Prepared, 0) AS RC_Meet_Prepared, 
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Prepared / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Prepared_Percentage, 
					ISNULL(DescriptorResponse.RC_Meet_Contributed, 0) AS RC_Meet_Contributed, 
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Meet_Contributed / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Meet_Contributed_Percentage, 
					ISNULL(DescriptorResponse.RC_Exceed_Initiated, 0) AS RC_Exceed_Initiated, 
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Initiated / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Initiated_Percentage, 
					ISNULL(DescriptorResponse.RC_Exceed_Demonstrated, 0) AS RC_Exceed_Demonstrated, 
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Demonstrated / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Demonstrated_Percentage, 
					ISNULL(DescriptorResponse.RC_Exceed_Steered, 0) AS RC_Exceed_Steered,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Steered / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Steered_Percentage, 
					ISNULL(DescriptorResponse.RC_Exceed_Regularly, 0) AS RC_Exceed_Regularly,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Exceed_Regularly / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Exceed_Regularly_Percentage, 
					ISNULL(DescriptorResponse.RC_Below_Unresponsive, 0) AS RC_Below_Unresponsive,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_Unresponsive / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_Unresponsive_Percentage, 
					ISNULL(DescriptorResponse.RC_Below_Missed, 0) AS RC_Below_Missed,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_Missed / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_Missed_Percentage, 
					ISNULL(DescriptorResponse.RC_Below_DidNotComplete, 0) AS RC_Below_DidNotComplete,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotComplete / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotComplete_Percentage, 
					ISNULL(DescriptorResponse.RC_Below_DidNotPrepare, 0) AS RC_Below_DidNotPrepare,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotPrepare / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotPrepare_Percentage, 
					ISNULL(DescriptorResponse.RC_Below_DidNotContribute, 0) AS RC_Below_DidNotContribute,
					CAST(CEILING(ISNULL((DescriptorResponse.RC_Below_DidNotContribute / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS RC_Below_DidNotContribute_Percentage, 
					ISNULL(DescriptorResponse.CE_Meet_Showed, 0) AS CE_Meet_Showed,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Showed / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Showed_Percentage, 
					ISNULL(DescriptorResponse.CE_Meet_Demonstrated, 0) AS CE_Meet_Demonstrated,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Demonstrated / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Demonstrated_Percentage, 
					ISNULL(DescriptorResponse.CE_Meet_Receptive, 0) AS CE_Meet_Receptive,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Receptive / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Receptive_Percentage, 
					ISNULL(DescriptorResponse.CE_Meet_Respectful, 0) AS CE_Meet_Respectful,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Respectful / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Respectful_Percentage, 
					ISNULL(DescriptorResponse.CE_Meet_Shared, 0) AS CE_Meet_Shared,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Meet_Shared / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Meet_Shared_Percentage, 
					ISNULL(DescriptorResponse.CE_Exceed_Demonstrated, 0) AS CE_Exceed_Demonstrated,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Demonstrated / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Demonstrated_Percentage, 
					ISNULL(DescriptorResponse.CE_Exceed_Initiative, 0) AS CE_Exceed_Initiative,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Initiative / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Initiative_Percentage, 
					ISNULL(DescriptorResponse.CE_Exceed_Encouraged, 0) AS CE_Exceed_Encouraged,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Encouraged / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Encouraged_Percentage, 
					ISNULL(DescriptorResponse.CE_Exceed_Facilitated, 0) AS CE_Exceed_Facilitated,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Exceed_Facilitated / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Exceed_Facilitated_Percentage, 
					ISNULL(DescriptorResponse.CE_Below_Uncooperative, 0) AS CE_Below_Uncooperative,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Uncooperative / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Uncooperative_Percentage, 
					ISNULL(DescriptorResponse.CE_Below_NotReceptive, 0) AS CE_Below_NotReceptive,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_NotReceptive / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_NotReceptive_Percentage, 
					ISNULL(DescriptorResponse.CE_Below_Lack, 0) AS CE_Below_Lack,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Lack / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Lack_Percentage, 
					ISNULL(DescriptorResponse.CE_Below_Disrespect, 0) AS CE_Below_Disrespect,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Disrespect / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Disrespect_Percentage, 
					ISNULL(DescriptorResponse.CE_Below_Withheld, 0) AS CE_Below_Withheld,
					CAST(CEILING(ISNULL((DescriptorResponse.CE_Below_Withheld / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CE_Below_Withheld_Percentage, 
					ISNULL(DescriptorResponse.CD_Meet_GoodQuality, 0) AS CD_Meet_GoodQuality,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_GoodQuality / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_GoodQuality_Percentage, 
					ISNULL(DescriptorResponse.CD_Meet_Fair, 0) AS CD_Meet_Fair,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Fair / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Fair_Percentage, 
					ISNULL(DescriptorResponse.CD_Meet_Effective, 0) AS CD_Meet_Effective,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Effective / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Effective_Percentage, 
					ISNULL(DescriptorResponse.CD_Meet_Significantly, 0) AS CD_Meet_Significantly,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Meet_Significantly / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Meet_Significantly_Percentage, 
					ISNULL(DescriptorResponse.CD_Exceed_HighQuality, 0) AS CD_Exceed_HighQuality,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_HighQuality / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_HighQuality_Percentage, 
					ISNULL(DescriptorResponse.CD_Exceed_MoreThanFair, 0) AS CD_Exceed_MoreThanFair,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_MoreThanFair / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_MoreThanFair_Percentage, 
					ISNULL(DescriptorResponse.CD_Exceed_Contributed, 0) AS CD_Exceed_Contributed,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_Contributed / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_Contributed_Percentage, 
					ISNULL(DescriptorResponse.CD_Exceed_VerySignificant, 0) AS CD_Exceed_VerySignificant,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Exceed_VerySignificant / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Exceed_VerySignificant_Percentage, 
					ISNULL(DescriptorResponse.CD_Below_PoorQuality, 0) AS CD_Below_PoorQuality,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_PoorQuality / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_PoorQuality_Percentage, 
					ISNULL(DescriptorResponse.CD_Below_LessThanFair, 0) AS CD_Below_LessThanFair,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_LessThanFair / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_LessThanFair_Percentage, 
					ISNULL(DescriptorResponse.CD_Below_VeryMinimally, 0) AS CD_Below_VeryMinimally,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_VeryMinimally / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_VeryMinimally_Percentage, 
					ISNULL(DescriptorResponse.CD_Below_DidNotPull, 0) AS CD_Below_DidNotPull,
					CAST(CEILING(ISNULL((DescriptorResponse.CD_Below_DidNotPull / CAST(@EvaluatorCount_All AS DECIMAL(5,2))) * 100, 0)) AS NVARCHAR(3)) + '%' AS CD_Below_DidNotPull_Percentage
				FROM #Temp_DescriptorResponse DescriptorResponse

		END

	FETCH NEXT FROM CURSOR_FILTERS INTO @CursorParam_CourseId, @CursorParam_CourseCode, @CursorParam_Instructor, @CursorParam_TargetUserId, @CursorParam_DisplayName, @CursorParam_EmailAddress, @CursorParam_AcademicYear, @CursorParam_Status, @CursorParam_SessionId, @CursorParam_SessionLabel, @CursorParam_GroupId, @CursorParam_GroupName, @CursorParam_PairingId, @CursorParam_CompletionAsEvaluator
END
CLOSE CURSOR_FILTERS
DEALLOCATE CURSOR_FILTERS


SELECT *
FROM #StudentResult


IF OBJECT_ID('tempdb.dbo.#WhitelistedCourse', 'U') IS NOT NULL
	DROP TABLE #WhitelistedCourse; 
IF OBJECT_ID('tempdb.dbo.#StudentCompletionAsEvaluator', 'U') IS NOT NULL
	DROP TABLE #StudentCompletionAsEvaluator; 
IF OBJECT_ID('tempdb.dbo.#StudentCompletion', 'U') IS NOT NULL
	DROP TABLE #StudentCompletion; 
IF OBJECT_ID('tempdb.dbo.#Temp_Responses_Descriptors', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses_Descriptors; 
IF OBJECT_ID('tempdb.dbo.#Temp_Responses', 'U') IS NOT NULL
	DROP TABLE #Temp_Responses; 
IF OBJECT_ID('tempdb.dbo.#Temp_Question1', 'U') IS NOT NULL
	DROP TABLE #Temp_Question1;
IF OBJECT_ID('tempdb.dbo.#Temp_Question2', 'U') IS NOT NULL
	DROP TABLE #Temp_Question2; 
IF OBJECT_ID('tempdb.dbo.#Temp_Question3', 'U') IS NOT NULL
	DROP TABLE #Temp_Question3; 
IF OBJECT_ID('tempdb.dbo.#CTE_RC2', 'U') IS NOT NULL
	DROP TABLE #CTE_RC2; 
IF OBJECT_ID('tempdb.dbo.#CTE_CE2', 'U') IS NOT NULL
	DROP TABLE #CTE_CE2; 
IF OBJECT_ID('tempdb.dbo.#CTE_CD2', 'U') IS NOT NULL
	DROP TABLE #CTE_CD2; 
IF OBJECT_ID('tempdb.dbo.#CTE_RC2_SELF', 'U') IS NOT NULL
	DROP TABLE #CTE_RC2_SELF; 
IF OBJECT_ID('tempdb.dbo.#CTE_CE2_SELF', 'U') IS NOT NULL
	DROP TABLE #CTE_CE2_SELF; 
IF OBJECT_ID('tempdb.dbo.#CTE_CD2_SELF', 'U') IS NOT NULL
	DROP TABLE #CTE_CD2_SELF; 
IF OBJECT_ID('tempdb.dbo.#StudentResult', 'U') IS NOT NULL
	DROP TABLE #StudentResult;</value>
  </data>
</root>