<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttendanceData_Insert" xml:space="preserve">
    <value>INSERT INTO [AttendanceDatas]
           ([AttendanceSessionId]
           ,[UserId]
           ,[Percentage]
           ,[Remarks]
           ,[LastUpdatedBy]
           ,[LastUpdatedTime]
           ,[IsDeleted])
     VALUES
           (@AttendanceSessionId
           ,@UserId
           ,@Percentage
           ,@Remarks
           ,@LastUpdatedBy
           ,@LastUpdatedTime
           ,@IsDeleted)</value>
  </data>
  <data name="AttendanceAttachment_DeleteByAttendanceDataId" xml:space="preserve">
    <value>DELETE FROM AttendanceAttachments WHERE AttendanceDataId = @AttendanceDataId</value>
  </data>
  <data name="AttendanceAttachment_DeleteAsync" xml:space="preserve">
    <value>DELETE FROM AttendanceAttachments WHERE AttendanceAttachmentId = @AttendanceAttachmentId</value>
  </data>
  <data name="AttendanceAttachment_Insert" xml:space="preserve">
    <value>INSERT INTO AttendanceAttachments  OUTPUT INSERTED.AttendanceAttachmentId VALUES (@AttendanceDataId, @FileName, @AttachFile)</value>
  </data>
  <data name="AttendanceAttachment_Update" xml:space="preserve">
    <value>UPDATE AttendanceAttachments SET AttachFile = @AttachFile WHERE AttendanceAttachmentId = @AttendanceAttachmentId, [FileName] = @FileName
  </value>
  </data>
  <data name="AttendanceData_Save" xml:space="preserve">
    <value>BEGIN
    DECLARE @DataId AS INT;
    SET @DataId = 0;
    SELECT @DataId = AttendanceDataId
    FROM AttendanceDatas
    WHERE AttendanceSessionId = @AttendanceSessionId
          AND UserId = @UserId
          AND IsDeleted = @IsDeleted
    IF @AttendanceDataId &gt; 0
        UPDATE [AttendanceDatas]
        SET [AttendanceSessionId] = @AttendanceSessionId,
            [UserId] = @UserId,
            [Percentage] = @Percentage,
            [LastUpdatedBy] = @LastUpdatedBy,
            [LastUpdatedTime] = @LastUpdatedTime,
            [IsDeleted] = @IsDeleted
        WHERE AttendanceDataId = @AttendanceDataId AND [Percentage] IS NULL
    ELSE
    BEGIN
        IF @DataId IS NOT NULL
           AND @DataId &gt; 0
            UPDATE [AttendanceDatas]
            SET [AttendanceSessionId] = @AttendanceSessionId,
                [UserId] = @UserId,
                [Percentage] = @Percentage,
                [LastUpdatedBy] = @LastUpdatedBy,
                [LastUpdatedTime] = @LastUpdatedTime,
                [IsDeleted] = @IsDeleted
            WHERE AttendanceDataId = @DataId AND [Percentage] IS NULL
        ELSE
            INSERT INTO [AttendanceDatas]
            (
                [AttendanceSessionId],
                [UserId],
                [Percentage],
                [Remarks],
                [LastUpdatedBy],
                [LastUpdatedTime],
                [IsDeleted]
            )
            VALUES
            (@AttendanceSessionId, @UserId, @Percentage, @Remarks, @LastUpdatedBy, @LastUpdatedTime, @IsDeleted);
    END;
END;


</value>
  </data>
  <data name="AttendanceData_UpdatePercent" xml:space="preserve">
    <value>UPDATE [AttendanceDatas]
   SET [AttendanceSessionId] = @AttendanceSessionId
      ,[UserId] = @UserId
      ,[Percentage] = @Percentage
      ,[LastUpdatedBy] = @LastUpdatedBy
      ,[LastUpdatedTime] = @LastUpdatedTime
	  ,[IsDeleted] = @IsDeleted
 WHERE AttendanceDataId = @AttendanceDataId</value>
  </data>
  <data name="AttendanceData_UpdateAttendanceData" xml:space="preserve">
    <value>UPDATE [AttendanceDatas]
   SET [AttendanceSessionId] = {0}
      ,[UserId] = @UserId
      ,[Percentage] = @Percentage
      ,[LastUpdatedBy] = {1}
      ,[LastUpdatedTime] = GETUTCDATE()
	  ,[IsDeleted] = 0
 WHERE AttendanceDataId = @AttendanceDataId</value>
  </data>
  <data name="AttendanceData_UpdateForSetAll" xml:space="preserve">
    <value>UPDATE 
	          [AttendanceDatas] 
          SET 
	          [LastUpdatedTime] = @LastUpdatedTime, [LastUpdatedBy] = @LastUpdatedBy, [Percentage] = @Percentage, Excused = @Excused
          WHERE [AttendanceSessionId] = @AttendanceSessionId</value>
  </data>
  <data name="CategoryGroup_GetListByMergeCourse" xml:space="preserve">
    <value>
          SELECT 
	          cg.Id AS CategoryId,
	          cc.Id AS CourseCategoryId,
	          cg.[Name],
	          cc.[Name] AS CourseCategoryName,
            cc.CourseId 
          FROM 
	          CategoryGroups cg 
	          INNER JOIN CourseCategories cc ON cg.CourseCategoryId = cc.Id
            INNER JOIN UserEnrollments ue ON ue.CourseId = cc.CourseId
	          LEFT JOIN UserGroups ug ON cg.Id = ug.CategoryGroupId
          WHERE
	          cc.CourseId IN ({0})
</value>
  </data>
  <data name="CategoryGroup_GetListGroupByCourseCategoryId" xml:space="preserve">
    <value>
        WITH cte AS (
	        SELECT
		        NULL AS CategoryId,
		        NULL AS [Name],
		        cc.[Name] AS CourseCategoryName,
		        cc.Id AS CourseCategoryId,
            NULL NumOfStudent
	        FROM
		        CourseCategories cc
		        INNER JOIN UserEnrollments ue ON ue.CourseId = cc.CourseId
	        WHERE
		        cc.CourseId = @CourseId
	        UNION
	        SELECT
		        cg.Id AS CategoryId,
		        cg.[Name],
		        NULL AS CourseCategoryName,
		        cg.CourseCategoryId AS CourseCategoryId,
            (SELECT COUNT(UserId) NumOfStudent  FROM UserGroups WHERE CategoryGroupId = cg.Id)
	        FROM
		        CategoryGroups cg
		        INNER JOIN CourseCategories cc ON cg.CourseCategoryId = cc.Id
		        INNER JOIN UserEnrollments ue ON ue.CourseId = cc.CourseId
            INNER JOIN UserGroups ug ON ug.CategoryGroupId = cg.Id AND ue.UserId = ug.UserId
	        WHERE
		        cc.CourseId = @CourseId
        )
        SELECT
	        CategoryId,
	        [Name],
	        CourseCategoryName, 
	        CourseCategoryId,
          NumOfStudent
        FROM
	        cte
    </value>
  </data>
  <data name="UserUploadFile_DeleteByUserIdAndId" xml:space="preserve">
    <value>DELETE FROM UserUploadFiles WHERE UserId = @UserId AND Id = @Id;</value>
  </data>
  <data name="UserUploadFile_GetByUserId" xml:space="preserve">
    <value>SELECT Id, UserId, FileBlob, FileMeta, Filename, Category FROM UserUploadFiles WHERE UserId = @UserId AND Category = @Category;</value>
  </data>
  <data name="UserUploadFile_GetByUserIdAndId" xml:space="preserve">
    <value>SELECT Id, UserId, FileBlob, FileMeta, Filename, Category FROM UserUploadFiles WHERE UserId = @UserId AND Id = @Id;</value>
  </data>
  <data name="UserUploadFile_Insert" xml:space="preserve">
    <value>INSERT INTO UserUploadFiles OUTPUT INSERTED.Id VALUES (@UserId, @FileBlob, @FileMeta, @Filename, @Category);</value>
  </data>
  <data name="AttendanceData_Update" xml:space="preserve">
    <value>UPDATE [AttendanceDatas]
SET 
	 [Percentage] = @Percentage
	,[Remarks] = @Remarks
	,[LastUpdatedBy] = @LastUpdatedBy
	,[LastUpdatedTime] = @LastUpdatedTime
	,[Excused] = @Excused
	,[Participation] = @Participation
                  ,[IsDeleted] = @IsDeleted
WHERE AttendanceDataId = @AttendanceDataId;</value>
  </data>
  <data name="AttendanceData_GetBySessionId" xml:space="preserve">
    <value>SELECT 
	AttendanceDataId, AttendanceSessionId, UserId, [Percentage], Remarks, LastUpdatedBy, LastUpdatedTime, IsDeleted, Participation, Excused 
FROM 
	AttendanceDatas
WHERE 
	AttendanceSessionId = @AttendanceSessionId AND IsDeleted = 0 ORDER BY LastUpdatedTime, AttendanceDataId DESC;</value>
  </data>
  <data name="Audit_Insert" xml:space="preserve">
    <value>INSERT INTO Audit OUTPUT INSERTED.Id VALUES (@ToolId, @UserId, @OrgUnitId, @Type, @ResourceId, @TableName, @DateTime, @OldValues, @NewValues, @AffectedColumns, @PrimaryKeys);</value>
  </data>
  <data name="PeerFeedBack_GeneratePairings" xml:space="preserve">
    <value>BEGIN
    DECLARE @PeerFeedBackPairingId AS INT
    SET @PeerFeedBackPairingId = 0;
    BEGIN TRANSACTION;

    DECLARE @GroupIdInserted AS INT
    DECLARE @UserId AS INT
    DECLARE @GroupId AS INT
   
    SET @GroupIdInserted = 0;
    DECLARE user_Cursor CURSOR FOR
    SELECT 
      DISTINCT u.Id AS UserId, ug.CategoryGroupId AS GroupId
    FROM Users u
        INNER JOIN UserGroups ug ON u.Id = ug.UserId
        INNER JOIN CategoryGroups cg ON cg.id = ug.CategoryGroupId
        INNER JOIN CourseCategories cc ON cc.Id = cg.CourseCategoryId
        INNER JOIN Courses c ON c.Id = cc.CourseId
    WHERE 
      c.Code IN @CourseOfferingCode ORDER BY ug.CategoryGroupId ASC;

    OPEN user_Cursor;
    FETCH NEXT FROM user_Cursor INTO @UserId, @GroupId;
    WHILE @@FETCH_STATUS = 0
      BEGIN
          IF @GroupIdInserted &lt;&gt; @GroupId
          BEGIN
              SET @GroupIdInserted = @GroupId;
              -- insert PeerFeedbackPairings
              INSERT INTO PeerFeedbackPairings
              (
                  PeerFeedbackId,
                  LastUpdatedBy,
                  LastUpdatedTime,
                  IsDeleted
              )
              VALUES (@PeerFeedbackId, @LastUpdatedBy, SYSUTCDATETIME(), 0);
              SELECT @PeerFeedBackPairingId = @@IDENTITY;
          END
          -- insert PeerFeedBackPairingSessions
          INSERT INTO PeerFeedBackPairingSessions
          (
              PeerFeedBackPairingId,
              PeerFeedBackSessionId
          )
          VALUES
          (@PeerFeedBackPairingId, @PeerFeedBackSessionId);
  
          -- insert PeerFeedbackTargets
          INSERT INTO PeerFeedbackTargets
          (
              UserId,
              OrgUnitId,
              IsOrgUnit,
              IsDeleted,
              LastUpdatedBy,
              LastUpdatedTime,
              PeerFeedbackPairingId
          )
          VALUES
          (@UserId, @GroupId, 0, 0, @LastUpdatedBy, SYSUTCDATETIME(), @PeerFeedBackPairingId);
  
          -- insert PeerFeedbackEvaluators
          INSERT INTO PeerFeedbackEvaluators
          (
              UserId,
              OrgUnitId,
              IsOrgUnit,
              IsDeleted,
              LastUpdatedBy,
              LastUpdatedTime,
              PeerFeedbackPairingId
          )
          VALUES
          (@UserId, @GroupId, 0, 0, @LastUpdatedBy, SYSUTCDATETIME(), @PeerFeedBackPairingId);
          FETCH NEXT FROM user_Cursor INTO @UserId, @GroupId;
      END;
    CLOSE user_Cursor;
    DEALLOCATE user_Cursor;

    COMMIT;
END</value>
  </data>
  <data name="PeerFeedBackPairings_Insert" xml:space="preserve">
    <value>INSERT INTO PeerFeedbackPairings (PeerFeedbackId
, LastUpdatedBy
, LastUpdatedTime
, IsDeleted) OUTPUT INSERTED.Id
  VALUES (@PeerFeedbackId, @LastUpdatedBy, SYSDATETIME(), 0);</value>
  </data>
  <data name="PeerFeedBackEvaluators_Insert" xml:space="preserve">
    <value>INSERT INTO PeerFeedbackEvaluators (UserId
, OrgUnitId
, IsOrgUnit
, IsDeleted
, LastUpdatedBy
, LastUpdatedTime
, PeerFeedbackPairingId)
  VALUES (@UserId, @OrgUnitId, @IsOrgUnit, 0, @LastUpdatedBy, SYSUTCDATETIME(), @PeerFeedbackPairingId);</value>
  </data>
  <data name="PeerFeedBackPairingSessions_Insert" xml:space="preserve">
    <value>INSERT INTO PeerFeedBackPairingSessions (PeerFeedBackPairingId
, PeerFeedBackSessionId)
  VALUES (@PeerFeedBackPairingId, @PeerFeedBackSessionId);</value>
  </data>
  <data name="PeerFeedBackTargets_Insert" xml:space="preserve">
    <value>INSERT INTO PeerFeedbackTargets (UserId
, OrgUnitId
, IsOrgUnit
, IsDeleted
, LastUpdatedBy
, LastUpdatedTime
, PeerFeedbackPairingId)
  VALUES (@UserId, @OrgUnitId, @IsOrgUnit, 0, @LastUpdatedBy, SYSUTCDATETIME(), @PeerFeedbackPairingId);</value>
  </data>
  <data name="UserGroup_GetPeerFeedBackTargetUser" xml:space="preserve">
    <value>SELECT 
  ug.UserId, ug.CategoryGroupId 
FROM 
  CategoryGroups cg 
  INNER JOIN CourseCategories cc ON cg.CourseCategoryId = cc.Id
  INNER JOIN UserGroups ug ON ug.CategoryGroupId = cg.Id
  INNER JOIN Users u ON u.Id = ug.UserId
  INNER JOIN Courses c ON c.Id = cc.CourseId
WHERE 
  c.Code IN @courseOfferingCodes</value>
  </data>
  <data name="TL_CourseOfferings_GetListByCodes" xml:space="preserve">
    <value>SELECT 
	DISTINCT co.STRM, co.ACADEMIC_YEAR, co.ACADEMIC_TERM
FROM 
	Courses c
	INNER JOIN UserEnrollments ue on c.Id = ue.CourseId
	INNER JOIN {0}TL_CourseOfferings co on c.Code = co.CourseOfferingCode
WHERE
	co.MERGE_SECTION = 0 AND ((CONCAT(co.ACADEMIC_YEAR, ' T', co.ACADEMIC_TERM) like @filter) OR @filter = '') {1}
ORDER BY ACADEMIC_YEAR DESC;</value>
  </data>
  <data name="TL_CourseOfferings_GetTotalCountByCodes" xml:space="preserve">
    <value>SELECT COUNT(*) FROM (
SELECT 
	DISTINCT co.STRM, co.ACADEMIC_YEAR, co.ACADEMIC_TERM
FROM 
	Courses c
	INNER JOIN UserEnrollments ue on c.Id = ue.CourseId
	INNER JOIN {0}TL_CourseOfferings co on c.Code = co.CourseOfferingCode 
WHERE
	co.MERGE_SECTION = 0 AND ((CONCAT(co.ACADEMIC_YEAR, ' T', co.ACADEMIC_TERM) like @filter) OR @filter = '') {1}) tbl;</value>
  </data>
</root>