<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="JournalEntryComment_Delete" xml:space="preserve">
    <value>UPDATE [JournalEntryComments] SET [Status] = 0 WHERE Id = @Id</value>
  </data>
  <data name="JournalEntryComment_GetById" xml:space="preserve">
    <value>SELECT [Id]
      ,[JournalEntryId]
      ,[UserId]
      ,[Comment]
      ,[IsRead]
      ,[Status]
      ,[LastUpdatedTime]
      ,[LastUpdatedBy]
  FROM [JournalEntryComments] WHERE Id = @Id AND [Status] = 1</value>
  </data>
  <data name="JournalEntryComment_Insert" xml:space="preserve">
    <value>INSERT INTO [JournalEntryComments]
           ([JournalEntryId]
           ,[UserId]
           ,[Comment]
           ,[IsRead]
           ,[Status]
           ,[LastUpdatedTime]
           ,[LastUpdatedBy])  OUTPUT INSERTED.ID
     VALUES
           (@JournalEntryId
           ,@UserId
           ,@Comment
           ,@IsRead
           ,@Status
           ,@LastUpdatedTime
           ,@LastUpdatedBy)</value>
  </data>
  <data name="JournalEntryComment_UpdateComment" xml:space="preserve">
    <value>UPDATE JournalEntryComments SET Comment = @Comment, LastUpdatedTime = @LastUpdatedTime, LastUpdatedBy=@LastUpdatedBy, IsRead = @IsRead WHERE Id = @Id</value>
  </data>
  <data name="JournalEntryComment_UpdateIsRead" xml:space="preserve">
    <value>UPDATE JournalEntryComments SET IsRead = 1 WHERE JournalEntryId = @JournalEntryId</value>
  </data>
  <data name="JournalEntry_GetById" xml:space="preserve">
    <value>SELECT [Id]
      ,[JournalId]
      ,[UserId]
      ,[Title]
      ,[Body]
      ,[IsDraft]
      ,[IsRead]
      ,[Status]
      ,[LastUpdatedTime]
      ,[LastUpdatedBy]
  FROM [JournalEntries] WHERE [Status] = 1 AND Id = @Id</value>
  </data>
  <data name="JournalEntry_GetEntryWithCommentByUser" xml:space="preserve">
    <value>SELECT 
	   je.[Id]
      ,je.[JournalId]
      ,je.[UserId]
      ,je.[Title]
      ,je.[Body]
      ,je.[IsDraft]
      ,je.[IsRead]
      ,je.[Status]
      ,je.[LastUpdatedTime]
      ,je.[LastUpdatedBy]
	  ,( SELECT DisplayName FROM Users us WHERE us.Id = je.LastUpdatedBy ) AS LastUpdatedByName
	  ,us.OrgDefinedId
	  ,jec.Comment
	  ,jec.LastUpdatedTime AS CommentUpdateTime
	  ,jec.LastUpdatedBy AS CommentLastUpdateBy
	  ,( SELECT DisplayName FROM Users us WHERE us.Id = jec.LastUpdatedBy ) AS CommentLastUpdateByName
    ,( SELECT OrgDefinedId FROM Users us WHERE us.Id = jec.LastUpdatedBy ) AS LastUpdatedByOrgDefinedId
	  ,jec.Id AS CommentId
    ,jec.IsRead as IsReadComment
  FROM 
	[JournalEntries] je 
	INNER JOIN Users us ON us.Id = je.UserId
	LEFT JOIN JournalEntryComments jec ON je.Id = jec.JournalEntryId AND je.UserId = jec.UserId AND jec.[Status] = 1 AND jec.Status = 1
  WHERE 
	je.JournalId = @JournalId AND je.Status = 1 AND je.UserId = @UserId ORDER BY je.LastUpdatedTime DESC </value>
  </data>
  <data name="JournalEntry_GetEntryWithCommentByInstructor" xml:space="preserve">
    <value>SELECT 
	   je.[Id]
      ,je.[JournalId]
      ,je.[UserId]
      ,je.[Title]
      ,je.[Body]
      ,je.[IsDraft]
      ,je.[IsRead]
      ,je.[Status]
      ,je.[LastUpdatedTime]
      ,je.[LastUpdatedBy]
	  ,( SELECT DisplayName FROM Users us WHERE us.Id = je.LastUpdatedBy ) AS LastUpdatedByName
	  ,us.OrgDefinedId
	  ,jec.Comment
	  ,jec.LastUpdatedTime AS CommentUpdateTime
	  ,jec.LastUpdatedBy AS CommentLastUpdateBy
	  ,( SELECT DisplayName FROM Users us WHERE us.Id = jec.LastUpdatedBy ) AS CommentLastUpdateByName
    ,( SELECT OrgDefinedId FROM Users us WHERE us.Id = jec.LastUpdatedBy ) AS LastUpdatedByOrgDefinedId
	  ,jec.Id AS CommentId
    ,jec.IsRead as IsReadComment
  FROM 
	[JournalEntries] je 
	INNER JOIN Users us ON us.Id = je.UserId
	LEFT JOIN JournalEntryComments jec ON je.Id = jec.JournalEntryId AND je.UserId = jec.UserId AND jec.[Status] = 1 AND jec.Status = 1
  WHERE 
	je.JournalId = @JournalId AND je.Status = 1 AND je.UserId = @UserId AND je.IsDraft = 0</value>
  </data>
  <data name="JournalEntry_GetListJournalEntry" xml:space="preserve">
    <value>SELECT je.[Id]
      ,je.[JournalId]
      ,je.[UserId]
	  ,( SELECT DisplayName FROM Users WHERE Id = je.[UserId] ) CreatedByName
      ,je.[Title]
      ,je.[Body]
      ,je.[IsDraft]
      ,je.[IsRead]
      ,je.[Status]
      ,je.[LastUpdatedTime]
      ,je.[LastUpdatedBy]
	  ,( SELECT DisplayName FROM Users WHERE Id = je.LastUpdatedBy ) LastUpdatedByName
  FROM [JournalEntries] je INNER JOIN Journals j ON je.JournalId = j.Id AND j.CourseId = @CourseId WHERE je.[Status] = 1 AND je.UserId = @UserId ORDER BY je.LastUpdatedTime DESC 
    OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;</value>
  </data>
  <data name="JournalEntry_GetTotalCount" xml:space="preserve">
    <value>SELECT COUNT(je.[Id]) FROM [JournalEntries] je INNER JOIN Journals j ON je.JournalId = j.Id AND j.CourseId = @CourseId WHERE je.[Status] = 1 AND je.UserId = @UserId</value>
  </data>
  <data name="JournalEntry_Insert" xml:space="preserve">
    <value>INSERT INTO [JournalEntries]
           ([JournalId]
           ,[UserId]
           ,[Title]
           ,[Body]
           ,[IsDraft]
           ,[IsRead]
           ,[Status]
           ,[LastUpdatedTime]
           ,[LastUpdatedBy]) OUTPUT INSERTED.ID
     VALUES
           (@JournalId
           ,@UserId
           ,@Title
           ,@Body
           ,@IsDraft
           ,@IsRead
           ,@Status
           ,@LastUpdatedTime
           ,@LastUpdatedBy)</value>
  </data>
  <data name="JournalEntry_Update" xml:space="preserve">
    <value>UPDATE [JournalEntries]
   SET [JournalId] = @JournalId
      ,[UserId] = @UserId
      ,[Title] = @Title
      ,[Body] = @Body
      ,[IsDraft] = @IsDraft
      ,[IsRead] = @IsRead
      ,[Status] = @Status
      ,[LastUpdatedTime] = @LastUpdatedTime
      ,[LastUpdatedBy] = @LastUpdatedBy
 WHERE Id = @Id</value>
  </data>
  <data name="JournalEntry_UpdateIsRead" xml:space="preserve">
    <value>UPDATE JournalEntries SET IsRead = 1 WHERE Id = @Id</value>
  </data>
  <data name="JournalEntry_UpdateStatus" xml:space="preserve">
    <value>UPDATE JournalEntries SET [Status] = @Status, LastUpdatedTime = @LastUpdatedTime, LastUpdatedBy = @LastUpdatedBy WHERE Id= @Id</value>
  </data>
  <data name="JournalEntry_UpdateEntryByAnotherInstructor" xml:space="preserve">
    <value>UPDATE JournalEntries SET [IsRead] = @IsRead, LastUpdatedTime = @LastUpdatedTime, LastUpdatedBy = @LastUpdatedBy WHERE Id= @Id</value>
  </data>
  <data name="JournalEntry_UpdateStatusByStudent" xml:space="preserve">
    <value>
        BEGIN TRY
          BEGIN TRANSACTION;
		      --update entry
		      UPDATE et
		      SET et.[Status] = 0,
			      et.LastUpdatedTime = @LastUpdatedTime,
			      et.LastUpdatedBy = @LastUpdatedBy
		      FROM JournalEntries et WHERE et.Id= @Id AND et.UserId = @UserId;
		      -- update status entry comment
		      UPDATE jec
		      SET jec.[Status] = 0,
			      jec.LastUpdatedTime = @LastUpdatedTime,
			      jec.LastUpdatedBy = @LastUpdatedBy
		      FROM JournalEntryComments jec
			      INNER JOIN JournalEntries et
				      ON jec.JournalEntryId = et.Id AND et.Id= @Id AND et.UserId = @UserId;
          COMMIT;
      END TRY
      BEGIN CATCH
          ROLLBACK;
      END CATCH;
  </value>
  </data>
  <data name="Journals_Delete" xml:space="preserve">
    <value>UPDATE Journals
SET [Status] = 0,
    LastUpdatedTime = @LastUpdatedTime,
    LastUpdatedBy = @LastUpdatedBy
WHERE Id IN @Ids;

UPDATE et
SET et.[Status] = 0,
    et.LastUpdatedTime = @LastUpdatedTime,
    et.LastUpdatedBy = @LastUpdatedBy
FROM JournalEntries et
    JOIN Journals j
        ON et.JournalId = j.Id AND j.Id IN @Ids;
UPDATE jec
SET jec.[Status] = 0,
    jec.LastUpdatedTime = @LastUpdatedTime,
    jec.LastUpdatedBy = @LastUpdatedBy
FROM JournalEntryComments jec
    INNER JOIN JournalEntries et
        ON jec.JournalEntryId = et.Id AND et.JournalId IN @Ids;</value>
  </data>
  <data name="Journals_GetByCourse" xml:space="preserve">
    <value>SELECT [Id]
      ,[CourseId]
      ,[Title]
      ,[Description]
      ,[StartDate]
      ,[EndDate]
      ,(CASE
            WHEN [Status] = 1 AND GETUTCDATE() &gt;= StartDate AND GETUTCDATE() &lt;= EndDate THEN 1 -- open
            WHEN [Status] = 2 THEN 2 --locked
            WHEN [Status] = 1 AND StartDate &gt; GETUTCDATE() THEN 3 --future
            WHEN [Status] = 5 THEN 5 --private
			      WHEN GETUTCDATE() &gt; EndDate THEN 4 --close
        END
       ) AS [Status]
      ,[LastUpdatedTime]
      ,[LastUpdatedBy]
      ,( SELECT COUNT(DISTINCT je.Id) FROM JournalEntries je  INNER JOIN UserEnrollments ue ON ue.UserId = je.UserId INNER JOIN Roles rl ON rl.Id = ue.RoleId AND LOWER(rl.Name) = LOWER(@RoleName) WHERE je.JournalId = j.Id AND je.IsDraft = 0 AND je.[Status] = 1  ) AS NumOfEntry
	    ,( SELECT COUNT(DISTINCT je.Id) FROM JournalEntries je  INNER JOIN UserEnrollments ue ON ue.UserId = je.UserId INNER JOIN Roles rl ON rl.Id = ue.RoleId AND LOWER(rl.Name) = LOWER(@RoleName) WHERE je.JournalId = j.Id AND je.IsDraft = 0 AND je.IsRead = 0 AND je.Status = 1 AND je.LastUpdatedBy = je.UserId ) AS NumOfUnreadEntry
  FROM [Journals] j WHERE CourseId = @CourseId  AND [Status]  &lt;&gt; 0  ORDER BY {0}
  OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY;</value>
  </data>
  <data name="Journals_GetById" xml:space="preserve">
    <value>SELECT [Id]
      ,[CourseId]
      ,[Title]
      ,[Description]
      ,[StartDate]
      ,[EndDate]
      ,[Status]
       ,(CASE
            WHEN [Status] = 1 AND GETUTCDATE() &gt;= StartDate AND GETUTCDATE() &lt;= EndDate THEN 1 -- open
            WHEN [Status] = 2 THEN 2 --locked
            WHEN [Status] = 1 AND StartDate &gt; GETUTCDATE() THEN 3 --future
            WHEN [Status] = 5 THEN 5 --private
			      WHEN GETUTCDATE() &gt; EndDate THEN 4 --close
        END
       ) AS [JournalStatus]
      ,[LastUpdatedTime]
      ,[LastUpdatedBy]
  FROM [Journals] WHERE Id = @Id AND [Status]  &lt;&gt; 0</value>
  </data>
  <data name="Journals_GetJournalByCourse" xml:space="preserve">
    <value>SELECT [Id]
      ,[CourseId]
      ,[Title]
      ,[Description]
      ,[StartDate]
      ,[EndDate]
      ,[Status]
      ,[LastUpdatedTime]
      ,[LastUpdatedBy]
	  ,( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.JournalId = j.Id AND je.IsDraft = 0 AND je.IsRead = 0 AND je.Status = 1) AS NumOfUnreadEntry
	  ,( SELECT COUNT(jec.Id) FROM JournalEntries je INNER JOIN JournalEntryComments jec ON je.Id = jec.JournalEntryId AND je.Status = 1 AND je.IsDraft = 0  AND jec.Status = 1 WHERE je.JournalId = j.Id ) AS NumOfComment
    ,( SELECT COUNT(jec.Id) FROM JournalEntries je INNER JOIN JournalEntryComments jec ON je.Id = jec.JournalEntryId AND je.Status = 1 AND je.IsDraft = 0  AND jec.IsRead = 0 AND jec.Status = 1 WHERE je.JournalId = j.Id ) AS NumOfNewComment
  FROM [Journals] j WHERE CourseId = @CourseId AND j.[Status]  &lt;&gt; 0 ORDER BY StartDate DESC</value>
  </data>
  <data name="Journals_GetJournalByCourseAndUser" xml:space="preserve">
    <value>SELECT [Id]
      ,[CourseId]
      ,[Title]
      ,[Description]
      ,[StartDate]
      ,[EndDate]
       ,(CASE
            WHEN [Status] = 1 AND GETUTCDATE() &gt;= StartDate AND GETUTCDATE() &lt;= EndDate THEN 1
            WHEN [Status] = 2 THEN 2
            WHEN [Status] = 1 AND StartDate &gt; GETUTCDATE() THEN 3
            ELSE 4
        END
       ) AS [Status]
      ,[LastUpdatedTime]
      ,[LastUpdatedBy]
	    ,( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.[Status] = 1 AND je.UserId = @UserId AND je.JournalId = j.Id ) AS NumOfEntry
      ,( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.JournalId = j.Id AND je.IsDraft = 0 AND je.IsRead = 0 AND je.Status = 1 AND je.UserId = @UserId ) AS NumOfUnreadEntry
	    ,( SELECT COUNT(jec.Id) FROM JournalEntries je INNER JOIN JournalEntryComments jec ON je.Id = jec.JournalEntryId AND je.Status = 1 AND jec.Status = 1 WHERE je.JournalId = j.Id AND je.UserId = @UserId AND jec.UserId = @UserId  ) AS NumOfComment
      ,( SELECT COUNT(jec.Id) FROM JournalEntries je INNER JOIN JournalEntryComments jec ON je.Id = jec.JournalEntryId AND je.Status = 1 AND jec.IsRead = 0 AND jec.Status = 1 WHERE je.JournalId = j.Id AND je.UserId = @UserId  AND jec.UserId = @UserId ) AS NumOfNewComment
  FROM [Journals] j WHERE CourseId = @CourseId AND j.[Status]  &lt;&gt; 0 AND j.[Status]  &lt;&gt; 5 ORDER BY StartDate DESC</value>
  </data>
  <data name="Journals_GetJournalStudentByCourse" xml:space="preserve">
    <value>BEGIN
	IF @DisplayName IS NOT NULL AND LEN(@DisplayName) &gt; 0
		SELECT us.[Id] as UserId,
		   us.[DisplayName],
		   us.[EmailAddress],
		   us.[OrgDefinedId],
		   us.[ProfileBadgeUrl],
		   us.[ProfileIdentifier],
		   ( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.UserId = us.Id AND je.[Status] = 1 AND je.IsDraft = 0  AND je.JournalId = @journalId ) AS NumOfEntry,
		   ( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.UserId = us.Id AND je.[Status] = 1 AND je.IsDraft = 0  AND je.IsRead = 0 AND je.JournalId = @journalId AND je.UserId = je.LastUpdatedBy) AS NumOfUnRead
		FROM Users us
			INNER JOIN UserEnrollments ue ON us.Id = ue.UserId AND ue.CourseId = @CourseId AND us.DisplayName LIKE  '%' + @DisplayName + '%'
      INNER JOIN Roles rol ON rol.Id = ue.RoleId AND LOWER(rol.[Name]) = LOWER(@RoleName )
	ELSE
		SELECT us.[Id] as UserId,
		   us.[DisplayName],
		   us.[EmailAddress],
		   us.[OrgDefinedId],
		   us.[ProfileBadgeUrl],
		   us.[ProfileIdentifier],
		   ( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.UserId = us.Id AND je.[Status] = 1 AND je.IsDraft = 0 AND je.JournalId = @journalId ) AS NumOfEntry,
		   ( SELECT COUNT(je.Id) FROM JournalEntries je WHERE je.UserId = us.Id AND je.[Status] = 1 AND je.IsDraft = 0 AND je.IsRead = 0 AND je.JournalId = @journalId AND je.UserId = je.LastUpdatedBy) AS NumOfUnRead
		FROM Users us
			INNER JOIN UserEnrollments ue ON us.Id = ue.UserId AND ue.CourseId = @CourseId
      INNER JOIN Roles rol ON rol.Id = ue.RoleId AND LOWER(rol.[Name]) = LOWER(@RoleName)
END
</value>
  </data>
  <data name="Journals_GetTotalCountByCourse" xml:space="preserve">
    <value>SELECT COUNT(Id) FROM [Journals] WHERE CourseId = @CourseId AND [Status]  &lt;&gt; 0 </value>
  </data>
  <data name="Journals_Insert" xml:space="preserve">
    <value>INSERT INTO [Journals]
           ([CourseId]
           ,[Title]
           ,[Description]
           ,[StartDate]
           ,[EndDate]
           ,[Status]
           ,[LastUpdatedTime]
           ,[LastUpdatedBy])
     VALUES
           (@CourseId
           ,@Title
           ,@Description
           ,@StartDate
           ,@EndDate
           ,@Status
           ,@LastUpdatedTime
           ,@LastUpdatedBy)</value>
  </data>
  <data name="Journals_Update" xml:space="preserve">
    <value>UPDATE [Journals]
   SET 
       [Title] = @Title
      ,[Description] = @Description
      ,[StartDate] = @StartDate
      ,[EndDate] = @EndDate
      ,[Status] = @Status
      ,[LastUpdatedTime] = @LastUpdatedTime
      ,[LastUpdatedBy] = @LastUpdatedBy
 WHERE Id = @Id</value>
  </data>
  <data name="Journals_Save" xml:space="preserve">
    <value>BEGIN
	IF @Id IS NOT NULL AND @Id &gt; 0
		UPDATE [Journals]
		   SET 
			   [Title] = @Title
			  ,[Description] = @Description
			  ,[StartDate] = @StartDate
			  ,[EndDate] = @EndDate
			  ,[Status] = @Status
			  ,[LastUpdatedTime] = @LastUpdatedTime
			  ,[LastUpdatedBy] = @LastUpdatedBy
		 WHERE Id = @Id
	ELSE
		INSERT INTO [Journals]
           ([CourseId]
           ,[Title]
           ,[Description]
           ,[StartDate]
           ,[EndDate]
           ,[Status]
           ,[LastUpdatedTime]
           ,[LastUpdatedBy])
     VALUES
           (@CourseId
           ,@Title
           ,@Description
           ,@StartDate
           ,@EndDate
           ,@Status
           ,@LastUpdatedTime
           ,@LastUpdatedBy)
END</value>
  </data>
  <data name="JournalEntryComments_GetCountNewComment" xml:space="preserve">
    <value>
          SELECT 
            COUNT(DISTINCT jec.Id) NumOfUnread 
          FROM 
            JournalEntryComments jec 
              INNER JOIN UserEnrollments ue ON ue.UserId = jec.LastUpdatedBy INNER JOIN Roles rl ON rl.Id = ue.RoleId AND LOWER(rl.Name) = LOWER(@RoleName)
              INNER JOIN JournalEntries je ON je.Id = jec.JournalEntryId AND je.[Status] = 1
			        INNER JOIN Journals j ON j.Id = je.JournalId AND j.CourseId = @CourseId AND j.[Status] = 1
          WHERE 
            jec.UserId = @UserId AND jec.IsRead = 0 AND jec.[Status] = 1
   </value>
  </data>
  <data name="JournalEntries_GetCountNewEntry" xml:space="preserve">
    <value>
        SELECT 
	        COUNT(DISTINCT je.Id) CountNewEntry
        FROM 
	        Journals jn 
	        INNER JOIN JournalEntries je ON jn.Id = je.JournalId
          INNER JOIN UserEnrollments ue ON ue.UserId = je.UserId AND je.LastUpdatedBy = je.UserId 
          INNER JOIN Roles rl ON rl.Id = ue.RoleId AND LOWER(rl.Name) = LOWER(@RoleName)
        WHERE jn.CourseId = @CourseId AND jn.[Status]  &lt;&gt; 0 AND je.IsDraft = 0 AND je.IsRead = 0 AND je.[Status] = 1
    </value>
  </data>
  <data name="Journal_GetGroupByStudent" xml:space="preserve">
    <value>
        SELECT us.Id as UserId,
          us.DisplayName,
          us.OrgDefinedId,
	        ( SELECT COUNT(DISTINCT je.JournalId) FROM JournalEntries je INNER JOIN Journals j ON j.Id = je.JournalId AND j.CourseId = @CourseId AND j.[Status]  &lt;&gt; 0 WHERE je.IsDraft = 0 AND je.[Status] = 1 AND je.UserId = us.Id  ) AS NumOfJournal
        FROM Users us
            INNER JOIN UserEnrollments ue ON us.Id = ue.UserId AND ue.CourseId = @CourseId
	          INNER JOIN Roles rl ON rl.Id = ue.RoleId AND LOWER(rl.Name) = LOWER(@RoleName) ORDER BY us.DisplayName asc 
    </value>
  </data>
  <data name="Journal_GetJournalByStudent" xml:space="preserve">
    <value>
      SELECT DISTINCT j.[Id]
          ,j.[CourseId]
          ,j.[Title]
          ,j.[Description]
          ,j.[StartDate]
          ,j.[EndDate]
          ,( CASE
            WHEN j.[Status] = 1 AND GETUTCDATE() &gt;= StartDate AND GETUTCDATE() &lt;= EndDate THEN 1
            WHEN j.[Status] = 2 THEN 2
            WHEN j.[Status] = 1 AND StartDate &gt; GETUTCDATE() THEN 3
            ELSE 4
              END
              ) AS [JournalStatus]
               ,j.[Status]
          ,j.[LastUpdatedTime]
          ,j.[LastUpdatedBy]
          ,( SELECT COUNT(DISTINCT je.Id) FROM JournalEntries je WHERE JournalId = j.Id AND je.IsDraft = 0 AND je.[Status] = 1 AND je.[UserId] = @UserId ) AS NumOfEntry
	        ,( SELECT COUNT(DISTINCT je.Id) FROM JournalEntries je WHERE je.JournalId = j.Id AND je.IsDraft = 0 AND je.IsRead = 0 AND je.[Status] = 1 AND je.[UserId] = @UserId ) AS NumOfUnreadEntry
      FROM [Journals] j 
      INNER JOIN JournalEntries en ON j.id = en.JournalId AND en.UserId = @UserId 
      WHERE j.CourseId = @CourseId  AND j.[Status]  &lt;&gt; 0 AND en.IsDraft = 0 AND en.[Status] = 1 ORDER BY {0} 
    </value>
  </data>
  <data name="Journal_GetListEntryBySuggest" xml:space="preserve">
    <value>
        SELECT 
             [Id]
            ,[Title]
        FROM [JournalEntries] WHERE JournalId = @JournalId AND UserId = @UserId AND [Status] = 1 AND IsDraft = 0
    </value>
  </data>
  <data name="Journal_GetEntryByStudent" xml:space="preserve">
    <value>
        SELECT 
             [Id]
            ,[JournalId]
            ,[UserId]
            ,[Title]
            ,[Body]
            ,[IsDraft]
            ,[IsRead]
            ,[Status]
            ,[LastUpdatedTime]
            ,[LastUpdatedBy]
        FROM [JournalEntries] WHERE JournalId = @JournalId AND UserId = @UserId AND [Status] = 1 AND IsDraft = 0
    </value>
  </data>
  <data name="JournalEntryComments_GetByEntryId" xml:space="preserve">
    <value>
        SELECT [Id]
            ,[JournalEntryId]
            ,[UserId]
            ,[Comment]
            ,[IsRead]
            ,[Status]
            ,[LastUpdatedTime]
            ,[LastUpdatedBy]
        FROM [JournalEntryComments] WHERE JournalEntryId = @JournalEntryId AND [Status] = 1
    </value>
  </data>
  <data name="JournalEntry_GetListJournalEntryStudent" xml:space="preserve">
    <value>
        SELECT 
	        je.Id,
	        je.JournalId,
	        je.Title,
	        je.Body,
	        us.DisplayName,
	        us.OrgDefinedId,
          je.UserId
        FROM 
	        JournalEntries je INNER JOIN Users us ON je.UserId = us.Id
	        inner join Journals j ON j.Id = je.JournalId 
        WHERE
	        je.IsDraft = 0 AND je.[Status] = 1 AND j.[Status] = 1 AND  je.JournalId = @JournalId ORDER BY us.DisplayName
    </value>
  </data>
  <data name="JournalEntryComments_GetListJournalEntryCommentUser" xml:space="preserve">
    <value>
        SELECT 
	        jec.Id,
	        jec.Comment,
	        jec.JournalEntryId,
	        jec.LastUpdatedBy UserId,
	        us.DisplayName
        FROM 
	        JournalEntries je 
	        INNER JOIN Journals j ON j.Id = je.JournalId 
	        INNER JOIN JournalEntryComments jec on jec.JournalEntryId = je.Id
	        INNER JOIN Users us ON jec.LastUpdatedBy = us.Id
        WHERE
	        jec.[Status] = 1 AND je.IsDraft = 0 AND je.[Status] = 1 AND j.[Status] = 1 AND  je.JournalId = @JournalId ORDER BY jec.LastUpdatedTime DESC
    </value>
  </data>
</root>